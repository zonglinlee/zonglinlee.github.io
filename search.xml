<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js-basics</title>
      <link href="/js-basics/"/>
      <url>/js-basics/</url>
      
        <content type="html"><![CDATA[<h2 id="DOMTokenList-interface"><a href="#DOMTokenList-interface" class="headerlink" title="DOMTokenList interface"></a>DOMTokenList interface</h2><p>The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by <code>Element.classList</code>.</p><div class="class1 class2"></div>原生dom方法来toggle一个类：`div.classList.toggle("class1")`<hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>formatting contexts</title>
      <link href="/bfc/"/>
      <url>/bfc/</url>
      
        <content type="html"><![CDATA[<h2 id="formatting-contexts-types"><a href="#formatting-contexts-types" class="headerlink" title="formatting contexts types"></a>formatting contexts types</h2><p>Everything on a page is part of a formatting context, or an area which has been defined to lay out content in a particular way. A block formatting context (BFC) will lay child elements out according to block layout rules, a flex formatting context will lay its children out as flex items, etc. Each formatting context has specific rules about how layout behaves when in that context.</p><ul><li>block formatting contexts</li><li>inline formatting contexts</li><li>flex formatting contexts</li></ul><h2 id="Creating-a-new-block-formatting-context"><a href="#Creating-a-new-block-formatting-context" class="headerlink" title="Creating a new block formatting context"></a>Creating a new block formatting context</h2><p>html 元素是最外层初始的一个 block formatting contexts.This means that every element inside the <html> element’s block is laid out according to normal flow following the rules for block and inline layout.</p><ul><li>elements made to float using float</li><li>absolutely positioned elements (including position: fixed or position: sticky)</li><li>elements with display: inline-block</li><li>block elements where overflow has a value other than visible</li><li>elements with display: flow-root or display: flow-root list-item</li><li>flex items</li><li>grid items</li></ul><h2 id="Explicitly-creating-a-BFC-using-display-flow-root"><a href="#Explicitly-creating-a-BFC-using-display-flow-root" class="headerlink" title="Explicitly creating a BFC using display: flow-root"></a>Explicitly creating a BFC using display: flow-root</h2><h2 id="Inline-formatting-contexts"><a href="#Inline-formatting-contexts" class="headerlink" title="Inline formatting contexts"></a>Inline formatting contexts</h2><p>Inline formatting contexts exist inside other formatting contexts and can be thought of as the context of a paragraph. </p><p>css盒模型并不完全适用于inline formatting contets, In a horizontal writing mode line, horizontal padding, borders and margin will be applied to the element and push the text away left and right. However, margins above and below the element will not be applied. Vertical padding and borders will be applied but may  overlap content above and below as, in the inline formatting context, the line boxes will not be pushed apart by padding and borders.</p><h2 id="In-Flow-and-Out-of-Flow"><a href="#In-Flow-and-Out-of-Flow" class="headerlink" title="In Flow and Out of Flow"></a>In Flow and Out of Flow</h2><h3 id="Taking-an-item-out-of-flow"><a href="#Taking-an-item-out-of-flow" class="headerlink" title="Taking an item out of flow"></a>Taking an item out of flow</h3><p>All elements are in-flow apart from:</p><ul><li>floated items</li><li>items with position: absolute (including position: fixed which acts in the same way)</li><li>the root element (html)</li></ul><p>Out of flow items create a new Block Formatting Context (BFC) and therefore everything inside them can be seen as a mini layout, separate from the rest of the page. The root element therefore is out of flow, as the container for everything in our document, and establishes the Block Formatting Context for the document.</p><h2 id="the-display-css-property"><a href="#the-display-css-property" class="headerlink" title="the display css  property"></a>the <code>display</code> css  property</h2><p>Formally, the display property sets an element’s inner and outer display types. The outer type sets an element’s participation in flow layout; the inner type sets the layout of children.</p><p>The Level 3 specification details two values for the display property — enabling the specification of the outer and inner display type explicitly — but this is not yet well-supported by browsers.<br>The <display-legacy> methods allow the same results with single keyword values, and should be favoured by developers until the two keyword values are better supported. For example, using two values you might specify an inline flex container as follows:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//This can currently be specified using a single value.<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-basics</title>
      <link href="/css-basics/"/>
      <url>/css-basics/</url>
      
        <content type="html"><![CDATA[<ul><li><p>css盒模型中以 top-left为坐标原点</p></li><li><p>css rotate(deg) deg正为clockwise deg负为counter-clockwise,transform-origin默认值为：50% 50% 0</p></li><li><p>CSS object model<br>There are four standard coordinate systems</p><ul><li>Offset ：the mouse event’s offsetX and offsetY properties</li><li>Client : the MouseEvent.clientX and MouseEvent.clientY</li><li>Page :Mouse events’ pageX and pageY properties </li><li>Screen :The MouseEvent.screenX and MouseEvent.screenY properties </li></ul></li><li><p>base-line: align-items:base-line;//所有flex items 第一行文字底部对齐</p></li><li><p>hover,active顺序<br>a:hover,a:focus{<br>  //这两个最好一块写<br>  color:pink;<br>}</p></li><li><p>如果父元素display:flex,子元素display：none; position:absolute都不算在flex-items里面</p></li></ul><p>The unset CSS keyword resets a property to its inherited value if it inherits from its parent, and to its initial value if not.</p><p>The initial CSS keyword applies the initial (or default) value of a property to an element. This initial value is set by the browser. </p><p>The inherit CSS keyword causes the element for which it is specified to take the computed value of the property from its parent element.</p><p>display:none<br>Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.<br>To have an element take up the space that it would normally take, but without actually rendering anything, use the visibility property instead.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a><a href="https://blog.phpgao.com/git_submodule.html" target="_blank" rel="noopener">submodule</a></h2><p>submodule中文件变更了,在主工作目录中是没有办法add并commit的，分而治之，主模块提交主模块的，子模块提交自己的，子模块提交后，主模块会感知到，从而再在主模块中提交即可</p><h3 id="添加-submodule"><a href="#添加-submodule" class="headerlink" title="添加 submodule"></a>添加 <code>submodule</code></h3><p>将GitHub上这个模块添加到本地git仓库的 usr/plugins/ExternalTool 中作为一个submodule<br><code>git submodule add https://github.com/phpgao/ExternalTool.git   usr/plugins/BaiduSubmit</code><br>信息会被记录在 <code>.gitmodules</code> <code>.git/config</code> 两个文件中</p><h3 id="移除-submodule"><a href="#移除-submodule" class="headerlink" title="移除 submodule"></a>移除 <code>submodule</code></h3><p>首先我们反初始化,此时 .git/config 已被重写，BaiduSubmit的相关信息已经不存在了<br><code>git submodule deinit usr/plugins/BaiduSubmit</code><br>删除子模块和.gitmodules 文件中的相关信息<br><code>git rm usr/plugins/BaiduSubmit</code></p><h2 id="–allow-unrelated-histories"><a href="#–allow-unrelated-histories" class="headerlink" title="–allow-unrelated-histories"></a>–allow-unrelated-histories</h2><p>报错：fatal: refusing to merge unrelated histories ,合并不相关的历史记录<br><code>git pull origin master --allow-unrelated-histories</code></p><h2 id="远程合并到本地"><a href="#远程合并到本地" class="headerlink" title="远程合并到本地"></a>远程合并到本地</h2><p><code>git remote -v</code>     查询远程的代码版本</p><h3 id="直接合并"><a href="#直接合并" class="headerlink" title="直接合并"></a>直接合并</h3><p><code>git pull origin master</code> 拉取远端origin/master分支并合并到当前分支<br><code>git pull origin dev</code> 拉取远端origin/dev分支并合并到当前分支</p><h3 id="git-fetch-merge-需要手动删除分支"><a href="#git-fetch-merge-需要手动删除分支" class="headerlink" title="git fetch + merge(需要手动删除分支)"></a><code>git fetch + merge</code>(需要手动删除分支)</h3><p>拉取到本地并新建一个分支 然后 手动合并<br>在本地建立master1分支，并下载远端的origin/master分支到本地的master1分支中<br><code>git fetch origin master:master1</code><br>查看本地master1分支与当前分支的版本差异<br><code>git diff master1</code><br>合并本地分支master1到当前分支<br><code>git merge master1</code><br>删除本地分支master1<br><code>git branch -D master1</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tar-unzip</title>
      <link href="/tar-unzip/"/>
      <url>/tar-unzip/</url>
      
        <content type="html"><![CDATA[<p>Linux下常见的压缩包格式有5种:zip tar.gz tar.bz2 tar.xz tar.Z<br>其中tar是种打包格式,gz和bz2等后缀才是指代压缩方式:gzip和bzip2<br>unzip filename.zip<br>事实上, 从1.15版本开始tar就可以自动识别压缩的格式,故不需人为区分压缩格式就能正确解压<br>tar -xvf filename.tar.gz<br>tar -xvf filename.tar.bz2<br>tar -xvf filename.tar.xz<br>tar -xvf filename.tar.Z</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客点击特效</title>
      <link href="/hexo-bo-ke-dian-ji-te-xiao/"/>
      <url>/hexo-bo-ke-dian-ji-te-xiao/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> coreSocialistValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#11f0e5"</span><span class="token punctuation">,</span><span class="token string">"#e815d3"</span><span class="token punctuation">,</span><span class="token string">"#f7f30f"</span><span class="token punctuation">,</span><span class="token string">"#e8270e"</span><span class="token punctuation">,</span><span class="token string">"#15eb59"</span><span class="token punctuation">,</span><span class="token string">"#881df2"</span><span class="token punctuation">,</span><span class="token string">"#fa9120"</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> coreSocialistValues<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//过滤a标签</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span />"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>coreSocialistValues<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> coreSocialistValues<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">let</span> color_index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> color <span class="token operator">=</span> colors<span class="token punctuation">[</span>color_index<span class="token punctuation">]</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>      $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">999999</span><span class="token punctuation">,</span>        <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>        <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>        <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>        <span class="token string">"color"</span><span class="token punctuation">:</span> color      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>      $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>        <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1500</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo参数</title>
      <link href="/hexo-can-shu/"/>
      <url>/hexo-can-shu/</url>
      
        <content type="html"><![CDATA[<ul><li>site.data<br>在source/_data文件夹下的 YAML or JSON files<br>比如在此文件夹下有一个 munu.yaml 文件，则可以在模板字符串中，link是 property</li></ul><p>&lt;% for (var link in site.data.menu) { %&gt;<br>  <a href="<%= site.data.menu[link] %>"> &lt;%= link %&gt; </a><br>&lt;% } %&gt;</p><p>hexo new [layout] <title><br>post is the default layout<br>There are three default layouts in Hexo: post, page and draft.<br>layout 存在于根目录下的 Scaffolds 文件夹中，里面默认有page.md/post.md/draft.md 三个</p><p>type=”image/x-icon” 是什么</p><p>theme 文件夹<br>.<br>├── _config.yml<br>├── languages<br>├── layout   //模板字符串文件夹<br>├── scripts //hexo 初始化时候会自动加载这个文件夹的js文件<br>└── source  //js/css 等直接copy到根目录下的public文件夹 ，会忽略隐藏文件和以_开头的文件</p><p>网站部署的时候根目录是生成的public文件夹<br>page ：Page specific information and custom variables set in front-matter.<br>page.content：The full processed content of the article</p><p><code>Hexo</code> has special <code>page</code> called <code>post</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node-sql-install</title>
      <link href="/node-sql-install/"/>
      <url>/node-sql-install/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS8-install-node"><a href="#CentOS8-install-node" class="headerlink" title="CentOS8 install node"></a>CentOS8 install node</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><pre class=" language-shell"><code class="language-shell">cd /homewget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xztar -Jxvf node-v12.14.1-linux-x64.tar.xzln -s /home/node-v12.14.1-linux-x64/bin/node /usr/local/binln -s /home/node-v12.14.1-linux-x64/bin/npm  /usr/local/binln -s /home/node-v12.14.1-linux-x64/bin/npx  /usr/local/binnode -v</code></pre><h2 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h2><p><code>firewall-cmd --zone=public --permanent --add-port=80/tcp &amp;&amp; firewall-cmd --reload</code></p><h2 id="node-后台运行"><a href="#node-后台运行" class="headerlink" title="node 后台运行"></a>node 后台运行</h2><p>vim /etc/systemd/system/http1.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=http1 daemon<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>ExecStart=/usr/local/bin/node  /home/my-server/app.jsRestart=always<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=graphical.target</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/js/"/>
      <url>/js/</url>
      
        <content type="html"><![CDATA[<h2 id="function-作用"><a href="#function-作用" class="headerlink" title="!function(){}() 作用"></a><code>!function(){}()</code> 作用</h2><p>跟(function(){})();这个函数是一个意思，都是告诉浏览器自动运行这个匿名函数的，因为!+()这些符号的运算符是最高的，所以会先运行它们后面的函数</p><h2 id="noscript-标签"><a href="#noscript-标签" class="headerlink" title="noscript 标签"></a>noscript 标签</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Z-index</title>
      <link href="/z-index/"/>
      <url>/z-index/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Z-index"><a href="#CSS-Z-index" class="headerlink" title="CSS Z-index"></a>CSS Z-index</h1><h2 id="当没有定义z-index属性时"><a href="#当没有定义z-index属性时" class="headerlink" title="当没有定义z-index属性时"></a>当没有定义z-index属性时</h2><p>When no z-index property is specified, elements are rendered on the default rendering layer 0 (zero).<br>从下倒上依次是：</p><ul><li>The background and borders of the root element</li><li>Descendant non-positioned blocks, in order of appearance in the HTML</li><li>Descendant positioned elements, in order of appearance in the HTML</li></ul><p>当flex-items的order属性改变了HTML的显示顺序之后，它同样会影响stacking context的顺序</p><h2 id="The-stacking-context（层叠上下文）"><a href="#The-stacking-context（层叠上下文）" class="headerlink" title="The stacking context（层叠上下文）"></a>The stacking context（层叠上下文）</h2><p>它是一个假象的三维空间，垂直于视口，HTML 元素基于其元素属性按照优先级顺序占据这个空间</p><h3 id="如何产生一个层叠上下文"><a href="#如何产生一个层叠上下文" class="headerlink" title="如何产生一个层叠上下文"></a>如何产生一个层叠上下文</h3><ul><li>html元素本身</li><li>position为absolute/relative，并且z-index不为auto</li><li>position为fixed/sticky</li><li>flex items,并且z-index不为auto</li><li>grid items, 并且z-index不为auto</li><li>Element with a opacity value less than 1 </li><li>Element with a mix-blend-mode value other than normal.</li><li>Element with any of the following properties with value other than none:<pre><code>  - transform  - filter  - perspective  - clip-path  - mask / mask-image / mask-border</code></pre><h3 id="层叠上下文如何工作"><a href="#层叠上下文如何工作" class="headerlink" title="层叠上下文如何工作"></a>层叠上下文如何工作</h3>在同一个层叠上下文，子元素按照没有z-index时的顺序叠加，如果子元素有z-index属性，它是相对于在本层叠上下文中的其他子元素而言的，它整体的z-index是由父元素决定的。父元素和子元素属于不同的层叠上下文，其z-index没有比较性可言。</li></ul><p>HTML的层次结构和层叠上下文的层次结构是不同的。在层叠上下文的层次结构中，没有创建层叠上下文的元素同其父级处于一个层叠上下文。创建了层叠上下文的会跳离父元素的HTML结构限制，自成一个层叠上下文。</p><h2 id="Stacking-with-floated-blocks"><a href="#Stacking-with-floated-blocks" class="headerlink" title="Stacking with floated blocks"></a>Stacking with floated blocks</h2><p>For floated blocks, the stacking order is a bit different. Floating blocks are placed between non-positioned blocks and positioned blocks</p><ul><li>The background and borders of the root element</li><li>Descendant non-positioned blocks, in order of appearance in the HTML</li><li>Floating blocks</li><li>Descendant positioned elements, in order of appearance in the HTML</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build-hexo-theme</title>
      <link href="/build-hexo-theme/"/>
      <url>/build-hexo-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="iconfont应用"><a href="#iconfont应用" class="headerlink" title="iconfont应用"></a>iconfont应用</h2><p>下载的iconfont在style中引入<br><code>@import &quot;iconfont/iconfont.css&quot;</code><br><code>&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;</code></p><h2 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h2><h3 id="SELECTORS"><a href="#SELECTORS" class="headerlink" title="SELECTORS"></a>SELECTORS</h3><p>Parent Reference <code>&amp;:hover{}</code></p><p>参考链接：<br><a href="https://favicon.io/" target="_blank" rel="noopener">网站favicon</a><br><a href="https://cssgenerator.org/" target="_blank" rel="noopener">css生成器</a><br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>responsive web design</title>
      <link href="/responsive-web-design/"/>
      <url>/responsive-web-design/</url>
      
        <content type="html"><![CDATA[<ul><li>容器块级元素自适应<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>  <span class="token selector">width<span class="token pseudo-class">:70</span>%;//    宽度自适应屏幕，70%  max-width<span class="token pseudo-class">:980px</span>; // 限定最大宽度  min-width<span class="token pseudo-class">:320px</span>; //  margin: 0 auto; //居中  img</span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>       //自适应父元素container,图片高度会自己调节，但是当宽度大于图片自身尺寸之后，会拉伸图片，所以推荐写成<span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>这样当宽度超过图片自身宽度时图片不再变宽，就不会降低图片显示质量，它也能很好的自适应屏幕尺寸变小的情况。      <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>      //图片默认inline  <span class="token punctuation">}</span></code></pre></li></ul><p>}</p><pre><code>- rem 单位：继承自html元素的font-size，一般默认16px```csshtml{    font-size:62.5%;     //默认字体如果16px,则html元素的font-size现在为10px;    //不推荐}</code></pre><ul><li><p>em 单位：如果父元素没有规定font-size，它会一直往上搜素直到body元素,继承body元素的font-size，一般默认16px.</p></li><li><p>如何选择字体单位<br>  general rule of thumb:</p><ul><li>font-size: rem;</li><li>padding and margin: em; //这里有一个坑，就是em一般是参考父元素的font-size，但当涉及到padding和margin的时候，它是以自身元素的font-size为基准的。</li><li>width：em or percentage</li></ul></li><li><p>media query</p><pre class=" language-css"><code class="language-css"><span class="token property">syntax</span><span class="token punctuation">:</span><span class="token atrule"><span class="token rule">@media</span> media-type and <span class="token punctuation">(</span>media-features<span class="token punctuation">)</span></span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>// 媒体查询顺序很重要，以下写法会导致 第一个媒体查询不起作用，会被后一个覆盖掉。当resize了之后，css会重新进行渲染，从头至尾走一步css,只要规则匹配，后面的就会覆盖掉前面的，所以媒体查询一般都写在最后面。<span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>600px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">//当屏幕宽度大于等于600px时候  body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>UI设计先从移动端开始，小屏幕到大屏幕考虑。小屏幕都是竖着从上往下排列，等到屏幕宽度变大之后来一个 media query(min-width) 即可，这样可以少些好多代码</p></li><li><p>如果页面最先展现 图片 ，小标题来展现一些 info 信息，html 结构也应该先写标题，段落(用于展现info)，保证在没有css加载的时候逻辑顺序正确，通过css flex-box 中的order调整视觉上的布局。</p></li><li><p>图片处理技巧<br>如果想调整图片大小<br>img{<br>  width:100%<br>  min-height:200px;<br>  object-fit: cover;<br>  //这个会按比例放大图片，并进行裁切以适应容器<br>  object-position:left/right //调整图片显示位置<br>}</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitbookinstall</title>
      <link href="/gitbookinstall/"/>
      <url>/gitbookinstall/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitbook安装"><a href="#Gitbook安装" class="headerlink" title="Gitbook安装"></a>Gitbook安装</h1><h2 id="gitbook-简介"><a href="#gitbook-简介" class="headerlink" title="gitbook 简介"></a><a href="https://baike.baidu.com/item/GitBook" target="_blank" rel="noopener">gitbook 简介</a></h2><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br>GitBook支持输出多种文档格式：</p><ul><li>静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上</li><li>PDF：需要安装gitbook-pdf依赖</li></ul><p>使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md </p><h2 id="gitbook-cli"><a href="#gitbook-cli" class="headerlink" title="gitbook-cli"></a>gitbook-cli</h2><p>gitbook 命令行工具，用来操控gitbook</p><pre class=" language-shell"><code class="language-shell">npm install gitbook-cli -g</code></pre><p>执行 <code>git init</code> 时会自动安装gitbook,耗时较长，请耐心等待<br>常用命令</p><pre class=" language-shell"><code class="language-shell">#Create the directories and files for a book from its SUMMARY.md file (if existing) usinggitbook init#You can serve a repository as a book using:gitbook serve#Or simply build the static website using:gitbook build</code></pre><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><ul><li>不再使用git作为版本管理工具</li><li>可以在gitbook space 中导入GitHub的仓库</li><li>不再支持 gitbook-cli 工具了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html" target="_blank" rel="noopener">https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html</a><br><a href="https://docs.gitbook.com/getting-started/quick-start" target="_blank" rel="noopener">https://docs.gitbook.com/getting-started/quick-start</a><br><a href="https://docs.gitbook.com/resources/gitbook-legacy/v2-differences" target="_blank" rel="noopener">https://docs.gitbook.com/resources/gitbook-legacy/v2-differences</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to install ss</title>
      <link href="/ssinstall/"/>
      <url>/ssinstall/</url>
      
        <content type="html"><![CDATA[<p>Xshell6 远程登录 vps (OS:CentOS8)</p><a id="more"></a><h2 id="检测pip"><a href="#检测pip" class="headerlink" title="检测pip"></a>检测pip</h2><p>whereis pip <br><br>pip: /usr/bin/pip3.6<br><br>这个版本支持 chacha20-ietf-poly1305加密方式</p><p><code>pip3.6 install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</code></p><h2 id="安装-libsodium-包"><a href="#安装-libsodium-包" class="headerlink" title="安装 libsodium 包"></a><a href="https://www.24kplus.com/linux/287.html" target="_blank" rel="noopener">安装 libsodium 包</a></h2><p>现在ss服务端还启动不了，需要安装libsodium</p><pre class=" language-shell"><code class="language-shell">cd /homewget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gztar -zxf libsodium-1.0.18-stable.tar.gzcd libsodium-stable#编译安装./configure --prefix=/usrmake && make checksudo make installsudo ldconfig</code></pre><p>解决错误一： configure: error: no acceptable C compiler found in $PATH </p><p>yum install gcc</p><p>解决错误二： config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. </p><p>yum install make -y</p><h2 id="配置ss服务端"><a href="#配置ss服务端" class="headerlink" title="配置ss服务端"></a>配置ss服务端</h2><p>whereis ssserver<br><br>ssserver: /usr/local/bin/ssserver<br></p><h3 id="创建shadowsocks启动配置文件"><a href="#创建shadowsocks启动配置文件" class="headerlink" title="创建shadowsocks启动配置文件"></a>创建shadowsocks启动配置文件</h3><p>vim /etc/shadowsocks.conf</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>     <span class="token property">"server_port"</span><span class="token operator">:</span><span class="token number">10443</span><span class="token punctuation">,</span>    <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"chacha20-ietf-poly1305"</span><span class="token punctuation">}</span></code></pre><p>server_port:服务器监听端口</p><p>password:要和客户端ss密码一致</p><p>method:加密方式和客户端一致</p><h3 id="开启端口号"><a href="#开启端口号" class="headerlink" title="开启端口号"></a>开启端口号</h3><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --permanent --add-port=10443/tcp firewall-cmd --reload#查看开启的端口号firewall-cmd --zone=public --permanent --list-ports</code></pre><h3 id="将ss添加到Systemd-服务管理中"><a href="#将ss添加到Systemd-服务管理中" class="headerlink" title="将ss添加到Systemd 服务管理中"></a>将ss添加到Systemd 服务管理中</h3><p>vim /etc/systemd/system/shadowsocks.service</p><pre class=" language-service"><code class="language-service">[Unit]Description=shadowsocks daemon[Service]ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks.conf Restart=always[Install]WantedBy=graphical.target</code></pre><p>开启服务<br><br>systemctl enable shadowsocks</p><p>启动服务<br><br>systemctl start shadowsocks</p><p>检查 shadowsocks 服务是否已成功启动<br><br>systemctl status shadowsocks -l</p><h2 id="CentOS8-开启-BBR"><a href="#CentOS8-开启-BBR" class="headerlink" title="CentOS8 开启 BBR"></a><a href="https://nodeedge.com/centos8-bbr.html" target="_blank" rel="noopener">CentOS8 开启 BBR</a></h2><p>开启bbr</p><pre class=" language-shell"><code class="language-shell">echo "net.core.default_qdisc=fq" >> /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.confsysctl -p验证bbrsysctl -n net.ipv4.tcp_congestion_controllsmod | grep bbr</code></pre><h2 id="安装net-speeder"><a href="#安装net-speeder" class="headerlink" title="安装net-speeder"></a><a href="https://github.com/snooda/net-speeder" target="_blank" rel="noopener">安装net-speeder</a></h2><p>wget <a href="https://github.com/snooda/net-speeder/archive/master.zip" target="_blank" rel="noopener">https://github.com/snooda/net-speeder/archive/master.zip</a><br><br>unzip master.zip</p><p>安装epel 包<br><br>wget <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a><br><br>rpm -ivh epel-release-6-8.noarch.rpm</p><p>yum install libnet libpcap libnet-devel libpcap-devel</p><p>libpcap-devel现有的yum源匹配不到，到 <a href="https://centos.pkgs.org/8/centos-powertools-x86_64/libpcap-devel-1.9.0-3.el8.i686.rpm.html" target="_blank" rel="noopener">centos.pkgs.org</a> 可以找到安装<br>直接执行 <code>dnf --enablerepo=PowerTools install libpcap-devel</code> 即可安装</p><p>编译前还要安装一个包</p><pre class=" language-shell"><code class="language-shell">yum install libnet-devel编译cd net-speeder-master/sh build.sh查看网卡信息(ens3)ip address关闭tsoethtool -K ens3 tso off</code></pre><p>开启单边加速(前台运行)<br><br>./net_speeder ens3 “ip”</p><p>开启单边加速(后台运行)<br>vim /etc/systemd/system/netspeeder.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=netspeeder<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec=<span class="token number">0</span>ExecStart=/home/net-speeder-master/net_speeder ens3  <span class="token string">"ip"</span> <span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target</code></pre><p>systemctl enable netspeeder<br><br>启动服务<br><br>systemctl start netspeeder<br><br>systemctl status netspeeder</p><h2 id="vps上安装kcptun"><a href="#vps上安装kcptun" class="headerlink" title="vps上安装kcptun"></a><a href="https://blog.kuoruan.com/102.html" target="_blank" rel="noopener">vps上安装kcptun</a></h2><p>服务端和客户端用同一个版本<br>在GitHub releas上找到kcptun包，使用wget命令下载到vps上</p><pre class=" language-shell"><code class="language-shell">cd /homemkdir kcptuncd kcptun wget https://github.com/xtaci/kcptun/releases/download/v20200103/kcptun-linux-amd64-20200103.tar.gz# 解压tar -zxf kcptun-linux-amd64-20200103.tar.gz</code></pre><p>创建启动配置文件<br>vim kcptun.conf</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"crypt"</span><span class="token operator">:</span> <span class="token string">"salsa20"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"fast2"</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span>"<span class="token operator">:</span><span class="token number">29900</span>"<span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span><span class="token string">"127.0.0.1:10443"</span><span class="token punctuation">,</span>    <span class="token property">"nocomp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"datashard"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token property">"parityshard"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span></code></pre><p>上面的配置一定要和客户端的一致，key是密码，listen是客户端访问服务端时候监听的端口<br>target是要加速的vps上的服务，它通信的是vps上的ss，所以ip为127.0.0.1，端口号就是ss服务监听的的端口号<br>服务端kcptun 和 ss 各自提供自己的服务，各自监听自己的端口 ，kcptun 提供 ss端口的加速服务</p><h3 id="开启端口号-这个用udp协议"><a href="#开启端口号-这个用udp协议" class="headerlink" title="开启端口号(这个用udp协议)"></a>开启端口号(这个用udp协议)</h3><p> firewall-cmd –zone=public –permanent –add-port=29900/udp <br><br> firewall-cmd –reload</p><p>创建服务脚本<br>vim /etc/systemd/system/kcptun.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=kcptun<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec=<span class="token number">0</span>ExecStart=/home/kcptun/server_linux_amd64 -c  /home/kcptun/kcptun.conf<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target</code></pre><p>systemctl enable kcptun<br><br>启动服务<br><br>systemctl start kcptun<br><br>systemctl status kcptun</p><h2 id="客户端-windows7-安装kcptun"><a href="#客户端-windows7-安装kcptun" class="headerlink" title="客户端(windows7)安装kcptun"></a>客户端(windows7)安装kcptun</h2><p>由于没有提供GUI图形界面，解压出来的只有.exe文件，直接执行没有办法传入配置<br>客户端 ss 访问 kcptun客户端，然后kcptun 访问vps上的kcptun server端</p><h3 id="创建客户端exe文件的控制VBScript脚本"><a href="#创建客户端exe文件的控制VBScript脚本" class="headerlink" title="创建客户端exe文件的控制VBScript脚本"></a>创建客户端exe文件的控制VBScript脚本</h3><p>vim run.vbs</p><pre class=" language-vbs"><code class="language-vbs">Dim RunKcptunSet fso = CreateObject("Scripting.FileSystemObject")Set WshShell = WScript.CreateObject("WScript.Shell")'获取文件路径currentPath = fso.GetFile(Wscript.ScriptFullName).ParentFolder.Path & "\"'配置文件路径configFile = currentPath & "client-config.json"'日志文件logFile = currentPath & "kcptun.log"'软件运行参数exeConfig = currentPath & "client_windows_amd64.exe -c " & configFile'拼接命令行cmdLine = "cmd /c " & exeConfig & " > " & logFile & " 2>&1"'启动软件WshShell.Run cmdLine, 0, False'等待1秒'WScript.Sleep 1000'打印运行命令'Wscript.echo cmdLineSet WshShell = NothingSet fso = Nothing'退出脚本WScript.quit</code></pre><p>创建启动配置脚本</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"localaddr"</span><span class="token operator">:</span> "<span class="token operator">:</span><span class="token number">12948</span>"<span class="token punctuation">,</span>    <span class="token property">"remoteaddr"</span><span class="token operator">:</span> <span class="token string">"10.10.10.10:29900"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"crypt"</span><span class="token operator">:</span> <span class="token string">"salsa20"</span><span class="token punctuation">,</span>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"fast2"</span><span class="token punctuation">,</span>    <span class="token property">"conn"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"autoexpire"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"mtu"</span><span class="token operator">:</span> <span class="token number">1350</span><span class="token punctuation">,</span>    <span class="token property">"sndwnd"</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>    <span class="token property">"rcvwnd"</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token property">"datashard"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token property">"parityshard"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token property">"dscp"</span><span class="token operator">:</span> <span class="token number">46</span><span class="token punctuation">,</span>    <span class="token property">"nocomp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"acknodelay"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"nodelay"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"interval"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token property">"resend"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"nc"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"sockbuf"</span><span class="token operator">:</span> <span class="token number">4194304</span><span class="token punctuation">,</span>    <span class="token property">"keepalive"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><p>localaddr为 :12948,本地监听端口，供ss访问<br><br>key为password,需和服务端保持一致<br><br>remoteaddr为vps的ip地址以及vps上kcptun监听的端口<br></p><h3 id="客户端ss配置"><a href="#客户端ss配置" class="headerlink" title="客户端ss配置"></a>客户端ss配置</h3><p>服务器 IP 填写本机：127.0.0.1<br><br>服务器端口填写：12948</p><p>双击run.vbs启动测试。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
