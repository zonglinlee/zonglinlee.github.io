<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js-basics</title>
      <link href="/js-basics/"/>
      <url>/js-basics/</url>
      
        <content type="html"><![CDATA[<h2 id="DOMTokenList-interface"><a href="#DOMTokenList-interface" class="headerlink" title="DOMTokenList interface"></a>DOMTokenList interface</h2><p>The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by <code>Element.classList</code>.</p><div class="class1 class2"></div>原生dom方法来toggle一个类：`div.classList.toggle("class1")`<hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css-basics</title>
      <link href="/css-basics/"/>
      <url>/css-basics/</url>
      
        <content type="html"><![CDATA[<ul><li><p>css盒模型中以 top-left为坐标原点</p></li><li><p>css rotate(deg) deg正为clockwise deg负为counter-clockwise,transform-origin默认值为：50% 50% 0</p></li><li><p>CSS object model<br>There are four standard coordinate systems</p><ul><li>Offset ：the mouse event’s offsetX and offsetY properties</li><li>Client : the MouseEvent.clientX and MouseEvent.clientY</li><li>Page :Mouse events’ pageX and pageY properties </li><li>Screen :The MouseEvent.screenX and MouseEvent.screenY properties </li></ul></li><li><p>base-line: align-items:base-line;//所有flex items 第一行文字底部对齐</p></li><li><p>hover,active顺序<br>a:hover,a:focus{<br>  //这两个最好一块写<br>  color:pink;<br>}</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node-sql-install</title>
      <link href="/node-sql-install/"/>
      <url>/node-sql-install/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS8-install-node"><a href="#CentOS8-install-node" class="headerlink" title="CentOS8 install node"></a>CentOS8 install node</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xz</span><br><span class="line">tar -Jxvf node-v12.14.1-linux-x64.tar.xz</span><br><span class="line">ln -s /home/node-v12.14.1-linux-x64/bin/node /usr/local/bin</span><br><span class="line">ln -s /home/node-v12.14.1-linux-x64/bin/npm  /usr/local/bin</span><br><span class="line">ln -s /home/node-v12.14.1-linux-x64/bin/npx  /usr/local/bin</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h2><p><code>firewall-cmd --zone=public --permanent --add-port=80/tcp &amp;&amp; firewall-cmd --reload</code></p><h2 id="node-后台运行"><a href="#node-后台运行" class="headerlink" title="node 后台运行"></a>node 后台运行</h2><p>vim /etc/systemd/system/http1.service</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=http1 daemon</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/node  /home/my-server/app.js</span><br><span class="line">Restart=always</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=graphical.target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客点击特效</title>
      <link href="/hexo%E5%8D%9A%E5%AE%A2%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/"/>
      <url>/hexo%E5%8D%9A%E5%AE%A2%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> coreSocialistValues = [<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span>, <span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>]</span><br><span class="line">    <span class="keyword">let</span> colors = [<span class="string">"#11f0e5"</span>,<span class="string">"#e815d3"</span>,<span class="string">"#f7f30f"</span>,<span class="string">"#e8270e"</span>,<span class="string">"#15eb59"</span>,<span class="string">"#881df2"</span>,<span class="string">"#fa9120"</span>]</span><br><span class="line">    <span class="keyword">let</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * coreSocialistValues.length);</span><br><span class="line">    $(<span class="string">'body'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//过滤a标签</span></span><br><span class="line">      <span class="keyword">if</span> (e.target.tagName == <span class="string">'A'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> $i = $(<span class="string">"&lt;span /&gt;"</span>).text(coreSocialistValues[index]);</span><br><span class="line">      index = (index + <span class="number">1</span>) % coreSocialistValues.length;</span><br><span class="line">      <span class="keyword">let</span> color_index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length);</span><br><span class="line">      <span class="keyword">let</span> color = colors[color_index]</span><br><span class="line">      <span class="keyword">let</span> x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">      $i.css(&#123;</span><br><span class="line">        <span class="string">"z-index"</span>: <span class="number">999999</span>,</span><br><span class="line">        <span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line">        <span class="string">"left"</span>: x,</span><br><span class="line">        <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">        <span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line">        <span class="string">"color"</span>: color</span><br><span class="line">      &#125;);</span><br><span class="line">      $(<span class="string">"body"</span>).append($i);</span><br><span class="line">      $i.animate(&#123;</span><br><span class="line">        <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">        <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">        <span class="number">1500</span>,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo参数</title>
      <link href="/hexo%E5%8F%82%E6%95%B0/"/>
      <url>/hexo%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>site.data<br>在source/_data文件夹下的 YAML or JSON files<br>比如在此文件夹下有一个 munu.yaml 文件，则可以在模板字符串中，link是 property</li></ul><p>&lt;% for (var link in site.data.menu) { %&gt;<br>  <a href="<%= site.data.menu[link] %>"> &lt;%= link %&gt; </a><br>&lt;% } %&gt;</p><p>hexo new [layout] <title><br>post is the default layout<br>There are three default layouts in Hexo: post, page and draft.<br>layout 存在于根目录下的 Scaffolds 文件夹中，里面默认有page.md/post.md/draft.md 三个</p><p>type=”image/x-icon” 是什么</p><p>theme 文件夹<br>.<br>├── _config.yml<br>├── languages<br>├── layout   //模板字符串文件夹<br>├── scripts //hexo 初始化时候会自动加载这个文件夹的js文件<br>└── source  //js/css 等直接copy到根目录下的public文件夹 ，会忽略隐藏文件和以_开头的文件</p><p>网站部署的时候根目录是生成的public文件夹<br>page ：Page specific information and custom variables set in front-matter.<br>page.content：The full processed content of the article</p><p><code>Hexo</code> has special <code>page</code> called <code>post</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a><a href="https://blog.phpgao.com/git_submodule.html" target="_blank" rel="noopener">submodule</a></h2><p>submodule中文件变更了,在主工作目录中是没有办法add并commit的，分而治之，主模块提交主模块的，子模块提交自己的，子模块提交后，主模块会感知到，从而再在主模块中提交即可</p><h3 id="添加-submodule"><a href="#添加-submodule" class="headerlink" title="添加 submodule"></a>添加 <code>submodule</code></h3><p>将GitHub上这个模块添加到本地git仓库的 usr/plugins/ExternalTool 中作为一个submodule<br><code>git submodule add https://github.com/phpgao/ExternalTool.git   usr/plugins/BaiduSubmit</code><br>信息会被记录在 <code>.gitmodules</code> <code>.git/config</code> 两个文件中</p><h3 id="移除-submodule"><a href="#移除-submodule" class="headerlink" title="移除 submodule"></a>移除 <code>submodule</code></h3><p>首先我们反初始化,此时 .git/config 已被重写，BaiduSubmit的相关信息已经不存在了<br><code>git submodule deinit usr/plugins/BaiduSubmit</code><br>删除子模块和.gitmodules 文件中的相关信息<br><code>git rm usr/plugins/BaiduSubmit</code></p><h2 id="–allow-unrelated-histories"><a href="#–allow-unrelated-histories" class="headerlink" title="–allow-unrelated-histories"></a>–allow-unrelated-histories</h2><p>报错：fatal: refusing to merge unrelated histories ,合并不相关的历史记录<br><code>git pull origin master --allow-unrelated-histories</code></p><h2 id="远程合并到本地"><a href="#远程合并到本地" class="headerlink" title="远程合并到本地"></a>远程合并到本地</h2><p><code>git remote -v</code>     查询远程的代码版本</p><h3 id="直接合并"><a href="#直接合并" class="headerlink" title="直接合并"></a>直接合并</h3><p><code>git pull origin master</code> 拉取远端origin/master分支并合并到当前分支<br><code>git pull origin dev</code> 拉取远端origin/dev分支并合并到当前分支</p><h3 id="git-fetch-merge-需要手动删除分支"><a href="#git-fetch-merge-需要手动删除分支" class="headerlink" title="git fetch + merge(需要手动删除分支)"></a><code>git fetch + merge</code>(需要手动删除分支)</h3><p>拉取到本地并新建一个分支 然后 手动合并<br>在本地建立master1分支，并下载远端的origin/master分支到本地的master1分支中<br><code>git fetch origin master:master1</code><br>查看本地master1分支与当前分支的版本差异<br><code>git diff master1</code><br>合并本地分支master1到当前分支<br><code>git merge master1</code><br>删除本地分支master1<br><code>git branch -D master1</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/js/"/>
      <url>/js/</url>
      
        <content type="html"><![CDATA[<h2 id="function-作用"><a href="#function-作用" class="headerlink" title="!function(){}() 作用"></a><code>!function(){}()</code> 作用</h2><p>跟(function(){})();这个函数是一个意思，都是告诉浏览器自动运行这个匿名函数的，因为!+()这些符号的运算符是最高的，所以会先运行它们后面的函数</p><h2 id="noscript-标签"><a href="#noscript-标签" class="headerlink" title="noscript 标签"></a>noscript 标签</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tar-unzip</title>
      <link href="/tar-unzip/"/>
      <url>/tar-unzip/</url>
      
        <content type="html"><![CDATA[<p>Linux下常见的压缩包格式有5种:zip tar.gz tar.bz2 tar.xz tar.Z<br>其中tar是种打包格式,gz和bz2等后缀才是指代压缩方式:gzip和bzip2<br>unzip filename.zip<br>事实上, 从1.15版本开始tar就可以自动识别压缩的格式,故不需人为区分压缩格式就能正确解压<br>tar -xvf filename.tar.gz<br>tar -xvf filename.tar.bz2<br>tar -xvf filename.tar.xz<br>tar -xvf filename.tar.Z</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>responsive web design</title>
      <link href="/responsive-web-design/"/>
      <url>/responsive-web-design/</url>
      
        <content type="html"><![CDATA[<ul><li><p>容器块级元素自适应</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    width:70%;//    宽度自适应屏幕，70%</span><br><span class="line">    max-width:980px; // 限定最大宽度</span><br><span class="line">    min-width:320px; //</span><br><span class="line">    margin: 0 auto; //居中</span><br><span class="line">    <span class="selector-tag">img</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100%</span>; </span><br><span class="line">        //自适应父元素container,图片高度会自己调节，但是当宽度大于图片自身尺寸之后，会拉伸图片，所以推荐写成max-width:100%;这样当宽度超过图片自身宽度时图片不再变宽，就不会降低图片显示质量，它也能很好的自适应屏幕尺寸变小的情况。</span><br><span class="line">        <span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;</span><br><span class="line">        //图片默认inline</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rem 单位：继承自html元素的font-size，一般默认16px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">62.5%</span>; </span><br><span class="line">    //默认字体如果16px,则html元素的font-size现在为10px;</span><br><span class="line">    //不推荐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>em 单位：如果父元素没有规定font-size，它会一直往上搜素直到body元素,继承body元素的font-size，一般默认16px.</p></li><li><p>如何选择字体单位<br>  general rule of thumb:</p><ul><li>font-size: rem;</li><li>padding and margin: em; //这里有一个坑，就是em一般是参考父元素的font-size，但当涉及到padding和margin的时候，它是以自身元素的font-size为基准的。</li><li>width：em or percentage</li></ul></li><li><p>media query</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">syntax</span>:<span class="keyword">@media</span> media-type <span class="keyword">and</span> (media-features)&#123; ... &#125;</span><br><span class="line">// 媒体查询顺序很重要，以下写法会导致 第一个媒体查询不起作用，会被后一个覆盖掉。</span><br><span class="line">当<span class="selector-tag">resize</span>了之后，<span class="selector-tag">css</span>会重新进行渲染，从头至尾走一步<span class="selector-tag">css</span>,只要规则匹配，后面的就会覆盖掉前面的，所以媒体查询一般都写在最后面。</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">600px</span>)&#123;</span><br><span class="line">    //当屏幕宽度大于等于600px时候</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:pink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">400px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UI设计先从移动端开始，小屏幕到大屏幕考虑。小屏幕都是竖着从上往下排列，等到屏幕宽度变大之后来一个 media query(min-width) 即可，这样可以少些好多代码</p></li><li><p>如果页面最先展现 图片 ，小标题来展现一些 info 信息，html 结构也应该先写标题，段落(用于展现info)，保证在没有css加载的时候逻辑顺序正确，通过css flex-box 中的order调整视觉上的布局。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitbookinstall</title>
      <link href="/gitbookinstall/"/>
      <url>/gitbookinstall/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitbook安装"><a href="#Gitbook安装" class="headerlink" title="Gitbook安装"></a>Gitbook安装</h1><h2 id="gitbook-简介"><a href="#gitbook-简介" class="headerlink" title="gitbook 简介"></a><a href="https://baike.baidu.com/item/GitBook" target="_blank" rel="noopener">gitbook 简介</a></h2><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br>GitBook支持输出多种文档格式：</p><ul><li>静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上</li><li>PDF：需要安装gitbook-pdf依赖</li></ul><p>使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md </p><h2 id="gitbook-cli"><a href="#gitbook-cli" class="headerlink" title="gitbook-cli"></a>gitbook-cli</h2><p>gitbook 命令行工具，用来操控gitbook</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>执行 <code>git init</code> 时会自动安装gitbook,耗时较长，请耐心等待<br>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Create the directories and files <span class="keyword">for</span> a book from its SUMMARY.md file (<span class="keyword">if</span> existing) using</span></span><br><span class="line"></span><br><span class="line">gitbook init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">You can serve a repository as a book using:</span></span><br><span class="line"></span><br><span class="line">gitbook serve</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Or simply build the static website using:</span></span><br><span class="line"></span><br><span class="line">gitbook build</span><br></pre></td></tr></table></figure><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><ul><li>不再使用git作为版本管理工具</li><li>可以在gitbook space 中导入GitHub的仓库</li><li>不再支持 gitbook-cli 工具了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html" target="_blank" rel="noopener">https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html</a><br><a href="https://docs.gitbook.com/getting-started/quick-start" target="_blank" rel="noopener">https://docs.gitbook.com/getting-started/quick-start</a><br><a href="https://docs.gitbook.com/resources/gitbook-legacy/v2-differences" target="_blank" rel="noopener">https://docs.gitbook.com/resources/gitbook-legacy/v2-differences</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to install ss</title>
      <link href="/ssinstall/"/>
      <url>/ssinstall/</url>
      
        <content type="html"><![CDATA[<img src="/ssinstall/shadowsocks.png" class="" title="shadowsocks.png"><p>Xshell6 远程登录 vps (OS:CentOS8)</p><a id="more"></a><h2 id="检测pip"><a href="#检测pip" class="headerlink" title="检测pip"></a>检测pip</h2><p>whereis pip <br><br>pip: /usr/bin/pip3.6<br><br>这个版本支持 chacha20-ietf-poly1305加密方式</p><p><code>pip3.6 install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</code></p><h2 id="安装-libsodium-包"><a href="#安装-libsodium-包" class="headerlink" title="安装 libsodium 包"></a><a href="https://www.24kplus.com/linux/287.html" target="_blank" rel="noopener">安装 libsodium 包</a></h2><p>现在ss服务端还启动不了，需要安装libsodium</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gz</span><br><span class="line">tar -zxf libsodium-1.0.18-stable.tar.gz</span><br><span class="line">cd libsodium-stable</span><br><span class="line"><span class="meta">#</span><span class="bash">编译安装</span></span><br><span class="line">./configure --prefix=/usr</span><br><span class="line">make &amp;&amp; make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><p>解决错误一： configure: error: no acceptable C compiler found in $PATH </p><p>yum install gcc</p><p>解决错误二： config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. </p><p>yum install make -y</p><h2 id="配置ss服务端"><a href="#配置ss服务端" class="headerlink" title="配置ss服务端"></a>配置ss服务端</h2><p>whereis ssserver<br><br>ssserver: /usr/local/bin/ssserver<br></p><h3 id="创建shadowsocks启动配置文件"><a href="#创建shadowsocks启动配置文件" class="headerlink" title="创建shadowsocks启动配置文件"></a>创建shadowsocks启动配置文件</h3><p>vim /etc/shadowsocks.conf</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>, </span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">10443</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"chacha20-ietf-poly1305"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server_port:服务器监听端口</p><p>password:要和客户端ss密码一致</p><p>method:加密方式和客户端一致</p><h3 id="开启端口号"><a href="#开启端口号" class="headerlink" title="开启端口号"></a>开启端口号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-port=10443/tcp </span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看开启的端口号</span></span><br><span class="line">firewall-cmd --zone=public --permanent --list-ports</span><br></pre></td></tr></table></figure><h3 id="将ss添加到Systemd-服务管理中"><a href="#将ss添加到Systemd-服务管理中" class="headerlink" title="将ss添加到Systemd 服务管理中"></a>将ss添加到Systemd 服务管理中</h3><p>vim /etc/systemd/system/shadowsocks.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;shadowsocks daemon</span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks.conf Restart&#x3D;always</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;graphical.target</span><br></pre></td></tr></table></figure><p>开启服务<br><br>systemctl enable shadowsocks</p><p>启动服务<br><br>systemctl start shadowsocks</p><p>检查 shadowsocks 服务是否已成功启动<br><br>systemctl status shadowsocks -l</p><h2 id="CentOS8-开启-BBR"><a href="#CentOS8-开启-BBR" class="headerlink" title="CentOS8 开启 BBR"></a><a href="https://nodeedge.com/centos8-bbr.html" target="_blank" rel="noopener">CentOS8 开启 BBR</a></h2><p>开启bbr</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">验证bbr</span><br><span class="line">sysctl -n net.ipv4.tcp_congestion_control</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><h2 id="安装net-speeder"><a href="#安装net-speeder" class="headerlink" title="安装net-speeder"></a><a href="https://github.com/snooda/net-speeder" target="_blank" rel="noopener">安装net-speeder</a></h2><p>wget <a href="https://github.com/snooda/net-speeder/archive/master.zip" target="_blank" rel="noopener">https://github.com/snooda/net-speeder/archive/master.zip</a><br><br>unzip master.zip</p><p>安装epel 包<br><br>wget <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a><br><br>rpm -ivh epel-release-6-8.noarch.rpm</p><p>yum install libnet libpcap libnet-devel libpcap-devel</p><p>libpcap-devel现有的yum源匹配不到，到 <a href="https://centos.pkgs.org/8/centos-powertools-x86_64/libpcap-devel-1.9.0-3.el8.i686.rpm.html" target="_blank" rel="noopener">centos.pkgs.org</a> 可以找到安装<br>直接执行 <code>dnf --enablerepo=PowerTools install libpcap-devel</code> 即可安装</p><p>编译前还要安装一个包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install libnet-devel</span><br><span class="line">编译</span><br><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh</span><br><span class="line">查看网卡信息(ens3)</span><br><span class="line">ip address</span><br><span class="line">关闭tso</span><br><span class="line">ethtool -K ens3 tso off</span><br></pre></td></tr></table></figure><p>开启单边加速(前台运行)<br><br>./net_speeder ens3 “ip”</p><p>开启单边加速(后台运行)<br>vim /etc/systemd/system/netspeeder.service</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=netspeeder</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/home/net-speeder-master/net_speeder ens3  "ip" </span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>systemctl enable netspeeder<br><br>启动服务<br><br>systemctl start netspeeder<br><br>systemctl status netspeeder</p><h2 id="vps上安装kcptun"><a href="#vps上安装kcptun" class="headerlink" title="vps上安装kcptun"></a><a href="https://blog.kuoruan.com/102.html" target="_blank" rel="noopener">vps上安装kcptun</a></h2><p>服务端和客户端用同一个版本<br>在GitHub releas上找到kcptun包，使用wget命令下载到vps上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mkdir kcptun</span><br><span class="line">cd kcptun </span><br><span class="line">wget https://github.com/xtaci/kcptun/releases/download/v20200103/kcptun-linux-amd64-20200103.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxf kcptun-linux-amd64-20200103.tar.gz</span><br></pre></td></tr></table></figure><p>创建启动配置文件<br>vim kcptun.conf</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"crypt"</span>: <span class="string">"salsa20"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"mode"</span>: <span class="string">"fast2"</span>,</span><br><span class="line">    <span class="attr">"listen"</span>:<span class="string">":29900"</span>,</span><br><span class="line">    <span class="attr">"target"</span>:<span class="string">"127.0.0.1:10443"</span>,</span><br><span class="line">    <span class="attr">"nocomp"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"datashard"</span>: <span class="number">70</span>,</span><br><span class="line">    <span class="attr">"parityshard"</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的配置一定要和客户端的一致，key是密码，listen是客户端访问服务端时候监听的端口<br>target是要加速的vps上的服务，它通信的是vps上的ss，所以ip为127.0.0.1，端口号就是ss服务监听的的端口号<br>服务端kcptun 和 ss 各自提供自己的服务，各自监听自己的端口 ，kcptun 提供 ss端口的加速服务</p><h3 id="开启端口号-这个用udp协议"><a href="#开启端口号-这个用udp协议" class="headerlink" title="开启端口号(这个用udp协议)"></a>开启端口号(这个用udp协议)</h3><p> firewall-cmd –zone=public –permanent –add-port=29900/udp <br><br> firewall-cmd –reload</p><p>创建服务脚本<br>vim /etc/systemd/system/kcptun.service</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=kcptun</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/home/kcptun/server_linux_amd64 -c  /home/kcptun/kcptun.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>systemctl enable kcptun<br><br>启动服务<br><br>systemctl start kcptun<br><br>systemctl status kcptun</p><h2 id="客户端-windows7-安装kcptun"><a href="#客户端-windows7-安装kcptun" class="headerlink" title="客户端(windows7)安装kcptun"></a>客户端(windows7)安装kcptun</h2><p>由于没有提供GUI图形界面，解压出来的只有.exe文件，直接执行没有办法传入配置<br>客户端 ss 访问 kcptun客户端，然后kcptun 访问vps上的kcptun server端</p><h3 id="创建客户端exe文件的控制VBScript脚本"><a href="#创建客户端exe文件的控制VBScript脚本" class="headerlink" title="创建客户端exe文件的控制VBScript脚本"></a>创建客户端exe文件的控制VBScript脚本</h3><p>vim run.vbs</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> RunKcptun</span><br><span class="line"><span class="keyword">Set</span> fso = <span class="built_in">CreateObject</span>(<span class="string">"Scripting.FileSystemObject"</span>)</span><br><span class="line"><span class="keyword">Set</span> WshShell = WScript.<span class="built_in">CreateObject</span>(<span class="string">"WScript.Shell"</span>)</span><br><span class="line"><span class="comment">'获取文件路径</span></span><br><span class="line">currentPath = fso.GetFile(Wscript.ScriptFullName).ParentFolder.Path &amp; <span class="string">"\"</span></span><br><span class="line"><span class="comment">'配置文件路径</span></span><br><span class="line">configFile = currentPath &amp; <span class="string">"client-config.json"</span></span><br><span class="line"><span class="comment">'日志文件</span></span><br><span class="line">logFile = currentPath &amp; <span class="string">"kcptun.log"</span></span><br><span class="line"><span class="comment">'软件运行参数</span></span><br><span class="line">exeConfig = currentPath &amp; <span class="string">"client_windows_amd64.exe -c "</span> &amp; configFile</span><br><span class="line"><span class="comment">'拼接命令行</span></span><br><span class="line">cmdLine = <span class="string">"cmd /c "</span> &amp; exeConfig &amp; <span class="string">" &gt; "</span> &amp; logFile &amp; <span class="string">" 2&gt;&amp;1"</span></span><br><span class="line"><span class="comment">'启动软件</span></span><br><span class="line">WshShell.Run cmdLine, <span class="number">0</span>, <span class="literal">False</span></span><br><span class="line"><span class="comment">'等待1秒</span></span><br><span class="line"><span class="comment">'WScript.Sleep 1000</span></span><br><span class="line"><span class="comment">'打印运行命令</span></span><br><span class="line"><span class="comment">'Wscript.echo cmdLine</span></span><br><span class="line"><span class="keyword">Set</span> WshShell = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">Set</span> fso = <span class="literal">Nothing</span></span><br><span class="line"><span class="comment">'退出脚本</span></span><br><span class="line">WScript.quit</span><br></pre></td></tr></table></figure><p>创建启动配置脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"localaddr"</span>: <span class="string">":12948"</span>,</span><br><span class="line">    <span class="attr">"remoteaddr"</span>: <span class="string">"10.10.10.10:29900"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"password"</span>,</span><br><span class="line">    <span class="attr">"crypt"</span>: <span class="string">"salsa20"</span>,</span><br><span class="line">    <span class="attr">"mode"</span>: <span class="string">"fast2"</span>,</span><br><span class="line">    <span class="attr">"conn"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"autoexpire"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"mtu"</span>: <span class="number">1350</span>,</span><br><span class="line">    <span class="attr">"sndwnd"</span>: <span class="number">128</span>,</span><br><span class="line">    <span class="attr">"rcvwnd"</span>: <span class="number">1024</span>,</span><br><span class="line">    <span class="attr">"datashard"</span>: <span class="number">70</span>,</span><br><span class="line">    <span class="attr">"parityshard"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"dscp"</span>: <span class="number">46</span>,</span><br><span class="line">    <span class="attr">"nocomp"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"acknodelay"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"nodelay"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"interval"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="attr">"resend"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"nc"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"sockbuf"</span>: <span class="number">4194304</span>,</span><br><span class="line">    <span class="attr">"keepalive"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>localaddr为 :12948,本地监听端口，供ss访问<br><br>key为password,需和服务端保持一致<br><br>remoteaddr为vps的ip地址以及vps上kcptun监听的端口<br></p><h3 id="客户端ss配置"><a href="#客户端ss配置" class="headerlink" title="客户端ss配置"></a>客户端ss配置</h3><p>服务器 IP 填写本机：127.0.0.1<br><br>服务器端口填写：12948</p><p>双击run.vbs启动测试。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
