<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>node-sql-install</title>
      <link href="/node-sql-install/"/>
      <url>/node-sql-install/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS8-install-node"><a href="#CentOS8-install-node" class="headerlink" title="CentOS8 install node"></a>CentOS8 install node</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><pre class=" language-shell"><code class="language-shell">cd /homewget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xztar -Jxvf node-v12.14.1-linux-x64.tar.xzln -s /home/node-v12.14.1-linux-x64/bin/node /usr/local/binln -s /home/node-v12.14.1-linux-x64/bin/npm  /usr/local/binln -s /home/node-v12.14.1-linux-x64/bin/npx  /usr/local/binnode -v</code></pre><h2 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h2><p><code>firewall-cmd --zone=public --permanent --add-port=80/tcp &amp;&amp; firewall-cmd --reload</code></p><h2 id="node-后台运行"><a href="#node-后台运行" class="headerlink" title="node 后台运行"></a>node 后台运行</h2><p>vim /etc/systemd/system/http1.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=http1 daemon<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>ExecStart=/usr/local/bin/node  /home/my-server/app.jsRestart=always<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=graphical.target</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>formatting contexts</title>
      <link href="/bfc/"/>
      <url>/bfc/</url>
      
        <content type="html"><![CDATA[<h2 id="formatting-contexts-types"><a href="#formatting-contexts-types" class="headerlink" title="formatting contexts types"></a>formatting contexts types</h2><p>Everything on a page is part of a formatting context, or an area which has been defined to lay out content in a particular way. A block formatting context (BFC) will lay child elements out according to block layout rules, a flex formatting context will lay its children out as flex items, etc. Each formatting context has specific rules about how layout behaves when in that context.</p><ul><li>block formatting contexts</li><li>inline formatting contexts</li><li>flex formatting contexts</li></ul><h2 id="Creating-a-new-block-formatting-context"><a href="#Creating-a-new-block-formatting-context" class="headerlink" title="Creating a new block formatting context"></a>Creating a new block formatting context</h2><p>html 元素是最外层初始的一个 block formatting contexts.This means that every element inside the <html> element’s block is laid out according to normal flow following the rules for block and inline layout.</p><ul><li>elements made to float using float</li><li>absolutely positioned elements (including position: fixed or position: sticky)</li><li>elements with display: inline-block</li><li>block elements where overflow has a value other than visible</li><li>elements with display: flow-root or display: flow-root list-item</li><li>flex items</li><li>grid items</li></ul><h2 id="Explicitly-creating-a-BFC-using-display-flow-root"><a href="#Explicitly-creating-a-BFC-using-display-flow-root" class="headerlink" title="Explicitly creating a BFC using display: flow-root"></a>Explicitly creating a BFC using display: flow-root</h2><h2 id="Inline-formatting-contexts"><a href="#Inline-formatting-contexts" class="headerlink" title="Inline formatting contexts"></a>Inline formatting contexts</h2><p>Inline formatting contexts exist inside other formatting contexts and can be thought of as the context of a paragraph. </p><p>css盒模型并不完全适用于inline formatting contets, In a horizontal writing mode line, horizontal padding, borders and margin will be applied to the element and push the text away left and right. However, margins above and below the element will not be applied. Vertical padding and borders will be applied but may  overlap content above and below as, in the inline formatting context, the line boxes will not be pushed apart by padding and borders.</p><h2 id="In-Flow-and-Out-of-Flow"><a href="#In-Flow-and-Out-of-Flow" class="headerlink" title="In Flow and Out of Flow"></a>In Flow and Out of Flow</h2><h3 id="Taking-an-item-out-of-flow"><a href="#Taking-an-item-out-of-flow" class="headerlink" title="Taking an item out of flow"></a>Taking an item out of flow</h3><p>All elements are in-flow apart from:</p><ul><li>floated items</li><li>items with position: absolute (including position: fixed which acts in the same way)</li><li>the root element (html)</li></ul><p>Out of flow items create a new Block Formatting Context (BFC) and therefore everything inside them can be seen as a mini layout, separate from the rest of the page. The root element therefore is out of flow, as the container for everything in our document, and establishes the Block Formatting Context for the document.</p><h2 id="the-display-css-property"><a href="#the-display-css-property" class="headerlink" title="the display css  property"></a>the <code>display</code> css  property</h2><p>Formally, the display property sets an element’s inner and outer display types. The outer type sets an element’s participation in flow layout; the inner type sets the layout of children.</p><p>The Level 3 specification details two values for the display property — enabling the specification of the outer and inner display type explicitly — but this is not yet well-supported by browsers.<br>The <display-legacy> methods allow the same results with single keyword values, and should be favoured by developers until the two keyword values are better supported. For example, using two values you might specify an inline flex container as follows:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//This can currently be specified using a single value.<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-basics</title>
      <link href="/css-basics/"/>
      <url>/css-basics/</url>
      
        <content type="html"><![CDATA[<ul><li><p>css盒模型中以 top-left为坐标原点</p></li><li><p>css rotate(deg) deg正为clockwise deg负为counter-clockwise,transform-origin默认值为：50% 50% 0</p></li><li><p>CSS object model<br>There are four standard coordinate systems</p><ul><li>Offset ：the mouse event’s offsetX and offsetY properties</li><li>Client : the MouseEvent.clientX and MouseEvent.clientY</li><li>Page :Mouse events’ pageX and pageY properties </li><li>Screen :The MouseEvent.screenX and MouseEvent.screenY properties </li></ul></li><li><p>base-line: align-items:base-line;//所有flex items 第一行文字底部对齐</p></li><li><p>hover,active顺序<br>a:hover,a:focus{<br>  //这两个最好一块写<br>  color:pink;<br>}</p></li><li><p>如果父元素display:flex,子元素display：none; position:absolute都不算在flex-items里面</p></li></ul><p>The unset CSS keyword resets a property to its inherited value if it inherits from its parent, and to its initial value if not.</p><p>The initial CSS keyword applies the initial (or default) value of a property to an element. This initial value is set by the browser. </p><p>The inherit CSS keyword causes the element for which it is specified to take the computed value of the property from its parent element.</p><p>display:none<br>Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.<br>To have an element take up the space that it would normally take, but without actually rendering anything, use the visibility property instead.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/docker/"/>
      <url>/docker/</url>
      
        <content type="html"><![CDATA[<p>docker架构<br>Linux 容器（Linux Containers，缩写为 LXC）。<br>docker 是基于 Linux容器的一种封装<br>docker启动了之后，本地 docker host(运行一个docker 后台服务，里面有docker containers和docker images)<br>docker container 是由 docker image 实例化产生的，比如有一个node镜像(image),可以从这个node镜像同时生成多个实例(container)</p><p>阿里 centos7 按时付费 下安装 docker<br>yum install -y docker-io<br>systemctl start docker (启动本地docker服务)<br>docker info<br>docker search node   (搜寻node的docker镜像)<br>docker pull node (从官网docker镜像仓库中拉取镜像到服务器)<br>docker run node (会运行node这个镜像名,生成一个不完整的Linux运行环境)<br>docker ps -a (查看所有运行的container)<br>docker exec -it containerID  /bin/bash (进入docker容器)</p><p>端口映射：比如我们的vps主机上运行了一个nginx的docker container，我们<code>curl http://localhost</code>是访问的此vps上的80端口，但是vps本身没有启动nginx服务，我们需要将请求映射到docker container中，即当有请求访问80端口的时候，我们转交给docker 中的nginx服务来处理</p><h2 id="制作docker-image"><a href="#制作docker-image" class="headerlink" title="制作docker image"></a>制作docker image</h2><p>docker image是一层层加上去的，你可以基于别人的镜像叠加创建你自己的image<br>docker inspect node (查看镜像)</p><p>Dockerfile 文件(文件名就叫做Dockerfile,docker 打包的时候就会找这个文件，根据里面的配置来打包)<br>比如我们在vps 上创建了一个app文件夹<br>|_ _ <em>app(文件夹)<br>|       |</em> <em>server.js(一个express服务器)<br>|       |</em> <em>package.json<br>|</em> _ _Dockerfile</p><pre class=" language-shell"><code class="language-shell">#Dockerfile文件内容FROM node   (由node镜像演变而来)COPY ./app /app  (将当前目录下的app文件夹内的文件拷贝到镜像中根目录下的app文件夹中)WORKDIR /app    (定义镜像中的工作目录)RUN npm install  (打包阶段会执行此命令，安装项目依赖并打包到镜像中)EXPOSE 3000     (暴露镜像中的端口)CMD node server.js (运行镜像实例时候会执行此命令)</code></pre><p>在当前目录下执行<code>docker build -t zonglinlee/node-server:latest  .</code><br>打包镜像，-t 用来指定镜像名称， . 表示在当前目录下找Dockerfile文件</p><p>打包完成之后运行镜像<br><code>docker run -p 80:3000 -it zonglinlee/node-server</code></p><h2 id="发布image"><a href="#发布image" class="headerlink" title="发布image"></a>发布image</h2><p>docker login  (登录docker服务器仓库)<br>docker push zonglinlee/node-server (只会将新添加的层推送到服务器，其余的是基于node扩展的，node的部分不会推送)</p><h2 id="指定数据盘"><a href="#指定数据盘" class="headerlink" title="指定数据盘"></a>指定数据盘</h2><p>在执行 <code>docker rm containerID</code> 之后，会销毁容器，此时容器中的所有数据就丢失了<br>如果我们想在容器销毁之后还有数据备份在vps上，可以通过 -v 或 –volume 指定数据盘，此相当于一个硬链接，链接container中的一个文件夹到本地vps上，我们在所有container中更改的东西都会同样复制一份在vps上，并且container销毁后，本地主机上的还存在<br><code>docker run -v ~/logger:/mnt -it ubuntu /bin/bash</code><br>~/logger 指定的是vps上的文件夹<br>/mnt      指定的是container中的数据盘<br>此时如果执行 <code>docker inspect containerID</code><br>会看到有个 Mounts 属性里面有source和destination字段，分别指的是vps上的源目录和container中的目标目录，即source为 ~/logger,destination 为 /mnt</p><pre class=" language-shell"><code class="language-shell">cd ~ mkdir blogcd blogmkdir nodeservermkdir nginxcd nodeservervim Dockerfile# nodeserver 下的DockerfileFROM nodeRUN npm i express-generator -gRUN express appWORKDIR appRUN npm installEXPOSE 3000CMD ["npm","start"]cd ../nginxvim nginx.conf# nginx.conf 文件events{      use epoll;  }http {  server {    listen 80;                  #nginx监听80端口，转交 / 给blog服务，即http服务器。    location / {      proxy_pass http://blog:3000;   #这里的blog主机名就是docker-compose.yml中配置的服务    }  }}vim Dockerfile# nginx 下的DockerfileFROM nginxCOPY nginx.conf /etc/nginx/nginx.confEXPOSE 80cd ../vim docker-compose.yml # docker-compose.yml文件#这个版本号很重要，它对应docker的版本，一定要去官网上查看，否则会报错。# https://docs.docker.com/compose/compose-file/version: '3.6'services:               #一共有两个服务  blog  和 nginx服务   blog:     build: nodeserver    #这个express会开启一个localhost:3000的http服务器     ports:      - "3000:3000"    #端口映射   nginx:     build: nginx     ports:      - "80:80"# 启动服务pip install docker-composedocker-compose up -d# 查看服务启动是否成功curl  http://locolhost:80  #会返回 `welcome to express` html</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>express(0)</title>
      <link href="/express-0/"/>
      <url>/express-0/</url>
      
        <content type="html"><![CDATA[<h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><h2 id="express-app-get-方法封装"><a href="#express-app-get-方法封装" class="headerlink" title="express app.get()方法封装"></a>express app.get()方法封装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//app是真正的请求监听函数</span>    <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> app<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> route <span class="token operator">=</span> app<span class="token punctuation">.</span>routes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//路由和方法都匹配成功后调用处理函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>method <span class="token operator">===</span> req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> pathname <span class="token operator">===</span> route<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> route<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果都不匹配</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Can not </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pathname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义路由数组,保存服务器路由处理规则</span>    app<span class="token punctuation">.</span>routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//启动一个服务器</span>    app<span class="token punctuation">.</span>listen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Returns a new instance of http.Server类,这个server类上会暴露listen函数</span>        <span class="token comment" spellcheck="true">//http.createServer([requestListener])</span>        <span class="token comment" spellcheck="true">//The requestListener is a function which is automatically </span>        <span class="token comment" spellcheck="true">//added to the 'request' event.它会绑定到request事件上面，每次有request事件触发，</span>        <span class="token comment" spellcheck="true">//都会调用requestListener</span>        <span class="token keyword">let</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>        server<span class="token punctuation">.</span>listen<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//app.get方法用来将路由和路由处理函数保存到app.routes中</span>    <span class="token comment" spellcheck="true">//app.get 只能处理get请求</span>    app<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            path<span class="token punctuation">,</span>            handler        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> app<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> createApplication</code></pre><p>使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>http.METHODS提供了所有的请求方法数组，遍历封装所有的app.get/app.post等方法</p><pre class=" language-js"><code class="language-js">http<span class="token punctuation">.</span>METHODS<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    method <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">{</span>        app<span class="token punctuation">.</span>routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            method<span class="token punctuation">,</span>            path<span class="token punctuation">,</span>            handler        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>express(1)</title>
      <link href="/express-1/"/>
      <url>/express-1/</url>
      
        <content type="html"><![CDATA[<hr><hr><h3 id="res-cookie-name-value-options"><a href="#res-cookie-name-value-options" class="headerlink" title="res.cookie(name, value [, options])"></a>res.cookie(name, value [, options])</h3><p>这个API是express添加到res对象中的，node.js原生不提供此方法，服务器端写入cookie给http响应头部。<br>options 中 expires 如果不设置，则默认创建一个session cookie，即浏览器不关闭就一直生效。<br>httpOnly,默认false，此时可以在浏览器中通过 document.cookie读取到，设为true，就只能被服务器读取。<br>secure设置为true，Marks the cookie to be used with HTTPS only.<br>signed用来设置cookie是否被签名。</p><p>浏览器发送到服务端的cookie如何读取，中间件 cookie-parser,Parse Cookie header and populate <code>req.cookies</code> with an object keyed by the cookie names.如果cookie 被signed ，可以用 <code>req.signedCookie</code> 来读取。</p><h3 id="express-session"><a href="#express-session" class="headerlink" title="express-session"></a><a href="https://www.npmjs.com/package/express-session" target="_blank" rel="noopener">express-session</a></h3><p>session机制，客户端第一次访问服务器的时候，服务器会生成全局唯一的session_id,之后通过http的响应头set-cookie发给客户端，此后客户端会带着这个session_id来访问服务器，服务器会通过这个session_id来取出服务端保存的数据。<br>session的持久化保存:session-store.<br> connect-mongo A MongoDB-based session store<br> connect-redis A Redis-based session store.</p><p>如何在vscode中debugger，打断点<br>Object.defineProperty<br>object.create</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a><a href="https://blog.phpgao.com/git_submodule.html" target="_blank" rel="noopener">submodule</a></h2><p>submodule中文件变更了,在主工作目录中是没有办法add并commit的，分而治之，主模块提交主模块的，子模块提交自己的，子模块提交后，主模块会感知到，从而再在主模块中提交即可</p><h3 id="添加-submodule"><a href="#添加-submodule" class="headerlink" title="添加 submodule"></a>添加 <code>submodule</code></h3><p>将GitHub上这个模块添加到本地git仓库的 usr/plugins/ExternalTool 中作为一个submodule<br><code>git submodule add https://github.com/phpgao/ExternalTool.git   usr/plugins/BaiduSubmit</code><br>信息会被记录在 <code>.gitmodules</code> <code>.git/config</code> 两个文件中</p><h3 id="移除-submodule"><a href="#移除-submodule" class="headerlink" title="移除 submodule"></a>移除 <code>submodule</code></h3><p>首先我们反初始化,此时 .git/config 已被重写，BaiduSubmit的相关信息已经不存在了<br><code>git submodule deinit usr/plugins/BaiduSubmit</code><br>删除子模块和.gitmodules 文件中的相关信息<br><code>git rm usr/plugins/BaiduSubmit</code></p><h2 id="–allow-unrelated-histories"><a href="#–allow-unrelated-histories" class="headerlink" title="–allow-unrelated-histories"></a>–allow-unrelated-histories</h2><p>报错：fatal: refusing to merge unrelated histories ,合并不相关的历史记录<br><code>git pull origin master --allow-unrelated-histories</code></p><h2 id="远程合并到本地"><a href="#远程合并到本地" class="headerlink" title="远程合并到本地"></a>远程合并到本地</h2><p><code>git remote -v</code>     查询远程的代码版本</p><h3 id="直接合并"><a href="#直接合并" class="headerlink" title="直接合并"></a>直接合并</h3><p><code>git pull origin master</code> 拉取远端origin/master分支并合并到当前分支<br><code>git pull origin dev</code> 拉取远端origin/dev分支并合并到当前分支</p><h3 id="git-fetch-merge-需要手动删除分支"><a href="#git-fetch-merge-需要手动删除分支" class="headerlink" title="git fetch + merge(需要手动删除分支)"></a><code>git fetch + merge</code>(需要手动删除分支)</h3><p>拉取到本地并新建一个分支 然后 手动合并<br>在本地建立master1分支，并下载远端的origin/master分支到本地的master1分支中<br><code>git fetch origin master:master1</code><br>查看本地master1分支与当前分支的版本差异<br><code>git diff master1</code><br>合并本地分支master1到当前分支<br><code>git merge master1</code><br>删除本地分支master1<br><code>git branch -D master1</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>名词解释</title>
      <link href="/ming-ci-jie-shi/"/>
      <url>/ming-ci-jie-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="JSON-Web-Token-JWT"><a href="#JSON-Web-Token-JWT" class="headerlink" title="JSON Web Token (JWT)"></a>JSON Web Token (JWT)</h2><h3 id="about-jwt"><a href="#about-jwt" class="headerlink" title="about jwt"></a>about jwt</h3><ul><li>是一个开放的标准(RFC 7519)</li><li>securely transfer information between two bodies</li><li>Digitaly signed -information is verified and trusted</li><li>compact ，which means jwt can be send via url ,post request,http headers.</li><li>fast transmission</li><li>self-contained,which means contains information about the users,avoiding query the database more than once</li></ul><h3 id="JWT-structure"><a href="#JWT-structure" class="headerlink" title="JWT structure"></a>JWT structure</h3><p>aaaa.bbbb.cccc 三部分组成<br>aaaa: header部分，alg代表algorithm like HS256 or RSA ，this json is base64url encoded to form the first part</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>     <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">}</span></code></pre><p>bbbb: payload部分，it contains claims which are user details or additional metadata. payload is base64url encoded to form the second part</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"jim"</span><span class="token punctuation">,</span>    <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>cccc<span class="token operator">:</span>signature部分，combine bade64 header and bade64 payload with secret</code></pre><p>HMACSHA256(<br>    base64UrlEncode(header) + ‘.’ +base64UrlEncode(payload),your-256-bit-secret //自己定义secret<br>)</p><h3 id="How-do-jwt-work"><a href="#How-do-jwt-work" class="headerlink" title="How do jwt work?"></a>How do jwt work?</h3><p>browser post a request to login with credentials,server will generate jwt via secret,then return the jwt to the browser,then browser send jwt on the authorization header,then the server will check jwt signature and get user information</p><h3 id="jwt-实现"><a href="#jwt-实现" class="headerlink" title="jwt 实现"></a>jwt 实现</h3><p>nodejs 实现库：node-jsonwebtoken(<code>npm install jsonwebtoken</code>)</p><h3 id="jsonwebtoken库用法"><a href="#jsonwebtoken库用法" class="headerlink" title="jsonwebtoken库用法"></a><a href="https://github.com/auth0/node-jsonwebtoken" target="_blank" rel="noopener">jsonwebtoken库用法</a></h3><ul><li>jwt.sign(payload, secretOrPrivateKey, [options, callback])<br>(Asynchronous) If a callback is supplied, the callback is called with the err or the JWT.<br>(Synchronous) Returns the JsonWebToken as string</li><li>jwt.verify(token, secretOrPublicKey, [options, callback])<br>验证token，并解密payload.<br>如果提供了callback，则为异步方法，The callback is called with the decoded payload if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will be called with the error.</li></ul><p>如果未提供则为同步方法，返回解密的payload，如果验证失败则会抛出一个错误，同步需要用catch方法来捕获错误。</p><ul><li>jwt.decode(token [, options])<br>(Synchronous) Returns the decoded payload without verifying if the signature is valid.<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a><br><a href="http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#Terminology" target="_blank" rel="noopener">http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#Terminology</a></li></ul><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><h3 id="about-base64"><a href="#about-base64" class="headerlink" title="about base64"></a>about base64</h3><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。3个字节有24个比特，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。<br>如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行Base64的编码。在编码后的Base64文本后加上一个或两个=号，代表补足的字节数。也就是说，当最后剩余两个八位(待补足)字节（2个byte）时，最后一个6位的Base64字节块有四位是0值，最后附加上两个等号；如果最后剩余一个八位(待补足)字节（1个byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号。<br>在ASCII码中规定，0<del>31、128这33个字符属于控制字符，32</del>127这95个字符属于可打印字符，也就是说网络传输只能传输这95个字符，不在这个范围内的字符无法传输。</p><h3 id="为什么要使用-base64"><a href="#为什么要使用-base64" class="headerlink" title="为什么要使用 base64"></a>为什么要使用 base64</h3><p>当不可见字符在网络上传输时，比如说从 A 计算机传到 B 计算机，往往要经过多个路由设备，由于不同的设备（特指老的路由设备）对字符的处理方式有一些不同，这样那些不可见字符就有可能被处理错误，这是不利于传输的。所以就先把数据先做一个 base64 编码，统统变成可见字符，也就是 ascii 码可表示的可见字符，确保数据可靠传输。base64 的内容是有 0 ～9，a ～z，A ～Z，+，/组成，正好 64 个字符，这些字符是在 ascii 可表示的范围内，属于 95 个可见字符的一部分。<br>对于现在路由设备，只要是文本字符（无论是否是可见字符）都可以直接在网络上传输。注意，由于二进制格式的数据（图片，音频，视频，语音等非文本字符）， 无法直接在网络上传输，我们一般都要把这些二进制数据转为文本字符后进行网络传输。而 base64 可以把这些二进制数据转为文本字符，并且 base64为了兼容早期的老的路由器，还转化为了可见的文本字符，当然，对于现在的路由器来说，只要是文本字符就可以通过网络传输。<br>在企业开发中，我们只要遵守一个好的习惯就可以了：对于文本字符传输，我们先序列化，然后再通过网络发送；对于二进制数据（图片，音频，视频，语音等非文本字符），我们先用 base64 编码成文本字符，然后序列化后再通过网络发送。大家可能要问，只要是文本字符不就可以直接通过网络传输了吗，为什么还要序列化？在此，我再告诉大家，你项目中要传输的数据不只有字符串吧，应该还需要包容其它类型的数据，通信双方约定的就是发送的东西都是序列化后数据，这样方便对通信双方的数据类型进行还原。你没必要只对其它类型的数据序列化，对字符串不序列化，这样反而增加了业务逻辑。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.zhihu.com/question/36306744/answer/931187310" target="_blank" rel="noopener">https://www.zhihu.com/question/36306744/answer/931187310</a></p><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>ASCII码用了1个字节，1个字节可以表示256种状态，但ASCII码只用了128种，也就是一个字节的后七位，最前面的1位都是0。</p><h3 id="非ASCII编码"><a href="#非ASCII编码" class="headerlink" title="非ASCII编码"></a>非ASCII编码</h3><p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号。</p><h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><p>Unicode（统一码、万国码、单一码）是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。<br>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><h3 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h3><p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。<br>MIME，它是一个互联网标准，在1992年最早应用于电子邮件系统，但后来也应用到浏览器。服务器会将它们发送的多媒体数据的类型告诉浏览器，而通知手段就是说明该多媒体数据的MIME类型，从而让浏览器知道接收到的信息哪些是MP3文件，哪些是Shockwave文件等等。服务器将MIME标志符放入传送的数据中来告诉浏览器使用哪种插件读取相关文件。</p><p>每个MIME类型由两部分组成，前面是数据的大类别，例如声音audio、图象image等，后面定义具体的种类。</p><h3 id="URI编码解码"><a href="#URI编码解码" class="headerlink" title="URI编码解码"></a>URI编码解码</h3><p>HTTP协议中参数组件的传输是key=value键值对的形式，如果要传输多个参数就需要用“&amp;”符号对键值对进行分隔。例如?name1=value1&amp;name2=$value2,这样在服务器收到这种字符串的时候，会用“&amp;”分隔出每一个参数，然后再用“=”来分隔出参数值。<br>如果我的参数值中就包含=或者&amp;这样的特殊子字符的时候，该怎么办？<br>URL编码只是简单的在特殊字符的各个字节（16进制）前加上”%”即可。例如，我们对上述会产生歧义的字符(“va&amp;lu=e1”)进行编码后的结果：name1=va%26lu%3D，这样服务器会把紧跟在”%”后的字节当成普通的字节，不会把它当成各个参数或键值对的分隔符。</p><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/chenwenhao/p/11823695.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenwenhao/p/11823695.html</a></p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。<br>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。<br>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。<br>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><h2 id="MySQL-protocol"><a href="#MySQL-protocol" class="headerlink" title="MySQL protocol"></a>MySQL protocol</h2><p>The MySQL protocol is used between MySQL Clients and a MySQL Server<br>nodejs实现：<code>npm install mysql</code></p><h2 id="PWA-Progressive-Web-Apps"><a href="#PWA-Progressive-Web-Apps" class="headerlink" title="PWA(Progressive Web Apps)"></a>PWA(Progressive Web Apps)</h2><p>Progressive Web App, 简称 PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。 PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术(service worker等等)也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><h2 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h2><p>“Multipurpose Internet Mail Extensions”,指的是一系列的电子邮件技术规范(主要包括RFC 2045、RFC 2046、RFC 2047、RFC 4288、RFC 4289和RFC 2077。),MIME是对传统电子邮件的一个扩展<br>传统的电子邮件的技术规范(RFC 822)规定，电子邮件只能使用ASCII字符。这导致了三个结果：1）非英语字符都不能在电子邮件中使用；2）电子邮件中不能插入二进制文件（如图片）；3）电子邮件不能有附件。</p><p>MIME对传统电子邮件的扩展，表现在它在信件头部分添加了几条语句，主要有三条<br>MIME-Version: 1.0<br>Content-Type: text/plain; charset=”ISO-8859-1”<br>Content-transfer-encoding: base64</p><h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.ruanyifeng.com/blog/2008/06/mime.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2008/06/mime.html</a></p><h2 id="文本文件和二进制文件的区别"><a href="#文本文件和二进制文件的区别" class="headerlink" title="文本文件和二进制文件的区别?"></a>文本文件和二进制文件的区别?</h2><p>以读文件为例，实际上是磁盘 》》 文件缓冲区》》应用程序内存空间 这两个转化过程。我们说“文本文件和二进制文件没有区别”，实际上针对的是第一个过程；既然没有区别，那么打开方式不同，为何显示内容就不同呢？这个区别实际上是第二个过程造成的。文件实际上包括两部分，控制信息和内容信息。纯文本文件仅仅是没有控制格式信息罢了；实际上也是一种特殊的二进制文件。所以，我们很难区分二者的不同，因为他们的概念上不是完全互斥的。我们说文本文件是特殊的二进制文件，是因为文本文件实际上的解释格式已经确定了：ASCII或者unicode编码。文本文件的一个缺点是，它的熵往往较低，也就是说，其实本可以用更小的存储空间记录这些信息。比如，文本文件中的一个数字65536，需要用5个字节来存储；但是用二进制格式，采用int存储，仅仅需要2个字节。而二进制文件elf和bmp等，都往往有一个head，告诉你文件信息和解释方式。<br>链接：<a href="https://www.zhihu.com/question/19971994/answer/36113974" target="_blank" rel="noopener">https://www.zhihu.com/question/19971994/answer/36113974</a><br>来源：知乎</p><h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><p>一般来说，URL只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。(网络标准RFC 1738做了硬性规定)<br>只有字母和数字[0-9a-zA-Z]、一些特殊符号”$-_.+!*’(),”[不包括双引号]、以及某些保留字，才可以不经过编码直接用于URL。<br>这意味着，如果URL中有汉字，就必须编码后使用。但是麻烦的是，RFC 1738没有规定具体的编码方法，而是交给应用程序（浏览器）自己决定。这导致”URL编码”成为了一个混乱的领域。</p><ul><li>网址路径中包含汉字</li><li>查询字符串包含汉字</li><li>Get方法生成的URL包含汉字</li><li>Ajax调用的URL包含汉字</li></ul><p>前面三种情况都是由浏览器发出HTTP请求，最后一种情况则是由Javascript生成HTTP请求，也就是Ajax调用.每个浏览器处理方式都不一致<br>有没有办法，能够保证客户端只用一种编码方法向服务器发出请求？<br>使用Javascript先对URL编码，然后再向服务器提交，不要给浏览器插手的机会。因为Javascript的输出总是一致的，所以就保证了服务器得到的数据是格式统一的。</p><ul><li>encodeURI()是Javascript中真正用来对URL编码的函数。对应的解码函数是decodeURI()。需要注意的是，它不对单引号’编码。<br>它着眼于对整个URL进行编码，因此除了常见的符号以外，对其他一些在网址中有特殊含义的符号”; / ? : @ &amp; = + $ , #”，也不进行编码。编码后，它输出符号的utf-8形式，并且在每个字节前加上%。</li><li>encodeURIComponent()，它对应的解码函数是decodeURIComponent()。<br>最后一个Javascript编码函数是encodeURIComponent()。与encodeURI()的区别是，它用于对URL的组成部分进行个别编码，而不用于对整个URL进行编码。<br>因此，”; / ? : @ &amp; = + $ , #”，这些在encodeURI()中不被编码的符号，在encodeURIComponent()中统统会被编码。<br>参考链接<br><a href="https://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2010/02/url_encoding.html</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客点击特效</title>
      <link href="/hexo-bo-ke-dian-ji-te-xiao/"/>
      <url>/hexo-bo-ke-dian-ji-te-xiao/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> coreSocialistValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#11f0e5"</span><span class="token punctuation">,</span><span class="token string">"#e815d3"</span><span class="token punctuation">,</span><span class="token string">"#f7f30f"</span><span class="token punctuation">,</span><span class="token string">"#e8270e"</span><span class="token punctuation">,</span><span class="token string">"#15eb59"</span><span class="token punctuation">,</span><span class="token string">"#881df2"</span><span class="token punctuation">,</span><span class="token string">"#fa9120"</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> coreSocialistValues<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//过滤a标签</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span />"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>coreSocialistValues<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> coreSocialistValues<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">let</span> color_index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> color <span class="token operator">=</span> colors<span class="token punctuation">[</span>color_index<span class="token punctuation">]</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>      $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">999999</span><span class="token punctuation">,</span>        <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>        <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>        <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>        <span class="token string">"color"</span><span class="token punctuation">:</span> color      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>      $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>        <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1500</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo参数</title>
      <link href="/hexo-can-shu/"/>
      <url>/hexo-can-shu/</url>
      
        <content type="html"><![CDATA[<ul><li>site.data<br>在source/_data文件夹下的 YAML or JSON files<br>比如在此文件夹下有一个 munu.yaml 文件，则可以在模板字符串中，link是 property</li></ul><p>&lt;% for (var link in site.data.menu) { %&gt;<br>  <a href="<%= site.data.menu[link] %>"> &lt;%= link %&gt; </a><br>&lt;% } %&gt;</p><p>hexo new [layout] <title><br>post is the default layout<br>There are three default layouts in Hexo: post, page and draft.<br>layout 存在于根目录下的 Scaffolds 文件夹中，里面默认有page.md/post.md/draft.md 三个</p><p>type=”image/x-icon” 是什么</p><p>theme 文件夹<br>.<br>├── _config.yml<br>├── languages<br>├── layout   //模板字符串文件夹<br>├── scripts //hexo 初始化时候会自动加载这个文件夹的js文件<br>└── source  //js/css 等直接copy到根目录下的public文件夹 ，会忽略隐藏文件和以_开头的文件</p><p>网站部署的时候根目录是生成的public文件夹<br>page ：Page specific information and custom variables set in front-matter.<br>page.content：The full processed content of the article</p><p><code>Hexo</code> has special <code>page</code> called <code>post</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jquery</title>
      <link href="/jquery/"/>
      <url>/jquery/</url>
      
        <content type="html"><![CDATA[<ul><li>jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。</li><li>jQuery的选择器不会返回undefined或者null</li><li>jQuery对象和DOM对象之间可以互相转化<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// jQuery对象</span><span class="token keyword">var</span> divDom <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设存在div，获取第1个DOM元素</span><span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>divDom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新把DOM包装为jQuery对象</span></code></pre></li><li>可以查找同时包含red和green的节点<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.red.green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意没有空格！</span><span class="token keyword">var</span> email <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[name=email]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找出&lt;??? name="email"></span><span class="token keyword">var</span> emailInput <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=email]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>根据tag和<span class="token keyword">class</span>来组合查找也很常见：<span class="token keyword">var</span> tr <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'tr.red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>$(‘ancestor descendant’)</li><li>子选择器$(‘parent&gt;child’)</li><li>过滤器（Filter）过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。last-child/first-child/even/odd/nth-child</li><li>针对表单元素，jQuery还有一组特殊的选择器<br>:enabled/:disabled/:file/:radio/:focus</li></ul><h2 id="查找和过滤"><a href="#查找和过滤" class="headerlink" title="查找和过滤"></a>查找和过滤</h2><p>通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个jQuery对象后，还可以以这个对象为基准，进行查找和过滤。</p><p>最常见的查找是在某个节点的所有子节点中查找，使用find()方法，它本身又接收一个任意的选择器。如果要从当前节点开始向上查找，使用parent()方法parent() 对于位于同一层级的节点，可以通过next()和prev()方法</p><p>过滤方法：filter()方法可以过滤掉不符合选择器条件的节点；map()方法把一个jQuery对象包含的若干DOM节点转化为其他对象；此外，一个jQuery对象如果包含了不止一个DOM节点，first()、last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉<br>过滤方法中传入一个函数，要特别注意函数内部的this被绑定为DOM对象，不是jQuery对象</p><h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><p>jQuery对象的text()和html()方法分别获取节点的文本和原始HTML文本，jQuery的API设计非常巧妙：无参数调用text()是获取文本，传入参数就变成设置文本，HTML也是类似操作</p><p>一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上</p><h2 id="修改CSS"><a href="#修改CSS" class="headerlink" title="修改CSS"></a>修改CSS</h2><p>jQuery对象有“批量操作”的特点，这用于修改CSS实在是太方便了<br>$(‘#test-css li.dy&gt;span’).css(‘background-color’, ‘#ffd351’).css(‘color’, ‘red’);<br>为了和JavaScript保持一致，CSS属性可以用’background-color’和’backgroundColor’两种格式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false， class是否包含highlight</span>div<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加highlight这个class</span>div<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除highlight这个class</span></code></pre><h2 id="显示和隐藏DOM"><a href="#显示和隐藏DOM" class="headerlink" title="显示和隐藏DOM"></a>显示和隐藏DOM</h2><p>要隐藏一个DOM，我们可以设置CSS的display属性为none，利用css()方法就可以实现。不过，要显示这个DOM就需要恢复原有的display属性，这就得先记下来原有的display属性到底是block还是inline还是别的值。</p><p>考虑到显示和隐藏DOM元素使用非常普遍，jQuery直接提供show()和hide()方法</p><h2 id="获取DOM信息"><a href="#获取DOM信息" class="headerlink" title="获取DOM信息"></a>获取DOM信息</h2><p>利用jQuery对象的若干方法，我们直接可以获取DOM的高宽等信息，而无需针对不同浏览器编写特定代码：</p><p>// 浏览器可视窗口大小:<br>$(window).width(); // 800<br>$(window).height(); // 600</p><p>// HTML文档大小:<br>$(document).width(); // 800<br>$(document).height(); // 3500</p><p>attr()和removeAttr()方法用于操作DOM节点的属性<br>prop()方法和attr()类似<br>attr()和prop()对于属性checked处理有所不同：</p><p>var radio = $(‘#test-radio’);<br>radio.attr(‘checked’); // ‘checked’<br>radio.prop(‘checked’); // true<br>prop()返回值更合理一些。不过，用is()方法判断更好：</p><p>var radio = $(‘#test-radio’);<br>radio.is(‘:checked’); // true<br>类似的属性还有selected，处理时最好用is(‘:selected’)。</p><h2 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h2><p>对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性,一个val()就统一了各种输入框的取值和赋值的问题</p><h2 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h2><p>直接使用浏览器提供的API对DOM结构进行修改，不但代码复杂，而且要针对浏览器写不同的代码。</p><ul><li>除了通过jQuery的html()这种暴力方法外，还可以用append()方法<br>ul.append(‘<li><span>Haskell</span></li>‘);<br>除了接受字符串，append()还可以传入原始的DOM对象，jQuery对象和函数对象<br>传入函数时，要求返回一个字符串、DOM对象或者jQuery对象。因为jQuery的append()可能作用于一组DOM节点，只有传入函数才能针对每个DOM生成不同的子节点。</li></ul><p>append()把DOM添加到最后，prepend()则把DOM添加到最前。<br>另外注意，如果要添加的DOM节点已经存在于HTML文档中，它会首先从文档移除，然后再添加，也就是说，用append()，你可以移动一个DOM节点。</p><p>如果要把新节点插入到指定位置after(),也就是说，同级节点可以用after()或者before()方法</p><p>删除节点<br>要删除DOM节点，拿到jQuery对象后直接调用remove()方法就可以了。如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节点</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>下面两种写法等价，后者更常用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>鼠标事件：mousemove：鼠标在DOM内部移动时触发； hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。<br>ready事件仅作用于document对象。由于ready事件在DOM完成初始化后触发，且只触发一次，所以非常适合用来写其他的初始化代码。</p><p>$(function () {<br>    // init…<br>});<br>这种写法最为常见。如果你遇到$(function () {…})的形式，牢记这是document对象的ready事件处理函数。可以反复绑定事件处理函数，它们会依次执行<br>取消绑定<br>一个已被绑定的事件可以解除绑定，通过off(‘click’, function)实现<br>可以使用off(‘click’)一次性移除已绑定的click事件的所有处理函数。<br>同理，无参数调用off()一次性移除已绑定的所有类型的事件处理函数<br>浏览器安全限制<br>在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，window.open()函数</p><p>编写jQuery插件<br>给jQuery对象绑定一个新方法是通过扩展$.fn对象实现的<br>$.fn.highlight1 = function () {<br>    // this已绑定为当前jQuery对象:<br>    this.css(‘backgroundColor’, ‘#fffceb’).css(‘color’, ‘#d85030’);<br>    return this;<br>}<br>注意到函数内部的this在调用时被绑定为jQuery对象，所以函数内部代码可以正常调用所有jQuery对象的方法。</p><p>最终，我们得出编写一个jQuery插件的原则：</p><p>给$.fn绑定函数，实现插件的代码逻辑；<br>插件函数最后要return this;以支持链式调用；<br>插件函数要有默认值，绑定在$.fn.<pluginName>.defaults上；<br>用户在调用时可传入设定值以便覆盖默认值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/js/"/>
      <url>/js/</url>
      
        <content type="html"><![CDATA[<h2 id="function-作用"><a href="#function-作用" class="headerlink" title="!function(){}() 作用"></a><code>!function(){}()</code> 作用</h2><p>跟(function(){})();这个函数是一个意思，都是告诉浏览器自动运行这个匿名函数的，因为!+()这些符号的运算符是最高的，所以会先运行它们后面的函数</p><h2 id="DOMTokenList-interface"><a href="#DOMTokenList-interface" class="headerlink" title="DOMTokenList interface"></a>DOMTokenList interface</h2><p>The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by <code>Element.classList</code>.</p><div class="class1 class2"></div>原生dom方法来toggle一个类：`div.classList.toggle("class1")`<hr>## noscript 标签## formenctype 属性在method是post的情况下，enctype是form提交时候的mime类型默认是：application/x-www-form-urlencoded如果有input 的type为file类型，即这个表单要上传文件，则使用multipart/form-data类型using the GET method (in this case the enctype attribute will be ignored).## FormData 对象在form enctype='multipart/form-data'情况下，可以使用FormData对象来讲form中要提交的数据转换成一个对象，用ajax来提交。It is primarily intended for use in sending form data, but can be used independently from forms in order to transmit keyed data.<p>var formData = new FormData(someFormElement);//将form元素传入构造函数，返回表单提交的数据对象，还可以用formData.append(“username”, “Groucho”);来添加新的键值对。<br>优缺点：Using the FormData API is the simplest and fastest, but has the disadvantage that data collected can not be stringified.</p><p>如果不想使用FormData对象，请参考以下链接<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files</a></p><h2 id="ajax-cookie"><a href="#ajax-cookie" class="headerlink" title="ajax cookie"></a>ajax cookie</h2><p>ajax 配置nginx,跨域请求的时候会不带cookie,如果要带cookie<br>request header 要配置 withCredentials：true<br>response header 要配置 Access-Control-Allow-Credentials: true</p><p>如果用koa框架，会有 <code>koa-cors</code>包设置Access-Control-Allow-Credentials.  查看koa-cors源码配置选项{credentials:true}</p><h2 id="FormData-对象"><a href="#FormData-对象" class="headerlink" title="FormData 对象"></a>FormData 对象</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token keyword">let</span> formdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formdata<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//打印出{}空对象</span><span class="token comment" spellcheck="true">//FormData实例对象打印不出任何东西，但它提供了许多方法，会返回迭代器。</span></code></pre><p>FormData.entries()<br>Returns an iterator allowing to go through all key/value pairs contained in this object.</p><h2 id="File-interface"><a href="#File-interface" class="headerlink" title="File interface"></a>File interface</h2><p>The File interface provides information about files and allows JavaScript in a web page to access their content.<br><code>File</code> objects are generally retrieved from a <code>FileList</code> object returned as a result of a user selecting files using the <input> element, from a drag and drop operation’s <code>DataTransfer</code> object, or from the <code>mozGetAsFile() API</code> on an <code>HTMLCanvasElement</code>.<br>A File object is a specific kind of a <code>Blob</code>, and can be used in any context that a Blob can. In particular, <code>FileReader</code>, <code>URL.createObjectURL()</code>, <code>createImageBitmap()</code>, and <code>XMLHttpRequest.send()</code> accept both Blobs and Files.<br>file属性<br>Properties:File.lastModified/File.lastModifiedDate/File.name/File.size/File.type<br>file 方法<br>File接口不实现任何方法，都是从Blob接口上继承上来的。</p><h2 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a>Blob</h2><p>The Blob object represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a <code>ReadableStream</code> so its methods can be used for processing the data.</p><p>Blobs can represent data that isn’t necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user’s system.</p><h2 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h2><p>The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer.<br>It is an array of bytes, often referred to in other languages as a “byte array”.You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the <code>typed array objects</code> or a <code>DataView</code> object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</p><p>The ArrayBuffer() constructor creates a new ArrayBuffer of the given length in bytes, you can also get an array buffer from existing data, for example from a <code>Base64 string</code> or from a <code>local file</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>koa(1)</title>
      <link href="/koa-1/"/>
      <url>/koa-1/</url>
      
        <content type="html"><![CDATA[<p>koa不包含任何middleware,express.static这种都不包括<br>它的中间件原理和express不太一样<br>app.use(async function(ctx,next){<br>    console.log(1)//先打印1<br>    await next() //这里会走下一个中间件，打印a<br>    console.log(2)//再执行打印2<br>})<br>app.use(async function(ctx,function(){<br>    console.log(“a”)<br>}))<br>app.listen(4000)</p><p>koa 中写异步需要用promise包装一下</p><h3 id="koa中间件"><a href="#koa中间件" class="headerlink" title="koa中间件"></a>koa中间件</h3><p>koa-bodyparser 处理响应体，当请求体过来的时候会赋值给ctx.request.body<br>缺点：不支持文件上传<br>如果要支持文件上传 再express中用multer中间件，再koa 中用koa-better-body中间件，它会将请求体对象赋值给ctx.request.fields,中间件需要配置上传路径<br>表单form中要添加enctype属性 <form method="POST" enctype="multipart/form-data">,否则上传不了<br>koa-convert<br>将一个generator中间件(koa1)转成koa2可以使用的async中间件<br>app.use(convert(bodyParser({<br>    uploadDir:path.join(__dirname,’uploads’)<br>})))</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql(1)</title>
      <link href="/mysql-1/"/>
      <url>/mysql-1/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><p><a href="https://blog.csdn.net/Very666/article/details/98594227" target="_blank" rel="noopener">https://blog.csdn.net/Very666/article/details/98594227</a></p><h2 id="连接mysql"><a href="#连接mysql" class="headerlink" title="连接mysql"></a>连接mysql</h2><p>MySQL Client的可执行程序是mysql，MySQL Server的可执行程序是mysqld。<br>MySQL Client中输入的SQL语句通过TCP连接发送到MySQL Server。默认端口号是3306，即如果发送到本机MySQL Server，地址就是127.0.0.1:3306。<br>也可以只安装MySQL Client，然后连接到远程MySQL Server。假设远程MySQL Server的IP地址是10.0.1.99，那么就使用-h指定IP或域名：<br>mysql -h 10.0.1.99 -u root -p</p><h2 id="mysql常用命令"><a href="#mysql常用命令" class="headerlink" title="mysql常用命令"></a>mysql常用命令</h2><p>SHOW DATABASES;<br>CREATE DATABASE test;//创建数据库<br>USE test;<br>CREATE TABLE students;//创建一个表<br>DROP TABLE students;//删除一个表<br>SHOW TABLES;//列出当前数据库中所有表<br>DESC students;//查看一个表的结构<br>SHOW CREATE TABLE students;//查看创建表的SQL语句<br>ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;//增加一列<br>ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;//修改列信息<br>ALTER TABLE students DROP COLUMN birthday;//删除列<br>DROP DATABASE test; //删除一个数据库<br>EXIT; //断开mysql客户端和服务器的连接</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-tutorial.html</a><br><a href="https://juejin.im/post/5ae55861f265da0ba062ec71" target="_blank" rel="noopener">https://juejin.im/post/5ae55861f265da0ba062ec71</a></p><h2 id="node-js-库-mysql-用法"><a href="#node-js-库-mysql-用法" class="headerlink" title="node.js 库 mysql 用法"></a><a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">node.js 库 <code>mysql</code> 用法</a></h2><h3 id="连接mysql-1"><a href="#连接mysql-1" class="headerlink" title="连接mysql"></a>连接mysql</h3><p>方式一(推荐)：返回一个connection对象</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Connection options可以参考文档</span><span class="token keyword">var</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host     <span class="token punctuation">:</span> <span class="token string">'example.org'</span><span class="token punctuation">,</span>  user     <span class="token punctuation">:</span> <span class="token string">'bob'</span><span class="token punctuation">,</span>  password <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>方式二：ssl连接方式，需要读取SSL profiles配置文件<br>方式三：Pooling connections<br>一次性创建多个连接,返回一个pool对象，详情参考文档</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pool  <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  connectionLimit <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  host            <span class="token punctuation">:</span> <span class="token string">'example.org'</span><span class="token punctuation">,</span>  user            <span class="token punctuation">:</span> <span class="token string">'bob'</span><span class="token punctuation">,</span>  password        <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>  database        <span class="token punctuation">:</span> <span class="token string">'my_db'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="断开mysql连接"><a href="#断开mysql连接" class="headerlink" title="断开mysql连接"></a>断开mysql连接</h3><p>两种方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：优雅的断开连接</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// The connection is terminated now</span>  <span class="token comment" spellcheck="true">//if err,an err argument will be provided to the callback, but the connection will be terminated regardless of that.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式二：不推荐</span>connection<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h3><p>连接对象connection 和pool 都提供了 query(sqlString, callback) 方法用于执行sql语句查询,三种方式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一：简单查询</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `books` WHERE `author` = "David"'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error will be an Error if one occurred during the query</span>  <span class="token comment" spellcheck="true">// results will contain the results of the query</span>  <span class="token comment" spellcheck="true">// fields will contain information about the returned results fields (if any)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式二：query(sqlString, values, callback) comes when using placeholder values </span><span class="token comment" spellcheck="true">//方式三：query(options, callback) comes when using various advanced options</span></code></pre><h3 id="Escaping-query-values-转义查询语句"><a href="#Escaping-query-values-转义查询语句" class="headerlink" title="Escaping query values 转义查询语句"></a>Escaping query values 转义查询语句</h3><p>These methods of escaping values only works when the NO_BACKSLASH_ESCAPES SQL mode is disabled (which is the default state for MySQL servers).<br>为了防止SQL注入，用户执行的sql语句都应该先进行转义，mysql.escape(), connection.escape() or pool.escape() 这三个方法都可以使用</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//方法一：</span><span class="token keyword">var</span> userId <span class="token operator">=</span> <span class="token string">'some user provided value'</span><span class="token punctuation">;</span><span class="token keyword">var</span> sql    <span class="token operator">=</span> <span class="token string">'SELECT * FROM users WHERE id = '</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法二：use ? characters as placeholders ，这个本质上也是调用connection.escape()方法</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM users WHERE id = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>userId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多个占位符映射到数组</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> userId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Escaping-query-identifiers转义数据库-表-列-名"><a href="#Escaping-query-identifiers转义数据库-表-列-名" class="headerlink" title="Escaping query identifiers转义数据库/表/列 名"></a>Escaping query identifiers转义数据库/表/列 名</h3><p>if you can’t trust an SQL identifier (database / table / column name) because it is provided by a user, you should escape it with mysql.escapeId(identifier), connection.escapeId(identifier) or pool.escapeId(identifier)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sorter <span class="token operator">=</span> <span class="token string">'date'</span><span class="token punctuation">;</span><span class="token keyword">var</span> sql    <span class="token operator">=</span> <span class="token string">'SELECT * FROM posts ORDER BY '</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span><span class="token function">escapeId</span><span class="token punctuation">(</span>sorter<span class="token punctuation">)</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 ?? 占位符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> userId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> query <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT ?? FROM ?? WHERE id = ?'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>columns<span class="token punctuation">,</span> <span class="token string">'users'</span><span class="token punctuation">,</span> userId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SELECT `username`, `email` FROM `users` WHERE id = 1</span></code></pre><h3 id="预定义查询语句格式"><a href="#预定义查询语句格式" class="headerlink" title="预定义查询语句格式"></a>预定义查询语句格式</h3><p>You can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM ?? WHERE ?? = ?"</span><span class="token punctuation">;</span><span class="token keyword">var</span> inserts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'users'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> userId<span class="token punctuation">]</span><span class="token punctuation">;</span>sql <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> inserts<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/sql/"/>
      <url>/sql/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>INT    整型    4字节整数类型，范围约+/-21亿<br>BIGINT    长整型    8字节整数类型，范围约+/-922亿亿<br>REAL    浮点型    4字节浮点数，范围约+/-1038 ( FLOAT(24) )<br>DOUBLE    浮点型    8字节浮点数，范围约+/-10308<br>DECIMAL(M,N)    高精度小数    由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算<br>CHAR(N)    定长字符串    存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串<br>VARCHAR(N)    变长字符串    存储可变长度的字符串，例如，VARCHAR(100)可以存储0<del>100个字符的字符串<br>BOOLEAN    布尔类型    存储True或者False<br>DATE    日期类型    存储日期，例如，2018-06-22<br>TIME    时间类型    存储时间，例如，12:20:59<br>DATETIME    日期和时间类型    存储日期+时间，例如，2018-06-22 12:20:59<br>上面的表中列举了最常用的数据类型。很多数据类型还有别名，例如，REAL又可以写成FLOAT(24)。还有一些不常用的数据类型，例如，TINYINT（范围在0</del>255）。各数据库厂商还会支持特定的数据类型，例如JSON。<br>选择数据类型的时候，要根据业务规则选择合适的类型。通常来说，BIGINT能满足整数存储的需求，VARCHAR(N)能满足字符串存储的需求，这两种类型是使用最广泛的。</p><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键<br>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。<br>选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。<br>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均不可用作主键。<br>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：<br>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；<br>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</p><h3 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h3><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>在students表中，通过class_id的字段，可以把数据与另一张表关联起来，这种列称为外键。</p><p>外键并不是通过列名实现的，而是通过定义外键约束实现的：<br>ALTER TABLE students<br>ADD CONSTRAINT fk_class_id<br>FOREIGN KEY (class_id)<br>REFERENCES classes (id);<br>其中，外键约束的名称fk_class_id可以任意，FOREIGN KEY (class_id)指定了class_id作为外键，REFERENCES classes (id)指定了这个外键将关联到classes表的id列（即classes表的主键）。</p><p>通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果classes表不存在id=99的记录，students表就无法插入class_id=99的记录。</p><p>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，class_id仅仅是一个普通的列，只是它起到了外键的作用而已。</p><p>要删除一个外键约束，也是通过ALTER TABLE实现的：<br>ALTER TABLE students<br>DROP FOREIGN KEY fk_class_id;<br>注意：删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN …实现的。</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。</p><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。<br>ALTER TABLE students ADD INDEX idx_score (score);<br>索引如果有多列，可以在括号里依次写上<br>ALTER TABLE students ADD INDEX idx_name_score (name, score);<br>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如gender列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。<br>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。<br>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。<br>但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。<br>ALTER TABLE students<br>ADD UNIQUE INDEX uni_name (name);<br>也可以只对某一列添加一个唯一约束而不创建唯一索引：<br>ALTER TABLE students<br>ADD CONSTRAINT uni_name UNIQUE (name);<br>这种情况下，name列没有索引，但仍然具有唯一性保证。</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><p>SELECT * FROM &lt;表名&gt;<br>SELECT 100+200;//用于计算<br>虽然SELECT可以用作计算，但它并不是SQL的强项。但是，不带FROM子句的SELECT语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条SELECT 1;来测试数据库连接。</p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;<br>如果不加括号，条件运算按照NOT、AND、OR的优先级进行，即NOT优先级最高，其次是AND，最后是OR。加上括号可以改变优先级。<br>SELECT * FROM students WHERE score &gt;= 80;<br>SELECT * FROM students WHERE score &gt;= 80 AND gender = ‘M’;<br>SELECT * FROM students WHERE score &gt;= 80 OR gender = ‘M’;<br>SELECT * FROM students WHERE NOT class_id = 2;<br>SELECT * FROM students WHERE (score &lt; 80 OR score &gt; 90) AND gender = ‘M’;</p><h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><p>只希望返回某些列的数据，而不是所有列的数据，我们可以用SELECT 列1, 列2, 列3 FROM …，让结果集仅包含指定列。这种操作称为投影查询。<br>SELECT id, score, name FROM students;<br>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM …<br>SELECT id, score points, name FROM students  WHERE gender = ‘M’;</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用SELECT查询时，细心的读者可能注意到，查询结果集通常是按照id排序的，也就是根据主键排序。这也是大部分数据库的做法。如果我们要根据其他条件排序怎么办？可以加上ORDER BY子句。默认的排序规则是ASC：“升序”，即从小到大。<br>SELECT id, name, gender, score FROM students WHERE class_id = 1 ORDER BY score;<br>SELECT id, name, gender, score FROM students ORDER BY score DESC;//按照score倒序排列<br>SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;//先按照score降序排列，如果分数相同再按照gender排序</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过LIMIT <M> OFFSET <N>子句实现，随着N越来越大，查询效率也会越来越低。<br>分页查询的关键在于，首先要确定每页需要显示的结果数量pageSize（这里是3），然后根据当前页的索引pageIndex（从1开始），确定LIMIT和OFFSET应该设定的值：<br>LIMIT总是设定为pageSize；<br>OFFSET计算公式为pageSize * (pageIndex - 1)</p><p>SELECT id, name, gender, score FROM students ORDER BY score DESC LIMIT 3 OFFSET 0;//先排序再分页，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始。</p><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。COUNT/SUM/AVG/MAX/MIN<br>SELECT COUNT(<em>) FROM students;//查询一个表有多少条记录<br>COUNT(</em>)表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是COUNT(<em>)<br>通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果<br>SELECT COUNT(</em>) num FROM students;<br>SELECT COUNT(<em>) boys FROM students WHERE gender = ‘M’;<br>如果聚合查询的WHERE条件没有匹配到任何行，COUNT()会返回0，而SUM()、AVG()、MAX()和MIN()会返回NULL<br>对于聚合查询，SQL还提供了“分组聚合”的功能。聚合查询的列中，只能放入分组的列<br>SELECT class_id, COUNT(</em>) num FROM students GROUP BY class_id;</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>使用多表查询可以获取M x N行记录；多表查询的结果集可能非常巨大，要小心使用<br>SELECT * FROM &lt;表1&gt; &lt;表2&gt;<br>SELECT * FROM students, classes;//查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。<br>SELECT<br>    s.id sid,<br>    s.name,<br>    s.gender,<br>    s.score,<br>    c.id cid,<br>    c.name cname<br>FROM students s, classes c<br>WHERE s.gender = ‘M’ AND c.id = 1; //设置表的别名简化写法，设置列的别名去除列重名</p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>连接查询是另一种类型的多表查询，连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。<br>SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score FROM students s INNER JOIN classes c<br>ON s.class_id = c.id;<br>内连接——INNER JOIN 获取交集<br>外连接—— LEFT OUTER JOIN/RIGHT OUTER JOIN/FULL OUTER JOIN</p><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>INSERT INTO &lt;表名&gt; (字段1, 字段2, …) VALUES (值1, 值2, …);<br>id字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在INSERT语句中也可以不出现<br>//一次插入多条语句<br>INSERT INTO students (class_id, name, gender, score) VALUES<br>  (1, ‘大宝’, ‘M’, 87),<br>  (2, ‘二宝’, ‘M’, 81);</p><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, … WHERE …;<br>在UPDATE语句中，更新字段时可以使用表达式。<br>UPDATE students SET name=’大牛’, score=66 WHERE id=1;<br>//一次性更新多条记录<br>UPDATE students SET name=’小牛’, score=77 WHERE id&gt;=5 AND id&lt;=7;<br>UPDATE students SET score=score+10 WHERE score&lt;80;<br>//要特别小心的是，UPDATE语句可以没有WHERE条件,这时，整个表的所有记录都会被更新<br>UPDATE students SET score=60;</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>DELETE FROM &lt;表名&gt; WHERE …;<br>DELETE FROM students WHERE id=1;<br>DELETE FROM students WHERE id&gt;=5 AND id&lt;=7;<br>DELETE FROM students;(小心操作)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/nginx/"/>
      <url>/nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="windows-nginx指南"><a href="#windows-nginx指南" class="headerlink" title="windows nginx指南"></a>windows nginx指南</h3><p><a href="http://nginx.org/en/docs/windows.html" target="_blank" rel="noopener">http://nginx.org/en/docs/windows.html</a><br>新手指引<br><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">http://nginx.org/en/docs/beginners_guide.html</a><br><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a><br>nginx配置常见误区<br><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/</a><br>配置指南<br><a href="https://www.linode.com/docs/web-servers/nginx/how-to-configure-nginx/" target="_blank" rel="noopener">https://www.linode.com/docs/web-servers/nginx/how-to-configure-nginx/</a></p><p>一定要结合日志查看nginx 服务运行状况<br>access.log error.log 这两个文件很重要<br>windows下载nginx目录中开启cmd窗口<br>start nginx.exe<br>nginx.exe -s stop  //暴力退出<br>nginx.exe -s quit  //优雅退出<br>nginx.exe -s reload  //重新加载配置文件<br>nginx.exe -V   //查看各个目录<br>nginx.exe -t   //检查配置文件是否正确 </p><h3 id="Linux下安装nginx"><a href="#Linux下安装nginx" class="headerlink" title="Linux下安装nginx"></a>Linux下安装nginx</h3><p>yum install nginx -y</p><p>RPM (Red Hat Package Manager) is an default open source and most popular package management utility for Red Hat based systems like (RHEL, CentOS and Fedora).The tool allows system administrators and users to install, update, uninstall, query, verify and manage system software packages in Unix/Linux operating systems. The RPM formerly known as .rpm file, that includes compiled software programs and libraries needed by the packages. This utility only works with packages that built on .rpm format.</p><p>rpm -ql nginx #查看配置文件和目录</p><p>nginx http 中server模块的配置<br>root是服务器的根目录，可以在server字段中配置，location中可以覆盖<br>index 字段在server中配置，location中也可以覆盖<br>The index variable tells NGINX which file to serve if none is specified.</p><h3 id="location-修饰符"><a href="#location-修饰符" class="headerlink" title="location 修饰符"></a>location 修饰符</h3><ul><li><p>The = modifier<br>The requested document URI must match the specified pattern exactly(只能严格匹配一个字符串路径)，不能使用正则</p></li><li><p>No modifier<br>The requested document URI must begin with the specified pattern.不能使用正则</p></li><li><p>The ^~ modifier (类似于没有修饰符情况，它比正则匹配享有优先权)<br>Similar to the no-symbol behavior, the location URI must begin with the specified pattern.<br>The difference is that if the pattern is matched, Nginx stops searching for other patterns</p></li><li><p>The ~ modifier (uri大小写敏感)<br>The requested URI must be a case-sensitive match to the specified regular expression</p></li><li><p>The ~* modifier (uri大小写不敏感)<br>The requested URI must be a case-insensitive match to the specified regular expression</p><h3 id="location的匹配顺序-Search-order-and-priority"><a href="#location的匹配顺序-Search-order-and-priority" class="headerlink" title="location的匹配顺序(Search order and priority)"></a>location的匹配顺序(Search order and priority)</h3><p>location 的匹配和先后顺序无关。<br>Nginx will search for matching patterns in a specific order:</p></li><li><p>location blocks with the = modifier: If the specified string exactly matches the<br>requested URI, Nginx retains the location block.</p></li><li><p>location blocks with no modifier: If the specified string exactly matches the<br>requested URI, Nginx retains the location block.</p></li><li><p>location blocks with the ^~ modifier: If the specified string matches the beginning<br>of the requested URI, Nginx retains the location block.</p></li><li><p>location blocks with ~ or ~* modifier: If the regular expression matches the<br>requested URI, Nginx retains the location block.</p></li><li><p>location blocks with no modifier: If the specified string matches the beginning of<br>the requested URI, Nginx retains the location block.</p></li></ul><h3 id="会导致内部重定向的几个命令"><a href="#会导致内部重定向的几个命令" class="headerlink" title="会导致内部重定向的几个命令"></a><a href="https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms" target="_blank" rel="noopener">会导致内部重定向的几个命令</a></h3><p>Some directives that can lead to this type of internal redirect are:</p><ul><li>index</li><li>try_files</li><li>rewrite</li><li>error_page</li></ul><pre class=" language-shell"><code class="language-shell">        root         /usr/share/nginx/html/data;        index index.html;        location  /a {            root /home;            #这里如果要留在这个block中可以使用 try_files $uri $uri.html $uri/            #它会依次匹配/a文件  /a.html文件  /a/目录           }        error_page 404 /404.html;        location = /40x.html {        }</code></pre><p>情况1：假设根目录下只有/home<br>如果有一个请求 /a 过来，nginx会先匹配第一个location block，此时进入block之后，会重新定义根目录，即 /home ,然后就没有然后了，在access.log中会报404状态码，表示未找到页面，在error.log中它会记录 open() “/home/a” failed (2: No such file or directory)，接着它会走error_page ，导航到/404.html , nginx会匹配 /404.html 这个URI，此时相当于重新寻找要走的block，此时相当于以 / 开头，即根目录，它会去/usr/share/nginx/html/data下寻找404.html<br>情况2： 根目录下只有/home/a ，a文件夹里面什么都没有<br>此时nginx会进入a目录，access.log中报”GET /a/ HTTP/1.1” 403 ，error.log中报 directory index of “/home/a/“ is forbidden<br>情况3： a中新建一个index.html文件<br>access.log 中状态码 200，返回的是a文件夹中的index.html. 它会默认index index.html.</p><h3 id="index-字段"><a href="#index-字段" class="headerlink" title="index 字段"></a>index 字段</h3><p>Context: http, server, location. Variables are accepted.(即这几个http server,location 中都存在index字段。默认 index.html)<br>This defines the default page that Nginx will serve if no filename is specified in the<br>request (in other words, the index page). You may specify multiple filenames, and the first<br>file to be found will be served. If none of the specified files are found, and if the<br>autoindex directive is enabled (check the HTTP Autoindex module), Nginx will attempt to<br>generate an automatic index of the files. Otherwise, it will return a 403 Forbidden error<br>page. Optionally, you may insert an absolute filename (such as /page.html, based from<br>the document root directory) but only as the last argument of the directive.<br>Syntax: index file1 [file2…] [absolute_file];<br>Default value: index.html</p><p>HTTP 304 未改变说明无需再次传输请求的内容，也就是说可以使用缓存的内容</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>所有以jpg/png/gif结尾的图片文件缓存24h<br>location ~ .*.(jpg|png|gif)$ {<br>        expires 24h;<br>}</p><h3 id="浏览器缓存-1"><a href="#浏览器缓存-1" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>add_header name value<br>location ~ .*.json$ {<br>        add_header Access-Control-Allow-Origin <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>;<br>        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;<br>        root /data/json;<br>    }</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>The HTTP referer (a misspelling of referrer),By checking the referrer, the new webpage can see where the request originated.<br>In the most common situation this means that when a user clicks a hyperlink in a web browser, the browser sends a request to the server holding the destination webpage. The request may include the referer field, which indicates the last page the user was on (the one where they clicked the link).</p><p>location ~ .*.(jpg|png|gif)$ {<br>        expires 1h;<br>        valid_referers none blocked 47.104.184.134;<br>        if ($invalid_referer) {<br>           return 403;<br>        }<br>        root /data/images;<br>    }</p><ul><li>none “Referer” 为空</li><li>blocked “Referer”不为空，但是里面的值被代理或者防火墙删除了，这些值都不以http://或者https://开头，而是“Referer: XXXXXXX”这种形式</li><li>server_names “Referer”来源头部包含当前的server_names（当前域名）</li><li>arbitrary string 任意字符串,定义服务器名或者可选的URI前缀.主机名可以使用*开头或者结尾，在检测来源头部这个过程中，来源域名中的主机端口将会被忽略掉</li><li>regular expression 正则表达式,~表示排除https://或http://开头的字符串.<br>注意:通过Referer实现防盗链比较基础，仅可以简单实现方式资源被盗用。构造Referer的请求很容易实现<h3 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h3>正向代理，代理的是客户端，比如浏览器，翻墙上外网。<br>反向代理代理的是服务器，浏览器访问代理服务器，比如nginx代理服务器，nginx转发请求给后面的服务器集群处理，平衡负载，同时也保证了业务服务器的安全性，客户端感知不到业务处理服务器，互联网向外暴露的是nginx代理服务器。</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><a href="http://www.zhufengpeixun.com/plan/html/43.nginx.html#t518.7.1%20upstream" target="_blank" rel="noopener">反向代理</a></h3><p>在http模块中配置upstream模块，放置服务器集群<br>在server模块location中配置 proxy_pass </p><pre class=" language-shell"><code class="language-shell">http{    upstream test {    # 定义一个服务器组名 ，默认用轮询的方式分配        server localhost:3000;        server localhost:4000;        server localhost:5000;    }    server {          location / {            proxy_pass http://test; #以/开头的路由转交给服务器组test处理        }    }}</code></pre><h3 id="阿里云端口问题"><a href="#阿里云端口问题" class="headerlink" title="阿里云端口问题"></a><a href="https://cnodejs.org/topic/599d58e1f36051a45246c2b5" target="_blank" rel="noopener">阿里云端口问题</a></h3><p>ifconfig看不到外网ip，只显示环回地址和内网ip</p><p>答案：阿里云现在不能使用经典网络了，现在连接应该是通过转发一次到内部机房的，所以ECS里面只能看到一个局域网的IP.在ECS实例的安全组配置里面配置外网可访问的端口，这样就能在外面使用公网IP访问了。开启3000、4000、5000端口</p><p>Accelerated support with caching of FastCGI, uwsgi, Simple Common Gateway<br>Interface (SCGI)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>session vs jwt</title>
      <link href="/session-vs-jwt/"/>
      <url>/session-vs-jwt/</url>
      
        <content type="html"><![CDATA[<p>koa-session-minimal<br>内部引入了uid-safe(unique id for cookie and url)模块来产生一个sid(session id),当用户登录后调用ctx.cookies.set(key,value),key时koa-session-minimal配置时候传入的key,value是uid模块生成的session id,服务器在返回的时候设置了 set-cookie=sid,用来管理会话,服务器和客户端来回传递此sessionid ,服务器保存了ctx.session对象，通过此id来查询服务器上保存的用户信息，默认保存在memory-store中，浏览器窗口关闭，session对象就会丢失，持久化保存请用对应的数据库store</p><p>jwt 是另外一种会话管理机制<br>服务的生成token返回给客户端，客户端保存在localStorage 或者sessionStorage中，在axios中配置全局默认响应头 authorization，传入token<br>axios.defaults.headers[‘Authorization’] = sessionStorage.getItem(“token”);<br>服务端收到之后，从req对象中提取token,再校验token的合法性，token中包含了用户名。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap 入门</title>
      <link href="/bootstrap/"/>
      <url>/bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="bootstrap-v4-4-入门"><a href="#bootstrap-v4-4-入门" class="headerlink" title="bootstrap v4.4 入门"></a>bootstrap v4.4 入门</h1><h2 id="使用bootstrap"><a href="#使用bootstrap" class="headerlink" title="使用bootstrap"></a>使用bootstrap</h2><h3 id="在head中引入css"><a href="#在head中引入css" class="headerlink" title="在head中引入css"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/#css" target="_blank" rel="noopener">在head中引入css</a></h3><h3 id="引入js"><a href="#引入js" class="headerlink" title="引入js"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/#js" target="_blank" rel="noopener">引入js</a></h3><p>bootstrap的js是基于jQuery开发的，有的组件需要js,有的不需要，所以可以参考官方文档，需要的时候再引入js文件，除了jQuery之外，还要引入proper.min.js,bootstrap.min.js,官方引入的是jQuery缩减版的，当然也支持jQuery完整版的。</p><h3 id="重要的几个规定"><a href="#重要的几个规定" class="headerlink" title="重要的几个规定"></a>重要的几个规定</h3><ul><li>HTML5 doctype必须声明<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li>响应式meta标签必须声明<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/#reboot" target="_blank" rel="noopener">reboot</a></h3><p>reboot 是基于normalize.css开发的一个运用于bootstrap的通用css样式设置，用来消除跨浏览器渲染的一些差异。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/browsers-devices/" target="_blank" rel="noopener">浏览器支持</a></h2><p>Bootstrap supports the latest, stable releases of all major browsers and platforms. On Windows, we support Internet Explorer 10-11 / Microsoft Edge.<br>如果需要支持ie8-9,请使用bootstrap 3<br>bootstrap use Autoprefixer to handle intended browser support via CSS prefixes, which uses Browserslist to manage these browser versions.<br>更多浏览器差异和bugs请查看官方文档。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// agent sniffing</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> nua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent  <span class="token keyword">var</span> isAndroid <span class="token operator">=</span> <span class="token punctuation">(</span>nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android '</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'AppleWebKit'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Chrome'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'select.form-control'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'form-control'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span> <span class="token string">'100%'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="使用bootstrap-plugin"><a href="#使用bootstrap-plugin" class="headerlink" title="使用bootstrap plugin"></a>使用bootstrap plugin</h2><p>bootstrap插件都是基于jQuery开发的，所以jQuery必须在插件之前引入，可以在package.json文件中查看支持那个版本的jQuery。<br>可以在<code>js/dist/*.js</code>目录下引入单个bootstrap插件，也可以一次性引入所有插件bootstrap.js 或者bootstrap.min.js</p><h2 id="自定义bootstrap样式"><a href="#自定义bootstrap样式" class="headerlink" title="自定义bootstrap样式"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/theming/" target="_blank" rel="noopener">自定义bootstrap样式</a></h2><p>添加自定义的 custom.scss 样式</p><pre class=" language-css"><code class="language-css">// 一：在custom<span class="token number">.</span>css中你可以引入全部的scss文件<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/bootstrap"</span><span class="token punctuation">;</span></span>//二：引入部分scss文件//required<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/functions"</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/variables"</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/mixins"</span><span class="token punctuation">;</span></span>// Optional<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/reboot"</span><span class="token punctuation">;</span></span></code></pre><p>不使用package manager时候的目录结构<br>your-project/<br>├── scss<br>│   └── custom.scss<br>└── bootstrap/<br>    ├── js<br>    └── scss<br>使用package manager时候的目录结构<br>your-project/<br>├── scss<br>│   └── custom.scss<br>└── node_modules/<br>    └── bootstrap<br>        ├── js<br>        └── scss</p><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p>在<code>scss/_variables.scss</code>你可以找到所有的变量，默认变量以 <code>!default</code>开头，你可以在custom.scss文件中覆盖它，但要去掉 <code>!default</code> 前缀，有一些默认变量为 null ,它并不会生效，除非你在custom.scss文件中重新定义它。<br>自定义的变量写在引入默认变量之前。</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// Your variable overrides</span><span class="token property"><span class="token variable">$body-bg</span></span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$body-color</span></span><span class="token punctuation">:</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Bootstrap and its default variables</span><span class="token keyword">@import</span> <span class="token string">"../node_modules/bootstrap/scss/bootstrap"</span><span class="token punctuation">;</span></code></pre><h2 id="bootstrap-栅格系统"><a href="#bootstrap-栅格系统" class="headerlink" title="bootstrap 栅格系统"></a>bootstrap 栅格系统</h2><p>bootstrap提供了 3 种网格容器</p><ul><li>.container, which sets a max-width at each responsive breakpoint<br>  在extra-small(小于576px)才是100%，其余的断点都是固定宽度</li><li>.container-fluid, which is width: 100% at all breakpoints<br>  在所有断点下都是100%宽度</li><li>.container-{breakpoint}, which is width: 100% until the specified breakpoint<br>  .container-sm(small&gt;576px)/.container-md(medium&gt;768px)/.container-lg(large&gt;992px)/.container-xl(Extra large&gt;1200px)<br>bootstrap 基于 flexbox 构建了12列等宽的网格系统，可以自适应 5 种屏幕尺寸。</li></ul><p>Grid breakpoints are based on minimum width media queries, meaning they apply to that one breakpoint and all those above it (e.g., .col-sm-4 applies to small, medium, large, and extra large devices, but not the first xs breakpoint).</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --></span>  <span class="token comment" spellcheck="true">&lt;!-- 首先bootstrap会根据屏幕尺寸匹配meida query,如果在手机上打开，由于屏幕尺寸较小，md的媒体查询匹配不到，第一个div的col-md-8类匹配不到要添加的样式，所以它就是一个没有样式的div，宽度100%，第二个div匹配col-6类的样式，占据屏幕一半，等屏幕尺寸变大之后，两个div都匹配md下的媒体查询样式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-md-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Columns are always 50% wide, on mobile and desktop --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ul><li>Use col-{breakpoint}-auto classes to size columns based on the natural width of their content.<code>&lt;div class=&quot;col-md-auto&quot;&gt;</code>类似于width:fit-content;</li><li>Rows are wrappers for columns. Each column has horizontal padding (called a gutter) for controlling the space between them. This padding is then counteracted on the rows with negative margins. This way, all the content in your columns is visually aligned down the left side.(Gutter width    30px ,15px on each side of a column)</li></ul><h3 id="Row-columns"><a href="#Row-columns" class="headerlink" title="Row columns"></a>Row columns</h3><p>Use the responsive <code>.row-cols-*</code> classes to quickly set the number of columns that best render your content and layout. Whereas normal .col-* classes apply to the individual columns (e.g., .col-md-4), the row columns classes are set on the parent .row as a shortcut.</p><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a><a href="https://getbootstrap.com/docs/4.4/layout/grid/#alignment" target="_blank" rel="noopener">Alignment</a></h3><h4 id="Vertical-alignment"><a href="#Vertical-alignment" class="headerlink" title="Vertical alignment"></a>Vertical alignment</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 应用于行，调整所有子元素位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 应用于列 调整单个子元素位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="Horizontal-alignment"><a href="#Horizontal-alignment" class="headerlink" title="Horizontal alignment"></a>Horizontal alignment</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-around<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-between<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="No-gutters"><a href="#No-gutters" class="headerlink" title="No gutters"></a>No gutters</h3><p>The gutters between columns in our predefined grid classes can be removed with .no-gutters. This removes the negative margins from .row and the horizontal padding from all immediate children columns.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row no-gutters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6 col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-sm-6 .col-md-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Column-wrapping"><a href="#Column-wrapping" class="headerlink" title="Column wrapping"></a>Column wrapping</h3><p>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.</p><h3 id="Column-breaks"><a href="#Column-breaks" class="headerlink" title="Column breaks"></a><a href="https://getbootstrap.com/docs/4.4/layout/grid/#no-gutters" target="_blank" rel="noopener">Column breaks</a></h3><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- Force next columns to break to new line --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w-100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Reordering"><a href="#Reordering" class="headerlink" title="Reordering"></a>Reordering</h3><p>Use <code>.order-</code> classes for controlling the visual order of your content(<code>.order-1.order-md-2</code>), Includes support for 1 through 12 across all five grid tiers.<br>There are also responsive <code>.order-first</code> and <code>.order-last</code> classes that change the order of an element by applying order: -1 and order: 13 (order: $columns + 1), respectively.</p><h3 id="Offsetting-columns"><a href="#Offsetting-columns" class="headerlink" title="Offsetting columns"></a>Offsetting columns</h3><p>Move columns to the right using <code>.offset-md-*</code> classes.<code>.offset-md-4</code> moves <code>.col-md-4</code>over four columns.</p><h3 id="Margin-utilities"><a href="#Margin-utilities" class="headerlink" title="Margin utilities"></a>Margin utilities</h3><p>With the move to flexbox in v4, you can use margin utilities like <code>.mr-auto</code> to force sibling columns away from one another.</p><h3 id="Customizing-the-grid"><a href="#Customizing-the-grid" class="headerlink" title="Customizing the grid"></a>Customizing the grid</h3><p>Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. Change the number of tiers, the media query dimensions, and the container widths—then recompile.</p><h2 id="Utilities-for-layout"><a href="#Utilities-for-layout" class="headerlink" title="Utilities for layout"></a><a href="https://getbootstrap.com/docs/4.4/layout/utilities-for-layout/" target="_blank" rel="noopener">Utilities for layout</a></h2><p>Bootstrap includes dozens of utility classes for showing, hiding, aligning, and spacing content.</p><ul><li>Changing display(Visible only on sm    <code>.d-none .d-sm-block .d-md-none</code>)</li><li><a href="https://getbootstrap.com/docs/4.4/utilities/spacing/" target="_blank" rel="noopener">Margin and padding</a><br>Spacing utilities that apply to all breakpoints, from xs to xl, have no breakpoint abbreviation in them. </li><li>Toggle visibility(.visible or .invisible )<h3 id="Flexbox-options"><a href="#Flexbox-options" class="headerlink" title="Flexbox options"></a>Flexbox options</h3>不是所有的元素都是display：flex;如果要开启弹性盒子，添加<code>.d-flex</code> or one of the responsive variants (<code>.d-sm-flex</code>  <code>.d-inline-flex.</code>).</li></ul><p><code>.flex-row .flex-row-reverse</code> <code>.flex-column .flex-column-reverse</code><br><code>justify-content-start .justify-content-end .justify-content-center</code><br><code>.justify-content-between.justify-content-around</code><br><code>.align-items-start.align-items-end.align-items-center</code><br><code>.align-items-baseline.align-items-stretch</code><br><code>.align-self-start.align-self-end.align-self-center</code><br><code>.align-self-baseline.align-self-stretch</code></p><h4 id="Fill"><a href="#Fill" class="headerlink" title="Fill"></a>Fill</h4><p>Use the <code>.flex-fill</code> class on a series of sibling elements to force them into widths equal to their content </p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><code>.flex-grow-*</code> <code>.flex-shrink-*</code> <code>.flex-{grow|shrink}-0 .flex-{grow|shrink}-1</code></p><h4 id="Auto-margins"><a href="#Auto-margins" class="headerlink" title="Auto margins"></a>Auto margins</h4><p>Flexbox can do some pretty awesome things when you mix flex alignments with auto margins. Shown below are three examples of controlling flex items via auto margins: default (no auto margin), pushing two items to the right (<code>.mr-auto</code>), and pushing two items to the left (<code>.ml-auto</code>).</p><h4 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h4><p><code>.flex-nowrap</code>, wrapping with <code>.flex-wrap</code> or reverse wrapping with <code>.flex-wrap-reverse</code>.</p><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p><code>.order-0.order-1.order-2.order-3.order-4.order-5.order-6.order-7.order-8.order-9.order-10.order-11.order-12</code></p><h4 id="Align-content"><a href="#Align-content" class="headerlink" title="Align content"></a>Align content</h4><p>Use align-content utilities on flexbox containers to align flex items together on the cross axis. Choose from start (browser default), end, center, between, around, or stretch. To demonstrate these utilities, we’ve enforced flex-wrap: wrap and increased the number of flex items.<br><code>This property has no effect on single rows of flex items.</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tar-unzip</title>
      <link href="/tar-unzip/"/>
      <url>/tar-unzip/</url>
      
        <content type="html"><![CDATA[<p>Linux下常见的压缩包格式有5种:zip tar.gz tar.bz2 tar.xz tar.Z<br>其中tar是种打包格式,gz和bz2等后缀才是指代压缩方式:gzip和bzip2<br>unzip filename.zip<br>事实上, 从1.15版本开始tar就可以自动识别压缩的格式,故不需人为区分压缩格式就能正确解压<br>tar -xvf filename.tar.gz<br>tar -xvf filename.tar.bz2<br>tar -xvf filename.tar.xz<br>tar -xvf filename.tar.Z</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli环境搭建</title>
      <link href="/vue-cli-huan-jing-da-jian/"/>
      <url>/vue-cli-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-cli插件"><a href="#vue-cli插件" class="headerlink" title="vue-cli插件"></a>vue-cli插件</h2><ul><li><p>@vue/cli-plugin-eslint<br>vue-cli 的 eslint 插件，通过这个插件给vue-cli注入了<code>vue-cli-service lint</code> 命令，提供了命令行使用lint的功能。@vue/cli-plugin-xxx功能都是注入命令行方法，扩展vue-cli 或者 webpack</p></li><li><p>eslint 和 eslint-plugin-vue<br>Linters have two categories of rules:Formatting rules/Code-quality rules,都有相应的配置规则，以eslint为例，都需要自行配置(官方也有预设)。linter根据语言有不同的linter来匹配语法错误。在.vue文件中使用eslint，需要先安装eslint，然后安装eslint的vue插件才可以使用<br>eslint-plugin-vue:This plugin allows us to check the <template> and <script> of .vue files with ESLint<br>配置规则见官网，要覆盖默认的规则，看配置文件是在vue项目中单独出来了，还是在package.json 文件中的eslintConfig字段中配置<br>官网：<a href="https://eslint.vuejs.org/" target="_blank" rel="noopener">https://eslint.vuejs.org/</a></p></li><li><p><a href="https://prettier.io/docs/en/comparison.html" target="_blank" rel="noopener">prettier 和 eslint-plugin-prettier</a><br>prettier是一个code formatter，在vscode中安装了prettier后就可以 shift+alt+F 来格式化代码，它提供了linter中的Formatting rules功能,相当于只有一部分的linter功能，但并不会检查语法错误。这两个包是给eslint服务的。</p></li><li><p>style-resources-loader<br>这个包是一个css注入包，在webpack中配置在最右边，style-loader/css-loader/stylus-loader/style-resources-loader ，即第一个调用，它被用作将一些全局css 变量 mixin 等注入到每个css模块中，从而不用手动在每个css模块中引入了。在vue.config.js中配合chainWepack使用<br>替代包：vue-cli-plugin-style-resources-loader</p></li><li><p>babel-plugin-import<br>模块化导入用<br>Modular import plugin for babel, compatible with antd, antd-mobile, lodash, material-ui, and so on.使用的时候看所使用的的框架是否支持<br>babelrc文件或者webpack中babel-loader中添加配置。</p></li><li><p>vue-loader<br>在webpack的配置文件中使用，是用来自行构建脚手架时候使用的，官方推荐使用vue-cli构建开发环境。</p></li><li><p>vue-template-compiler<br>使用vue-cli构建时候 自动安装的<br>这个包可以被用来将 Vue 2.0 的模板预编译为渲染函数以避免运行时不必要的编译开销和 CSP 的限制。</p></li><li><p>css预处理器<br>vue-cli搭建环境的时候会选择预处理器，如果没选的话，只需要手动npm安装即可，内置的webpack会处理好一切。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Z-index</title>
      <link href="/z-index/"/>
      <url>/z-index/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Z-index"><a href="#CSS-Z-index" class="headerlink" title="CSS Z-index"></a>CSS Z-index</h1><h2 id="当没有定义z-index属性时"><a href="#当没有定义z-index属性时" class="headerlink" title="当没有定义z-index属性时"></a>当没有定义z-index属性时</h2><p>When no z-index property is specified, elements are rendered on the default rendering layer 0 (zero).<br>从下倒上依次是：</p><ul><li>The background and borders of the root element</li><li>Descendant non-positioned blocks, in order of appearance in the HTML</li><li>Descendant positioned elements, in order of appearance in the HTML</li></ul><p>当flex-items的order属性改变了HTML的显示顺序之后，它同样会影响stacking context的顺序</p><h2 id="The-stacking-context（层叠上下文）"><a href="#The-stacking-context（层叠上下文）" class="headerlink" title="The stacking context（层叠上下文）"></a>The stacking context（层叠上下文）</h2><p>它是一个假象的三维空间，垂直于视口，HTML 元素基于其元素属性按照优先级顺序占据这个空间</p><h3 id="如何产生一个层叠上下文"><a href="#如何产生一个层叠上下文" class="headerlink" title="如何产生一个层叠上下文"></a>如何产生一个层叠上下文</h3><ul><li>html元素本身</li><li>position为absolute/relative，并且z-index不为auto</li><li>position为fixed/sticky</li><li>flex items,并且z-index不为auto</li><li>grid items, 并且z-index不为auto</li><li>Element with a opacity value less than 1 </li><li>Element with a mix-blend-mode value other than normal.</li><li>Element with any of the following properties with value other than none:<pre><code>  - transform  - filter  - perspective  - clip-path  - mask / mask-image / mask-border</code></pre><h3 id="层叠上下文如何工作"><a href="#层叠上下文如何工作" class="headerlink" title="层叠上下文如何工作"></a>层叠上下文如何工作</h3>在同一个层叠上下文，子元素按照没有z-index时的顺序叠加，如果子元素有z-index属性，它是相对于在本层叠上下文中的其他子元素而言的，它整体的z-index是由父元素决定的。父元素和子元素属于不同的层叠上下文，其z-index没有比较性可言。</li></ul><p>HTML的层次结构和层叠上下文的层次结构是不同的。在层叠上下文的层次结构中，没有创建层叠上下文的元素同其父级处于一个层叠上下文。创建了层叠上下文的会跳离父元素的HTML结构限制，自成一个层叠上下文。</p><h2 id="Stacking-with-floated-blocks"><a href="#Stacking-with-floated-blocks" class="headerlink" title="Stacking with floated blocks"></a>Stacking with floated blocks</h2><p>For floated blocks, the stacking order is a bit different. Floating blocks are placed between non-positioned blocks and positioned blocks</p><ul><li>The background and borders of the root element</li><li>Descendant non-positioned blocks, in order of appearance in the HTML</li><li>Floating blocks</li><li>Descendant positioned elements, in order of appearance in the HTML</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常用工具简介</title>
      <link href="/qian-duan-gong-ju-he-ji/"/>
      <url>/qian-duan-gong-ju-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="前端常用工具简介"><a href="#前端常用工具简介" class="headerlink" title="前端常用工具简介"></a>前端常用工具简介</h1><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><ul><li><a href="https://caniuse.com/" target="_blank" rel="noopener">can i use</a><br>“Can I use” provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.</li><li><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a><br>Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env<h2 id="CSS工具"><a href="#CSS工具" class="headerlink" title="CSS工具"></a>CSS工具</h2></li><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">autoprefixer</a><br>Parse CSS and add vendor prefixes to rules by Can I Use</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>适配</title>
      <link href="/gua-pei/"/>
      <url>/gua-pei/</url>
      
        <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>物理像素：屏幕实际的横纵像素点的个数<br>逻辑像素：程序认为的屏幕横纵像素点的个数<br>屏幕倍率dpr：devicePixelRatio //window.devicePixelRatio (特指移动端)</p><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><p>移动端1px问题解决方案<br>方法一：制作一个1<em>2px高的背景图，一半高度使用透明背景。<br>.hair-line{<br>    background-image:url(./hair-line-bg.png);<br>    background-repeat:repeat-x;<br>    background-position:0 0;<br>    backgdround-size:100% 1px;<br>}<br>缺点是颜色不好变更，要替换不同的图片<br>方法二 : 使用边框图<br>制作一个 6</em>6图片，只有最外围一圈1px像素为黑色，内层都是透明的<br>切成九宫格<br>.hair-line{<br>    border-image:url(./hair-line-bg.png) 2 repeat;<br>    border-width:1px;<br>}<br>方法三 ： 使用多背景和背景渐变<br>.test{<br>    width:100%;<br>    height:100%;<br>    background-image:linear-gradient(180deg, black,black,50%,transparent,50%);<br>    background-position:top left;<br>    background-repeat: no-repeat;<br>    background-size:100% 1px;<br>}<br>方法四： 伪类+transform(效果较好,还可以做圆角)<br>.hairline-top{<br>    position:relative;<br>    border-top:none;<br>}<br>.hairline-top:after{<br>    content:’’;<br>    display:block;<br>    position:absolute;<br>    top:0;<br>    left:0;<br>    height:1px;<br>    width:100%;<br>    background-color:#000;<br>    transform:scaleY(0.5);<br>    -webkit-transform:scaleY(0.5);<br>}</p><p>以上四种方法对 三倍屏 不友好<br>方法五：viewport缩放 + rem 阿里目前采用的解决方法</p><h2 id="阿里的amfe-flexible"><a href="#阿里的amfe-flexible" class="headerlink" title="阿里的amfe-flexible"></a>阿里的amfe-flexible</h2><p>根据屏幕尺寸，在html根元素上设置dpr,给字体和图片单独使用<br>根据屏幕情况，在html根元素上设置font-size大小，设置字体给rem使用<br>根据屏幕情况设置<br>npm i -S amfe-flexible</p><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"><script src="./node_modules/amfe-flexible/index.js"></script><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> flexible <span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> docEl <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement  <span class="token comment" spellcheck="true">//获取html根元素</span>  <span class="token keyword">var</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// adjust body font size</span>  <span class="token keyword">function</span> setBodyFontSize <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">*</span> dpr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> setBodyFontSize<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">setBodyFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// set 1rem = viewWidth / 10</span>  <span class="token keyword">function</span> setRemUnit <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rem <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true">//根据手机情况调整rem大小，手机逻辑像素除以10</span>    docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> rem <span class="token operator">+</span> <span class="token string">'px'</span> <span class="token comment" spellcheck="true">//设置html元素的font-size大小。  </span>  <span class="token punctuation">}</span>  <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// reset rem unit on page resize</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> setRemUnit<span class="token punctuation">)</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setRemUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// detect 0.5px supports</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dpr <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> fakeBody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> testElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    testElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'.5px solid transparent'</span>    fakeBody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>testElement<span class="token punctuation">)</span>    docEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>testElement<span class="token punctuation">.</span>offsetHeight <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      docEl<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'hairlines'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    docEl<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>fakeBody<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="pc端"><a href="#pc端" class="headerlink" title="pc端"></a>pc端</h2><p>以1280*800屏幕为例，显示类型定宽，内容宽度1180或1090，低于1280的用户不考虑。<br>pc端多以定宽设计为主。响应式局限性太大，大公司一般都是移动端和pc端分开设计。<br>如为一些特定的企业设计web管理系统，应用的设备统一是 1440px 宽以上的，那么我们就要按这个宽度作为设计的标准开始设计设计稿。如果要设计一个面向年轻群体的潮牌官网，可能就会为了更好的展示效果放弃低分辨率的用户（主要集中在中老年群体），最低按 1366 宽开始支持。如果是设计像淘宝这样的要满足所有人的网站，那么就要从最低的 1024 开始支持。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>设计网页，常见的宽度是多少像素？ - 酸梅干超人的回答 - 知乎<br><a href="https://www.zhihu.com/question/21042513/answer/287207544" target="_blank" rel="noopener">https://www.zhihu.com/question/21042513/answer/287207544</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/zheng-ze-biao-da-shi/"/>
      <url>/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>在 JavaScript中，正则表达式也是对象。这些模式被用于<code>RegExp</code> 的 exec 和 test 方法, 以及 <code>String</code> 的 match、matchAll、replace、search 和 split 方法</p><h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>可以通过两种方式来创建正则表达式</p><ul><li>字面量方式<br>let reg = /\d/g</li><li>构造函数方式(传入一个字符串)<br>let reg = new RegExp(“”)<br>两者的区别：1&gt; 字面量不可以进行变量的拼接，而实例的方式则可以 2&gt; 字面量中\d就代表数字，而实例中则需要对\进行转义，需要写成\d<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"jim"</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^\\d+"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\\d$"</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span></code></pre><h2 id="正则中的特殊字符"><a href="#正则中的特殊字符" class="headerlink" title="正则中的特殊字符"></a>正则中的特殊字符</h2>^ 匹配输入的开始。当 ‘^’ 作为第一个字符出现在一个字符集合模式时，代表反义<br>$ 匹配输入的结束。如果多行标示被设置为 true，那么也匹配换行符前的位置。</li></ul><ul><li>匹配前一个表达式 0 次或多次。等价于 {0,}。</li></ul><ul><li>匹配前面一个表达式 1 次或者多次。等价于 {1,}。<br>? 匹配前面一个表达式 0 次或者 1 次。等价于 {0,1}。如果紧跟在任何量词 <em>、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。还用于先行断言中<br>. （小数点）默认匹配除换行符之外的任何单个字符。如果 s (“dotAll”) 标志位被设为 true，它也会匹配换行符。<br>(x) 它会匹配 ‘x’ 并且记住匹配项。其中括号被称为捕获括号。<br>\n 匹配一个换行符<br>\r    匹配一个回车符<br>{n} n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。<br>[xyz] 一个字符集合。匹配方括号中的任意字符，包括转义序列。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（</em>）这样的特殊符号在一个字符集中没有特殊的意义。<br>[^xyz] 一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。<br>[\b] 匹配一个退格(U+0008)。（不要和\b混淆了。）<br>\b 匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。<br>\B 匹配一个非单词边界。<br>\d 匹配一个数字。等价于[0-9]。<br>\D 匹配一个非数字字符。等价于[^0-9]。<br>\s 匹配一个空白字符，包括空格、制表符、换页符和换行符。<br>\S 匹配一个非空白字符<br>\w 匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]<br>\W 匹配一个非单字字符。等价于 [^A-Za-z0-9_]。<br>/^[+-]?[1-9]+.?\d+/</li></ul><h2 id="分组在正则表达式中的作用"><a href="#分组在正则表达式中的作用" class="headerlink" title="()分组在正则表达式中的作用"></a>()分组在正则表达式中的作用</h2><ul><li>分组可以改变 | 符号的优先级<br>let reg = /^18|19$/ 这个正则表达式可以匹配  ‘18 19 181 1819 819 189 ‘等等<br>可以使用分组来让它只匹配18 或者19 /^(18|19)$/ <h2 id="正则有关的方法"><a href="#正则有关的方法" class="headerlink" title="正则有关的方法"></a>正则有关的方法</h2><h3 id="RegExp-prototype-exec"><a href="#RegExp-prototype-exec" class="headerlink" title="RegExp.prototype.exec()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noopener">RegExp.prototype.exec()</a></h3>exec() 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。<br>在设置了 global 或 sticky 标志位的情况下（如 /foo/g or /foo/y），JavaScript RegExp 对象是有状态的。他们会将上次成功匹配后的位置记录在 lastIndex 属性中。使用此特性，exec() 可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配），而相比之下， String.prototype.match() 只会返回匹配到的结果。<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex">/quick\s(brown).+?(jumps)/ig</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'The Quick Brown Fox Jumps Over The Lazy Dog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// result 是个数组，第一项代表匹配的全部字符串，这里是"Quick Brown Fox Jumps",第二项和第三项是括号中的分组捕获，这里是"Brown""Jumps",还有一个index属性，代表匹配到的字符位于原始字符串的基于0的索引值，这里是4，还有input属性，代表原始字符串。</span><span class="token comment" spellcheck="true">//由于加了g flag,此时re上的lastIndex属性会得到更新，它代表下一次匹配开始的位置，这里是25，再次匹配的时候会返回null。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//循环匹配并提取所有匹配项</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"jim2016tom2017jack2019"</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回结果和上面的arr一样，只需要执行一次即可，上面要循环三次，但match无法捕获分组中的匹配项，exec则可以。</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"jim2016tom2017jack2019"</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span></code></pre><h3 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">String.prototype.replace()</a></h3>var newStr = str.replace(regexp|substr, newSubstr|function)<br>当第二个参数是function时候，正则表达式每次匹配到要进行替换的字符串，function都会调用一次返回替换值，function传入的参数和exec方法返回的数组是一致的，相当于把exec方法返回的数组的每一项分别传了进去，第一项代表匹配的字符串，后续几项分别是捕获组捕获的内容，然后是index(偏移值),input(原始字符串)<h2 id="正则的贪婪性"><a href="#正则的贪婪性" class="headerlink" title="正则的贪婪性"></a>正则的贪婪性</h2>在量词修饰符后面加?来去除贪婪匹配 (+?)<h2 id="在正则中的作用"><a href="#在正则中的作用" class="headerlink" title="?在正则中的作用"></a>?在正则中的作用</h2></li><li>/5\d?/ 表示出现一个数字或者不出现</li><li>/5\d+?/ 取消捕获时候的贪婪性</li><li>/(?:\d{2})/ 分组中?:表示只匹配，不捕获，即使用exec方法的时候不捕获到数组中</li><li><h2 id="正则练习"><a href="#正则练习" class="headerlink" title="正则练习"></a>正则练习</h2><h3 id="匹配有效数字"><a href="#匹配有效数字" class="headerlink" title="匹配有效数字"></a>匹配有效数字</h3></li></ul><p>+13.02 -12.73 0 18 12.0 等等<br>let  reg = /^[+-]?(\d|([1-9]\d+))(.\d+)?$/</p><h3 id="匹配18-65年龄段"><a href="#匹配18-65年龄段" class="headerlink" title="匹配18-65年龄段"></a>匹配18-65年龄段</h3><p>let reg = /^(1[89]|[2-5]\d|6[0-5])$/<br>reg.test(‘23’)</p><h3 id="验证邮箱-简易"><a href="#验证邮箱-简易" class="headerlink" title="验证邮箱(简易)"></a>验证邮箱(简易)</h3><p>let reg = /^[\w.-]+@[0-9a-zA-Z]+(.[A-Za-z]{2,4}){1,2}$/</p><h3 id="中国标准真实姓名-2-4位汉字"><a href="#中国标准真实姓名-2-4位汉字" class="headerlink" title="中国标准真实姓名(2-4位汉字)"></a>中国标准真实姓名(2-4位汉字)</h3><p>let reg = /^[\u4e00-\u9fa5]{2,4}$/<br>中国汉字Unicode编码范围</p><h3 id="身份证号码"><a href="#身份证号码" class="headerlink" title="身份证号码"></a>身份证号码</h3><p>前两位代表省份，接着四位代表市区县 中间代表年月日，接着两位无意义，倒数第二位奇数代表男，偶数代表女，最后一位可能是数字也可能是大写X<br>let reg = /^(\d{2})(\d{4})(\d{4})(\d{2})(\d{2})(\d{2})(\d)(\d|X)$/</p><h3 id="找出一个字符串中出现次数最多的字符"><a href="#找出一个字符串中出现次数最多的字符" class="headerlink" title="找出一个字符串中出现次数最多的字符"></a>找出一个字符串中出现次数最多的字符</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"a firefox jumps over a box"</span><span class="token comment" spellcheck="true">//1.定义一个对象用来存储字符串中每个字母出现的次数</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[a-z]/gi</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> val <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    obj<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">++</span>obj<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token punctuation">:</span> obj<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.获取最多出现的次数</span><span class="token comment" spellcheck="true">//用假设法，先假设最多次数为0，再不断的更新这个变量</span><span class="token keyword">let</span> maxNum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">></span> maxNum <span class="token operator">?</span> maxNum <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//3.根据maxNum得到key,保存到一个数组中</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> maxNum <span class="token operator">?</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`字符串中出现次数最多的字符是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,出现了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>maxNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次`</span></span><span class="token punctuation">)</span></code></pre><h3 id="模板引擎基本原理"><a href="#模板引擎基本原理" class="headerlink" title="模板引擎基本原理"></a>模板引擎基本原理</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"Hello {0} , I am {1}"</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'lee'</span><span class="token punctuation">]</span><span class="token keyword">let</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/{(\d+)}/g</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//"Hello world , I am lee"</span></code></pre><h3 id="解析Url"><a href="#解析Url" class="headerlink" title="解析Url"></a>解析Url</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"http://baidu.com?name=lee&amp;age=12&amp;city=guangzhou"</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/([^=?&amp;]+)=([^=?&amp;]+)/g</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>url<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//{name: "lee", age: "12", city: "guangzhou"}</span></code></pre><h3 id="解析字符串日期"><a href="#解析字符串日期" class="headerlink" title="解析字符串日期"></a>解析字符串日期</h3><p>将 “2020-2-20 22:12:33” 转换成 2020年2月20日 22时12分33秒</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> timeStr <span class="token operator">=</span> <span class="token string">"2020-2-20 22:12:33"</span><span class="token comment" spellcheck="true">//第一步提取 年月日时分秒</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myFormateTime <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^(\d{4})[-/](\d{1,2})[/-](\d{1,2}) +(\d{1,2}):(\d{1,2}):(\d{1,2})$/g</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//类数组转数组并提取小分组</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>        arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//定义模板字符串</span>    <span class="token keyword">let</span> strTem <span class="token operator">=</span> <span class="token template-string"><span class="token string">`{0}年{1}月{2}日 {3}时{4}分{5}秒`</span></span>    <span class="token keyword">let</span> newTime <span class="token operator">=</span> strTem<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/{(\d+)}/g</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> val <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">[</span>val<span class="token punctuation">]</span>        result<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> result<span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span> result <span class="token punctuation">:</span> <span class="token keyword">null</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newTime<span class="token punctuation">}</span>timeStr<span class="token punctuation">.</span><span class="token function">myFormateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>build-hexo-theme</title>
      <link href="/build-hexo-theme/"/>
      <url>/build-hexo-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="iconfont应用"><a href="#iconfont应用" class="headerlink" title="iconfont应用"></a>iconfont应用</h2><p>下载的iconfont在style中引入<br><code>@import &quot;iconfont/iconfont.css&quot;</code><br><code>&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;</code></p><h2 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h2><h3 id="SELECTORS"><a href="#SELECTORS" class="headerlink" title="SELECTORS"></a>SELECTORS</h3><p>Parent Reference <code>&amp;:hover{}</code></p><p>参考链接：<br><a href="https://favicon.io/" target="_blank" rel="noopener">网站favicon</a><br><a href="https://cssgenerator.org/" target="_blank" rel="noopener">css生成器</a><br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>responsive web design</title>
      <link href="/responsive-web-design/"/>
      <url>/responsive-web-design/</url>
      
        <content type="html"><![CDATA[<ul><li>容器块级元素自适应<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>  <span class="token selector">width<span class="token pseudo-class">:70</span>%;//    宽度自适应屏幕，70%  max-width<span class="token pseudo-class">:980px</span>; // 限定最大宽度  min-width<span class="token pseudo-class">:320px</span>; //  margin: 0 auto; //居中  img</span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>       //自适应父元素container,图片高度会自己调节，但是当宽度大于图片自身尺寸之后，会拉伸图片，所以推荐写成<span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>这样当宽度超过图片自身宽度时图片不再变宽，就不会降低图片显示质量，它也能很好的自适应屏幕尺寸变小的情况。      <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>      //图片默认inline  <span class="token punctuation">}</span></code></pre></li></ul><p>}</p><pre><code>- rem 单位：继承自html元素的font-size，一般默认16px```csshtml{    font-size:62.5%;     //默认字体如果16px,则html元素的font-size现在为10px;    //不推荐}</code></pre><ul><li><p>em 单位：如果父元素没有规定font-size，它会一直往上搜素直到body元素,继承body元素的font-size，一般默认16px.</p></li><li><p>如何选择字体单位<br>  general rule of thumb:</p><ul><li>font-size: rem;</li><li>padding and margin: em; //这里有一个坑，就是em一般是参考父元素的font-size，但当涉及到padding和margin的时候，它是以自身元素的font-size为基准的。</li><li>width：em or percentage</li></ul></li><li><p>media query</p><pre class=" language-css"><code class="language-css"><span class="token property">syntax</span><span class="token punctuation">:</span><span class="token atrule"><span class="token rule">@media</span> media-type and <span class="token punctuation">(</span>media-features<span class="token punctuation">)</span></span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>// 媒体查询顺序很重要，以下写法会导致 第一个媒体查询不起作用，会被后一个覆盖掉。当resize了之后，css会重新进行渲染，从头至尾走一步css,只要规则匹配，后面的就会覆盖掉前面的，所以媒体查询一般都写在最后面。<span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>600px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">//当屏幕宽度大于等于600px时候  body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>UI设计先从移动端开始，小屏幕到大屏幕考虑。小屏幕都是竖着从上往下排列，等到屏幕宽度变大之后来一个 media query(min-width) 即可，这样可以少些好多代码</p></li><li><p>如果页面最先展现 图片 ，小标题来展现一些 info 信息，html 结构也应该先写标题，段落(用于展现info)，保证在没有css加载的时候逻辑顺序正确，通过css flex-box 中的order调整视觉上的布局。</p></li><li><p>图片处理技巧<br>如果想调整图片大小<br>img{<br>  width:100%<br>  min-height:200px;<br>  object-fit: cover;<br>  //这个会按比例放大图片，并进行裁切以适应容器<br>  object-position:left/right //调整图片显示位置<br>}</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitbookinstall</title>
      <link href="/gitbookinstall/"/>
      <url>/gitbookinstall/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitbook安装"><a href="#Gitbook安装" class="headerlink" title="Gitbook安装"></a>Gitbook安装</h1><h2 id="gitbook-简介"><a href="#gitbook-简介" class="headerlink" title="gitbook 简介"></a><a href="https://baike.baidu.com/item/GitBook" target="_blank" rel="noopener">gitbook 简介</a></h2><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br>GitBook支持输出多种文档格式：</p><ul><li>静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上</li><li>PDF：需要安装gitbook-pdf依赖</li></ul><p>使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md </p><h2 id="gitbook-cli"><a href="#gitbook-cli" class="headerlink" title="gitbook-cli"></a>gitbook-cli</h2><p>gitbook 命令行工具，用来操控gitbook</p><pre class=" language-shell"><code class="language-shell">npm install gitbook-cli -g</code></pre><p>执行 <code>git init</code> 时会自动安装gitbook,耗时较长，请耐心等待<br>常用命令</p><pre class=" language-shell"><code class="language-shell">#Create the directories and files for a book from its SUMMARY.md file (if existing) usinggitbook init#You can serve a repository as a book using:gitbook serve#Or simply build the static website using:gitbook build</code></pre><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><ul><li>不再使用git作为版本管理工具</li><li>可以在gitbook space 中导入GitHub的仓库</li><li>不再支持 gitbook-cli 工具了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html" target="_blank" rel="noopener">https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html</a><br><a href="https://docs.gitbook.com/getting-started/quick-start" target="_blank" rel="noopener">https://docs.gitbook.com/getting-started/quick-start</a><br><a href="https://docs.gitbook.com/resources/gitbook-legacy/v2-differences" target="_blank" rel="noopener">https://docs.gitbook.com/resources/gitbook-legacy/v2-differences</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to install ss</title>
      <link href="/ssinstall/"/>
      <url>/ssinstall/</url>
      
        <content type="html"><![CDATA[<p>Xshell6 远程登录 vps (OS:CentOS8)</p><a id="more"></a><h2 id="检测pip"><a href="#检测pip" class="headerlink" title="检测pip"></a>检测pip</h2><p>whereis pip <br><br>pip: /usr/bin/pip3.6<br><br>这个版本支持 chacha20-ietf-poly1305加密方式</p><p><code>pip3.6 install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</code></p><h2 id="安装-libsodium-包"><a href="#安装-libsodium-包" class="headerlink" title="安装 libsodium 包"></a><a href="https://www.24kplus.com/linux/287.html" target="_blank" rel="noopener">安装 libsodium 包</a></h2><p>现在ss服务端还启动不了，需要安装libsodium</p><pre class=" language-shell"><code class="language-shell">cd /homewget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gztar -zxf libsodium-1.0.18-stable.tar.gzcd libsodium-stable#编译安装./configure --prefix=/usrmake && make checksudo make installsudo ldconfig</code></pre><p>解决错误一： configure: error: no acceptable C compiler found in $PATH </p><p>yum install gcc</p><p>解决错误二： config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. </p><p>yum install make -y</p><h2 id="配置ss服务端"><a href="#配置ss服务端" class="headerlink" title="配置ss服务端"></a>配置ss服务端</h2><p>whereis ssserver<br><br>ssserver: /usr/local/bin/ssserver<br></p><h3 id="创建shadowsocks启动配置文件"><a href="#创建shadowsocks启动配置文件" class="headerlink" title="创建shadowsocks启动配置文件"></a>创建shadowsocks启动配置文件</h3><p>vim /etc/shadowsocks.conf</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>     <span class="token property">"server_port"</span><span class="token operator">:</span><span class="token number">10443</span><span class="token punctuation">,</span>    <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"chacha20-ietf-poly1305"</span><span class="token punctuation">}</span></code></pre><p>server_port:服务器监听端口</p><p>password:要和客户端ss密码一致</p><p>method:加密方式和客户端一致</p><h3 id="开启端口号"><a href="#开启端口号" class="headerlink" title="开启端口号"></a>开启端口号</h3><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --permanent --add-port=10443/tcp &&firewall-cmd --reload#查看开启的端口号firewall-cmd --zone=public --permanent --list-ports</code></pre><h3 id="将ss添加到Systemd-服务管理中"><a href="#将ss添加到Systemd-服务管理中" class="headerlink" title="将ss添加到Systemd 服务管理中"></a>将ss添加到Systemd 服务管理中</h3><p>vim /etc/systemd/system/shadowsocks.service</p><pre class=" language-service"><code class="language-service">[Unit]Description=shadowsocks daemon[Service]ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks.conf Restart=always[Install]WantedBy=graphical.target</code></pre><p>开启服务<br><br>systemctl enable shadowsocks</p><p>启动服务<br><br>systemctl start shadowsocks</p><p>检查 shadowsocks 服务是否已成功启动<br><br>systemctl status shadowsocks -l</p><h2 id="CentOS8-开启-BBR"><a href="#CentOS8-开启-BBR" class="headerlink" title="CentOS8 开启 BBR"></a><a href="https://nodeedge.com/centos8-bbr.html" target="_blank" rel="noopener">CentOS8 开启 BBR</a></h2><p>开启bbr</p><pre class=" language-shell"><code class="language-shell">echo "net.core.default_qdisc=fq" >> /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.confsysctl -p验证bbrsysctl -n net.ipv4.tcp_congestion_controllsmod | grep bbr</code></pre><h2 id="安装net-speeder"><a href="#安装net-speeder" class="headerlink" title="安装net-speeder"></a><a href="https://github.com/snooda/net-speeder" target="_blank" rel="noopener">安装net-speeder</a></h2><p>wget <a href="https://github.com/snooda/net-speeder/archive/master.zip" target="_blank" rel="noopener">https://github.com/snooda/net-speeder/archive/master.zip</a><br><br>unzip master.zip</p><p>安装epel 包<br><br>wget <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a><br><br>rpm -ivh epel-release-6-8.noarch.rpm</p><p>yum install libnet libpcap libnet-devel libpcap-devel</p><p>libpcap-devel现有的yum源匹配不到，到 <a href="https://centos.pkgs.org/8/centos-powertools-x86_64/libpcap-devel-1.9.0-3.el8.i686.rpm.html" target="_blank" rel="noopener">centos.pkgs.org</a> 可以找到安装<br>直接执行 <code>dnf --enablerepo=PowerTools install libpcap-devel</code> 即可安装</p><p>编译前还要安装一个包</p><pre class=" language-shell"><code class="language-shell">yum install libnet-devel编译cd net-speeder-master/sh build.sh查看网卡信息(ens3)ip address关闭tsoethtool -K ens3 tso off</code></pre><p>开启单边加速(前台运行)<br><br>./net_speeder ens3 “ip”</p><p>开启单边加速(后台运行)<br>vim /etc/systemd/system/netspeeder.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=netspeeder<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec=<span class="token number">0</span>ExecStart=/home/net-speeder-master/net_speeder ens3  <span class="token string">"ip"</span> <span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target</code></pre><p>systemctl enable netspeeder<br><br>启动服务<br><br>systemctl start netspeeder<br><br>systemctl status netspeeder</p><h2 id="vps上安装kcptun"><a href="#vps上安装kcptun" class="headerlink" title="vps上安装kcptun"></a><a href="https://blog.kuoruan.com/102.html" target="_blank" rel="noopener">vps上安装kcptun</a></h2><p>服务端和客户端用同一个版本<br>在GitHub releas上找到kcptun包，使用wget命令下载到vps上</p><pre class=" language-shell"><code class="language-shell">cd /homemkdir kcptuncd kcptun wget https://github.com/xtaci/kcptun/releases/download/v20200103/kcptun-linux-amd64-20200103.tar.gz# 解压tar -zxf kcptun-linux-amd64-20200103.tar.gz</code></pre><p>创建启动配置文件<br>vim kcptun.conf</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"crypt"</span><span class="token operator">:</span> <span class="token string">"salsa20"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"fast2"</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span>"<span class="token operator">:</span><span class="token number">29900</span>"<span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span><span class="token string">"127.0.0.1:10443"</span><span class="token punctuation">,</span>    <span class="token property">"nocomp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"datashard"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token property">"parityshard"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span></code></pre><p>上面的配置一定要和客户端的一致，key是密码，listen是客户端访问服务端时候监听的端口<br>target是要加速的vps上的服务，它通信的是vps上的ss，所以ip为127.0.0.1，端口号就是ss服务监听的的端口号<br>服务端kcptun 和 ss 各自提供自己的服务，各自监听自己的端口 ，kcptun 提供 ss端口的加速服务</p><h3 id="开启端口号-这个用udp协议"><a href="#开启端口号-这个用udp协议" class="headerlink" title="开启端口号(这个用udp协议)"></a>开启端口号(这个用udp协议)</h3><p> firewall-cmd –zone=public –permanent –add-port=29900/udp <br><br> firewall-cmd –reload</p><p>创建服务脚本<br>vim /etc/systemd/system/kcptun.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=kcptun<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec=<span class="token number">0</span>ExecStart=/home/kcptun/server_linux_amd64 -c  /home/kcptun/kcptun.conf<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target</code></pre><p>systemctl enable kcptun<br><br>启动服务<br><br>systemctl start kcptun<br><br>systemctl status kcptun</p><h2 id="客户端-windows7-安装kcptun"><a href="#客户端-windows7-安装kcptun" class="headerlink" title="客户端(windows7)安装kcptun"></a>客户端(windows7)安装kcptun</h2><p>由于没有提供GUI图形界面，解压出来的只有.exe文件，直接执行没有办法传入配置<br>客户端 ss 访问 kcptun客户端，然后kcptun 访问vps上的kcptun server端</p><h3 id="创建客户端exe文件的控制VBScript脚本"><a href="#创建客户端exe文件的控制VBScript脚本" class="headerlink" title="创建客户端exe文件的控制VBScript脚本"></a>创建客户端exe文件的控制VBScript脚本</h3><p>vim run.vbs</p><pre class=" language-vbs"><code class="language-vbs">Dim RunKcptunSet fso = CreateObject("Scripting.FileSystemObject")Set WshShell = WScript.CreateObject("WScript.Shell")'获取文件路径currentPath = fso.GetFile(Wscript.ScriptFullName).ParentFolder.Path & "\"'配置文件路径configFile = currentPath & "client-config.json"'日志文件logFile = currentPath & "kcptun.log"'软件运行参数exeConfig = currentPath & "client_windows_amd64.exe -c " & configFile'拼接命令行cmdLine = "cmd /c " & exeConfig & " > " & logFile & " 2>&1"'启动软件WshShell.Run cmdLine, 0, False'等待1秒'WScript.Sleep 1000'打印运行命令'Wscript.echo cmdLineSet WshShell = NothingSet fso = Nothing'退出脚本WScript.quit</code></pre><p>创建启动配置脚本</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"localaddr"</span><span class="token operator">:</span> "<span class="token operator">:</span><span class="token number">12948</span>"<span class="token punctuation">,</span>    <span class="token property">"remoteaddr"</span><span class="token operator">:</span> <span class="token string">"10.10.10.10:29900"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"crypt"</span><span class="token operator">:</span> <span class="token string">"salsa20"</span><span class="token punctuation">,</span>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"fast2"</span><span class="token punctuation">,</span>    <span class="token property">"conn"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"autoexpire"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"mtu"</span><span class="token operator">:</span> <span class="token number">1350</span><span class="token punctuation">,</span>    <span class="token property">"sndwnd"</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>    <span class="token property">"rcvwnd"</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token property">"datashard"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token property">"parityshard"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token property">"dscp"</span><span class="token operator">:</span> <span class="token number">46</span><span class="token punctuation">,</span>    <span class="token property">"nocomp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"acknodelay"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"nodelay"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"interval"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token property">"resend"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"nc"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"sockbuf"</span><span class="token operator">:</span> <span class="token number">4194304</span><span class="token punctuation">,</span>    <span class="token property">"keepalive"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><p>localaddr为 :12948,本地监听端口，供ss访问<br><br>key为password,需和服务端保持一致<br><br>remoteaddr为vps的ip地址以及vps上kcptun监听的端口<br></p><h3 id="客户端ss配置"><a href="#客户端ss配置" class="headerlink" title="客户端ss配置"></a>客户端ss配置</h3><p>服务器 IP 填写本机：127.0.0.1<br><br>服务器端口填写：12948</p><p>双击run.vbs启动测试。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
