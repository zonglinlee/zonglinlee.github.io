<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js-basics</title>
      <link href="/js-basics/"/>
      <url>/js-basics/</url>
      
        <content type="html"><![CDATA[<h2 id="DOMTokenList-interface"><a href="#DOMTokenList-interface" class="headerlink" title="DOMTokenList interface"></a>DOMTokenList interface</h2><p>The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by <code>Element.classList</code>.</p><div class="class1 class2"></div>原生dom方法来toggle一个类：`div.classList.toggle("class1")`<hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>formatting contexts</title>
      <link href="/bfc/"/>
      <url>/bfc/</url>
      
        <content type="html"><![CDATA[<h2 id="formatting-contexts-types"><a href="#formatting-contexts-types" class="headerlink" title="formatting contexts types"></a>formatting contexts types</h2><p>Everything on a page is part of a formatting context, or an area which has been defined to lay out content in a particular way. A block formatting context (BFC) will lay child elements out according to block layout rules, a flex formatting context will lay its children out as flex items, etc. Each formatting context has specific rules about how layout behaves when in that context.</p><ul><li>block formatting contexts</li><li>inline formatting contexts</li><li>flex formatting contexts</li></ul><h2 id="Creating-a-new-block-formatting-context"><a href="#Creating-a-new-block-formatting-context" class="headerlink" title="Creating a new block formatting context"></a>Creating a new block formatting context</h2><p>html 元素是最外层初始的一个 block formatting contexts.This means that every element inside the <html> element’s block is laid out according to normal flow following the rules for block and inline layout.</p><ul><li>elements made to float using float</li><li>absolutely positioned elements (including position: fixed or position: sticky)</li><li>elements with display: inline-block</li><li>block elements where overflow has a value other than visible</li><li>elements with display: flow-root or display: flow-root list-item</li><li>flex items</li><li>grid items</li></ul><h2 id="Explicitly-creating-a-BFC-using-display-flow-root"><a href="#Explicitly-creating-a-BFC-using-display-flow-root" class="headerlink" title="Explicitly creating a BFC using display: flow-root"></a>Explicitly creating a BFC using display: flow-root</h2><h2 id="Inline-formatting-contexts"><a href="#Inline-formatting-contexts" class="headerlink" title="Inline formatting contexts"></a>Inline formatting contexts</h2><p>Inline formatting contexts exist inside other formatting contexts and can be thought of as the context of a paragraph. </p><p>css盒模型并不完全适用于inline formatting contets, In a horizontal writing mode line, horizontal padding, borders and margin will be applied to the element and push the text away left and right. However, margins above and below the element will not be applied. Vertical padding and borders will be applied but may  overlap content above and below as, in the inline formatting context, the line boxes will not be pushed apart by padding and borders.</p><h2 id="In-Flow-and-Out-of-Flow"><a href="#In-Flow-and-Out-of-Flow" class="headerlink" title="In Flow and Out of Flow"></a>In Flow and Out of Flow</h2><h3 id="Taking-an-item-out-of-flow"><a href="#Taking-an-item-out-of-flow" class="headerlink" title="Taking an item out of flow"></a>Taking an item out of flow</h3><p>All elements are in-flow apart from:</p><ul><li>floated items</li><li>items with position: absolute (including position: fixed which acts in the same way)</li><li>the root element (html)</li></ul><p>Out of flow items create a new Block Formatting Context (BFC) and therefore everything inside them can be seen as a mini layout, separate from the rest of the page. The root element therefore is out of flow, as the container for everything in our document, and establishes the Block Formatting Context for the document.</p><h2 id="the-display-css-property"><a href="#the-display-css-property" class="headerlink" title="the display css  property"></a>the <code>display</code> css  property</h2><p>Formally, the display property sets an element’s inner and outer display types. The outer type sets an element’s participation in flow layout; the inner type sets the layout of children.</p><p>The Level 3 specification details two values for the display property — enabling the specification of the outer and inner display type explicitly — but this is not yet well-supported by browsers.<br>The <display-legacy> methods allow the same results with single keyword values, and should be favoured by developers until the two keyword values are better supported. For example, using two values you might specify an inline flex container as follows:</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">//This can currently be specified using a single value.<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-basics</title>
      <link href="/css-basics/"/>
      <url>/css-basics/</url>
      
        <content type="html"><![CDATA[<ul><li><p>css盒模型中以 top-left为坐标原点</p></li><li><p>css rotate(deg) deg正为clockwise deg负为counter-clockwise,transform-origin默认值为：50% 50% 0</p></li><li><p>CSS object model<br>There are four standard coordinate systems</p><ul><li>Offset ：the mouse event’s offsetX and offsetY properties</li><li>Client : the MouseEvent.clientX and MouseEvent.clientY</li><li>Page :Mouse events’ pageX and pageY properties </li><li>Screen :The MouseEvent.screenX and MouseEvent.screenY properties </li></ul></li><li><p>base-line: align-items:base-line;//所有flex items 第一行文字底部对齐</p></li><li><p>hover,active顺序<br>a:hover,a:focus{<br>  //这两个最好一块写<br>  color:pink;<br>}</p></li><li><p>如果父元素display:flex,子元素display：none; position:absolute都不算在flex-items里面</p></li></ul><p>The unset CSS keyword resets a property to its inherited value if it inherits from its parent, and to its initial value if not.</p><p>The initial CSS keyword applies the initial (or default) value of a property to an element. This initial value is set by the browser. </p><p>The inherit CSS keyword causes the element for which it is specified to take the computed value of the property from its parent element.</p><p>display:none<br>Turns off the display of an element so that it has no effect on layout (the document is rendered as though the element did not exist). All descendant elements also have their display turned off.<br>To have an element take up the space that it would normally take, but without actually rendering anything, use the visibility property instead.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/docker/"/>
      <url>/docker/</url>
      
        <content type="html"><![CDATA[<p>docker架构<br>Linux 容器（Linux Containers，缩写为 LXC）。<br>docker 是基于 Linux容器的一种封装<br>docker启动了之后，本地 docker host(运行一个docker 后台服务，里面有docker containers和docker images)<br>docker container 是由 docker image 实例化产生的，比如有一个node镜像(image),可以从这个node镜像同时生成多个实例(container)</p><p>阿里 centos7 按时付费 下安装 docker<br>yum install -y docker-io<br>systemctl start docker (启动本地docker服务)<br>docker info<br>docker search node   (搜寻node的docker镜像)<br>docker pull node (从官网docker镜像仓库中拉取镜像到服务器)<br>docker run node (会运行node这个镜像名,生成一个不完整的Linux运行环境)<br>docker ps -a (查看所有运行的container)<br>docker exec -it containerID  /bin/bash (进入docker容器)</p><p>端口映射：比如我们的vps主机上运行了一个nginx的docker container，我们<code>curl http://localhost</code>是访问的此vps上的80端口，但是vps本身没有启动nginx服务，我们需要将请求映射到docker container中，即当有请求访问80端口的时候，我们转交给docker 中的nginx服务来处理</p><h2 id="制作docker-image"><a href="#制作docker-image" class="headerlink" title="制作docker image"></a>制作docker image</h2><p>docker image是一层层加上去的，你可以基于别人的镜像叠加创建你自己的image<br>docker inspect node (查看镜像)</p><p>Dockerfile 文件(文件名就叫做Dockerfile,docker 打包的时候就会找这个文件，根据里面的配置来打包)<br>比如我们在vps 上创建了一个app文件夹<br>|_ _ <em>app(文件夹)<br>|       |</em> <em>server.js(一个express服务器)<br>|       |</em> <em>package.json<br>|</em> _ _Dockerfile</p><pre class=" language-shell"><code class="language-shell">#Dockerfile文件内容FROM node   (由node镜像演变而来)COPY ./app /app  (将当前目录下的app文件夹内的文件拷贝到镜像中根目录下的app文件夹中)WORKDIR /app    (定义镜像中的工作目录)RUN npm install  (打包阶段会执行此命令，安装项目依赖并打包到镜像中)EXPOSE 3000     (暴露镜像中的端口)CMD node server.js (运行镜像实例时候会执行此命令)</code></pre><p>在当前目录下执行<code>docker build -t zonglinlee/node-server:latest  .</code><br>打包镜像，-t 用来指定镜像名称， . 表示在当前目录下找Dockerfile文件</p><p>打包完成之后运行镜像<br><code>docker run -p 80:3000 -it zonglinlee/node-server</code></p><h2 id="发布image"><a href="#发布image" class="headerlink" title="发布image"></a>发布image</h2><p>docker login  (登录docker服务器仓库)<br>docker push zonglinlee/node-server (只会将新添加的层推送到服务器，其余的是基于node扩展的，node的部分不会推送)</p><h2 id="指定数据盘"><a href="#指定数据盘" class="headerlink" title="指定数据盘"></a>指定数据盘</h2><p>在执行 <code>docker rm containerID</code> 之后，会销毁容器，此时容器中的所有数据就丢失了<br>如果我们想在容器销毁之后还有数据备份在vps上，可以通过 -v 或 –volume 指定数据盘，此相当于一个硬链接，链接container中的一个文件夹到本地vps上，我们在所有container中更改的东西都会同样复制一份在vps上，并且container销毁后，本地主机上的还存在<br><code>docker run -v ~/logger:/mnt -it ubuntu /bin/bash</code><br>~/logger 指定的是vps上的文件夹<br>/mnt      指定的是container中的数据盘<br>此时如果执行 <code>docker inspect containerID</code><br>会看到有个 Mounts 属性里面有source和destination字段，分别指的是vps上的源目录和container中的目标目录，即source为 ~/logger,destination 为 /mnt</p><pre class=" language-shell"><code class="language-shell">cd ~ mkdir blogcd blogmkdir nodeservermkdir nginxcd nodeservervim Dockerfile# nodeserver 下的DockerfileFROM nodeRUN npm i express-generator -gRUN express appWORKDIR appRUN npm installEXPOSE 3000CMD ["npm","start"]cd ../nginxvim nginx.conf# nginx.conf 文件events{      use epoll;  }http {  server {    listen 80;                  #nginx监听80端口，转交 / 给blog服务，即http服务器。    location / {      proxy_pass http://blog:3000;   #这里的blog主机名就是docker-compose.yml中配置的服务    }  }}vim Dockerfile# nginx 下的DockerfileFROM nginxCOPY nginx.conf /etc/nginx/nginx.confEXPOSE 80cd ../vim docker-compose.yml # docker-compose.yml文件#这个版本号很重要，它对应docker的版本，一定要去官网上查看，否则会报错。# https://docs.docker.com/compose/compose-file/version: '3.6'services:               #一共有两个服务  blog  和 nginx服务   blog:     build: nodeserver    #这个express会开启一个localhost:3000的http服务器     ports:      - "3000:3000"    #端口映射   nginx:     build: nginx     ports:      - "80:80"# 启动服务pip install docker-composedocker-compose up -d# 查看服务启动是否成功curl  http://locolhost:80  #会返回 `welcome to express` html</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h2 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a><a href="https://blog.phpgao.com/git_submodule.html" target="_blank" rel="noopener">submodule</a></h2><p>submodule中文件变更了,在主工作目录中是没有办法add并commit的，分而治之，主模块提交主模块的，子模块提交自己的，子模块提交后，主模块会感知到，从而再在主模块中提交即可</p><h3 id="添加-submodule"><a href="#添加-submodule" class="headerlink" title="添加 submodule"></a>添加 <code>submodule</code></h3><p>将GitHub上这个模块添加到本地git仓库的 usr/plugins/ExternalTool 中作为一个submodule<br><code>git submodule add https://github.com/phpgao/ExternalTool.git   usr/plugins/BaiduSubmit</code><br>信息会被记录在 <code>.gitmodules</code> <code>.git/config</code> 两个文件中</p><h3 id="移除-submodule"><a href="#移除-submodule" class="headerlink" title="移除 submodule"></a>移除 <code>submodule</code></h3><p>首先我们反初始化,此时 .git/config 已被重写，BaiduSubmit的相关信息已经不存在了<br><code>git submodule deinit usr/plugins/BaiduSubmit</code><br>删除子模块和.gitmodules 文件中的相关信息<br><code>git rm usr/plugins/BaiduSubmit</code></p><h2 id="–allow-unrelated-histories"><a href="#–allow-unrelated-histories" class="headerlink" title="–allow-unrelated-histories"></a>–allow-unrelated-histories</h2><p>报错：fatal: refusing to merge unrelated histories ,合并不相关的历史记录<br><code>git pull origin master --allow-unrelated-histories</code></p><h2 id="远程合并到本地"><a href="#远程合并到本地" class="headerlink" title="远程合并到本地"></a>远程合并到本地</h2><p><code>git remote -v</code>     查询远程的代码版本</p><h3 id="直接合并"><a href="#直接合并" class="headerlink" title="直接合并"></a>直接合并</h3><p><code>git pull origin master</code> 拉取远端origin/master分支并合并到当前分支<br><code>git pull origin dev</code> 拉取远端origin/dev分支并合并到当前分支</p><h3 id="git-fetch-merge-需要手动删除分支"><a href="#git-fetch-merge-需要手动删除分支" class="headerlink" title="git fetch + merge(需要手动删除分支)"></a><code>git fetch + merge</code>(需要手动删除分支)</h3><p>拉取到本地并新建一个分支 然后 手动合并<br>在本地建立master1分支，并下载远端的origin/master分支到本地的master1分支中<br><code>git fetch origin master:master1</code><br>查看本地master1分支与当前分支的版本差异<br><code>git diff master1</code><br>合并本地分支master1到当前分支<br><code>git merge master1</code><br>删除本地分支master1<br><code>git branch -D master1</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap 入门</title>
      <link href="/bootstrap/"/>
      <url>/bootstrap/</url>
      
        <content type="html"><![CDATA[<h1 id="bootstrap-v4-4-入门"><a href="#bootstrap-v4-4-入门" class="headerlink" title="bootstrap v4.4 入门"></a>bootstrap v4.4 入门</h1><h2 id="使用bootstrap"><a href="#使用bootstrap" class="headerlink" title="使用bootstrap"></a>使用bootstrap</h2><h3 id="在head中引入css"><a href="#在head中引入css" class="headerlink" title="在head中引入css"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/#css" target="_blank" rel="noopener">在head中引入css</a></h3><h3 id="引入js"><a href="#引入js" class="headerlink" title="引入js"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/#js" target="_blank" rel="noopener">引入js</a></h3><p>bootstrap的js是基于jQuery开发的，有的组件需要js,有的不需要，所以可以参考官方文档，需要的时候再引入js文件，除了jQuery之外，还要引入proper.min.js,bootstrap.min.js,官方引入的是jQuery缩减版的，当然也支持jQuery完整版的。</p><h3 id="重要的几个规定"><a href="#重要的几个规定" class="headerlink" title="重要的几个规定"></a>重要的几个规定</h3><ul><li>HTML5 doctype必须声明<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li><li>响应式meta标签必须声明<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/introduction/#reboot" target="_blank" rel="noopener">reboot</a></h3><p>reboot 是基于normalize.css开发的一个运用于bootstrap的通用css样式设置，用来消除跨浏览器渲染的一些差异。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/browsers-devices/" target="_blank" rel="noopener">浏览器支持</a></h2><p>Bootstrap supports the latest, stable releases of all major browsers and platforms. On Windows, we support Internet Explorer 10-11 / Microsoft Edge.<br>如果需要支持ie8-9,请使用bootstrap 3<br>bootstrap use Autoprefixer to handle intended browser support via CSS prefixes, which uses Browserslist to manage these browser versions.<br>更多浏览器差异和bugs请查看官方文档。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// agent sniffing</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> nua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent  <span class="token keyword">var</span> isAndroid <span class="token operator">=</span> <span class="token punctuation">(</span>nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Android '</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'AppleWebKit'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Chrome'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isAndroid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'select.form-control'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'form-control'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span> <span class="token string">'100%'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="使用bootstrap-plugin"><a href="#使用bootstrap-plugin" class="headerlink" title="使用bootstrap plugin"></a>使用bootstrap plugin</h2><p>bootstrap插件都是基于jQuery开发的，所以jQuery必须在插件之前引入，可以在package.json文件中查看支持那个版本的jQuery。<br>可以在<code>js/dist/*.js</code>目录下引入单个bootstrap插件，也可以一次性引入所有插件bootstrap.js 或者bootstrap.min.js</p><h2 id="自定义bootstrap样式"><a href="#自定义bootstrap样式" class="headerlink" title="自定义bootstrap样式"></a><a href="https://getbootstrap.com/docs/4.4/getting-started/theming/" target="_blank" rel="noopener">自定义bootstrap样式</a></h2><p>添加自定义的 custom.scss 样式</p><pre class=" language-css"><code class="language-css">// 一：在custom<span class="token number">.</span>css中你可以引入全部的scss文件<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/bootstrap"</span><span class="token punctuation">;</span></span>//二：引入部分scss文件//required<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/functions"</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/variables"</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/mixins"</span><span class="token punctuation">;</span></span>// Optional<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"../node_modules/bootstrap/scss/reboot"</span><span class="token punctuation">;</span></span></code></pre><p>不使用package manager时候的目录结构<br>your-project/<br>├── scss<br>│   └── custom.scss<br>└── bootstrap/<br>    ├── js<br>    └── scss<br>使用package manager时候的目录结构<br>your-project/<br>├── scss<br>│   └── custom.scss<br>└── node_modules/<br>    └── bootstrap<br>        ├── js<br>        └── scss</p><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p>在<code>scss/_variables.scss</code>你可以找到所有的变量，默认变量以 <code>!default</code>开头，你可以在custom.scss文件中覆盖它，但要去掉 <code>!default</code> 前缀，有一些默认变量为 null ,它并不会生效，除非你在custom.scss文件中重新定义它。<br>自定义的变量写在引入默认变量之前。</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// Your variable overrides</span><span class="token property"><span class="token variable">$body-bg</span></span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$body-color</span></span><span class="token punctuation">:</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Bootstrap and its default variables</span><span class="token keyword">@import</span> <span class="token string">"../node_modules/bootstrap/scss/bootstrap"</span><span class="token punctuation">;</span></code></pre><h2 id="bootstrap-栅格系统"><a href="#bootstrap-栅格系统" class="headerlink" title="bootstrap 栅格系统"></a>bootstrap 栅格系统</h2><p>bootstrap提供了 3 种网格容器</p><ul><li>.container, which sets a max-width at each responsive breakpoint<br>  在extra-small(小于576px)才是100%，其余的断点都是固定宽度</li><li>.container-fluid, which is width: 100% at all breakpoints<br>  在所有断点下都是100%宽度</li><li>.container-{breakpoint}, which is width: 100% until the specified breakpoint<br>  .container-sm(small&gt;576px)/.container-md(medium&gt;768px)/.container-lg(large&gt;992px)/.container-xl(Extra large&gt;1200px)<br>bootstrap 基于 flexbox 构建了12列等宽的网格系统，可以自适应 5 种屏幕尺寸。</li></ul><p>Grid breakpoints are based on minimum width media queries, meaning they apply to that one breakpoint and all those above it (e.g., .col-sm-4 applies to small, medium, large, and extra large devices, but not the first xs breakpoint).</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --></span>  <span class="token comment" spellcheck="true">&lt;!-- 首先bootstrap会根据屏幕尺寸匹配meida query,如果在手机上打开，由于屏幕尺寸较小，md的媒体查询匹配不到，第一个div的col-md-8类匹配不到要添加的样式，所以它就是一个没有样式的div，宽度100%，第二个div匹配col-6类的样式，占据屏幕一半，等屏幕尺寸变大之后，两个div都匹配md下的媒体查询样式 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-md-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Columns are always 50% wide, on mobile and desktop --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ul><li>Use col-{breakpoint}-auto classes to size columns based on the natural width of their content.<code>&lt;div class=&quot;col-md-auto&quot;&gt;</code>类似于width:fit-content;</li><li>Rows are wrappers for columns. Each column has horizontal padding (called a gutter) for controlling the space between them. This padding is then counteracted on the rows with negative margins. This way, all the content in your columns is visually aligned down the left side.(Gutter width    30px ,15px on each side of a column)</li></ul><h3 id="Row-columns"><a href="#Row-columns" class="headerlink" title="Row columns"></a>Row columns</h3><p>Use the responsive <code>.row-cols-*</code> classes to quickly set the number of columns that best render your content and layout. Whereas normal .col-* classes apply to the individual columns (e.g., .col-md-4), the row columns classes are set on the parent .row as a shortcut.</p><h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a><a href="https://getbootstrap.com/docs/4.4/layout/grid/#alignment" target="_blank" rel="noopener">Alignment</a></h3><h4 id="Vertical-alignment"><a href="#Vertical-alignment" class="headerlink" title="Vertical alignment"></a>Vertical alignment</h4><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 应用于行，调整所有子元素位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 应用于列 调整单个子元素位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="Horizontal-alignment"><a href="#Horizontal-alignment" class="headerlink" title="Horizontal alignment"></a>Horizontal alignment</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-around<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-between<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="No-gutters"><a href="#No-gutters" class="headerlink" title="No gutters"></a>No gutters</h3><p>The gutters between columns in our predefined grid classes can be removed with .no-gutters. This removes the negative margins from .row and the horizontal padding from all immediate children columns.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row no-gutters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-6 col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-sm-6 .col-md-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Column-wrapping"><a href="#Column-wrapping" class="headerlink" title="Column wrapping"></a>Column wrapping</h3><p>If more than 12 columns are placed within a single row, each group of extra columns will, as one unit, wrap onto a new line.</p><h3 id="Column-breaks"><a href="#Column-breaks" class="headerlink" title="Column breaks"></a><a href="https://getbootstrap.com/docs/4.4/layout/grid/#no-gutters" target="_blank" rel="noopener">Column breaks</a></h3><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- Force next columns to break to new line --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>w-100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Reordering"><a href="#Reordering" class="headerlink" title="Reordering"></a>Reordering</h3><p>Use <code>.order-</code> classes for controlling the visual order of your content(<code>.order-1.order-md-2</code>), Includes support for 1 through 12 across all five grid tiers.<br>There are also responsive <code>.order-first</code> and <code>.order-last</code> classes that change the order of an element by applying order: -1 and order: 13 (order: $columns + 1), respectively.</p><h3 id="Offsetting-columns"><a href="#Offsetting-columns" class="headerlink" title="Offsetting columns"></a>Offsetting columns</h3><p>Move columns to the right using <code>.offset-md-*</code> classes.<code>.offset-md-4</code> moves <code>.col-md-4</code>over four columns.</p><h3 id="Margin-utilities"><a href="#Margin-utilities" class="headerlink" title="Margin utilities"></a>Margin utilities</h3><p>With the move to flexbox in v4, you can use margin utilities like <code>.mr-auto</code> to force sibling columns away from one another.</p><h3 id="Customizing-the-grid"><a href="#Customizing-the-grid" class="headerlink" title="Customizing the grid"></a>Customizing the grid</h3><p>Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. Change the number of tiers, the media query dimensions, and the container widths—then recompile.</p><h2 id="Utilities-for-layout"><a href="#Utilities-for-layout" class="headerlink" title="Utilities for layout"></a><a href="https://getbootstrap.com/docs/4.4/layout/utilities-for-layout/" target="_blank" rel="noopener">Utilities for layout</a></h2><p>Bootstrap includes dozens of utility classes for showing, hiding, aligning, and spacing content.</p><ul><li>Changing display(Visible only on sm    <code>.d-none .d-sm-block .d-md-none</code>)</li><li><a href="https://getbootstrap.com/docs/4.4/utilities/spacing/" target="_blank" rel="noopener">Margin and padding</a><br>Spacing utilities that apply to all breakpoints, from xs to xl, have no breakpoint abbreviation in them. </li><li>Toggle visibility(.visible or .invisible )<h3 id="Flexbox-options"><a href="#Flexbox-options" class="headerlink" title="Flexbox options"></a>Flexbox options</h3>不是所有的元素都是display：flex;如果要开启弹性盒子，添加<code>.d-flex</code> or one of the responsive variants (<code>.d-sm-flex</code>  <code>.d-inline-flex.</code>).</li></ul><p><code>.flex-row .flex-row-reverse</code> <code>.flex-column .flex-column-reverse</code><br><code>justify-content-start .justify-content-end .justify-content-center</code><br><code>.justify-content-between.justify-content-around</code><br><code>.align-items-start.align-items-end.align-items-center</code><br><code>.align-items-baseline.align-items-stretch</code><br><code>.align-self-start.align-self-end.align-self-center</code><br><code>.align-self-baseline.align-self-stretch</code></p><h4 id="Fill"><a href="#Fill" class="headerlink" title="Fill"></a>Fill</h4><p>Use the <code>.flex-fill</code> class on a series of sibling elements to force them into widths equal to their content </p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><code>.flex-grow-*</code> <code>.flex-shrink-*</code> <code>.flex-{grow|shrink}-0 .flex-{grow|shrink}-1</code></p><h4 id="Auto-margins"><a href="#Auto-margins" class="headerlink" title="Auto margins"></a>Auto margins</h4><p>Flexbox can do some pretty awesome things when you mix flex alignments with auto margins. Shown below are three examples of controlling flex items via auto margins: default (no auto margin), pushing two items to the right (<code>.mr-auto</code>), and pushing two items to the left (<code>.ml-auto</code>).</p><h4 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h4><p><code>.flex-nowrap</code>, wrapping with <code>.flex-wrap</code> or reverse wrapping with <code>.flex-wrap-reverse</code>.</p><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p><code>.order-0.order-1.order-2.order-3.order-4.order-5.order-6.order-7.order-8.order-9.order-10.order-11.order-12</code></p><h4 id="Align-content"><a href="#Align-content" class="headerlink" title="Align content"></a>Align content</h4><p>Use align-content utilities on flexbox containers to align flex items together on the cross axis. Choose from start (browser default), end, center, between, around, or stretch. To demonstrate these utilities, we’ve enforced flex-wrap: wrap and increased the number of flex items.<br><code>This property has no effect on single rows of flex items.</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客点击特效</title>
      <link href="/hexo-bo-ke-dian-ji-te-xiao/"/>
      <url>/hexo-bo-ke-dian-ji-te-xiao/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> coreSocialistValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#11f0e5"</span><span class="token punctuation">,</span><span class="token string">"#e815d3"</span><span class="token punctuation">,</span><span class="token string">"#f7f30f"</span><span class="token punctuation">,</span><span class="token string">"#e8270e"</span><span class="token punctuation">,</span><span class="token string">"#15eb59"</span><span class="token punctuation">,</span><span class="token string">"#881df2"</span><span class="token punctuation">,</span><span class="token string">"#fa9120"</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> coreSocialistValues<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//过滤a标签</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName <span class="token operator">==</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">let</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span />"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>coreSocialistValues<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> coreSocialistValues<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">let</span> color_index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> color <span class="token operator">=</span> colors<span class="token punctuation">[</span>color_index<span class="token punctuation">]</span>      <span class="token keyword">let</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>      $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">999999</span><span class="token punctuation">,</span>        <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>        <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>        <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>        <span class="token string">"color"</span><span class="token punctuation">:</span> color      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>      $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>        <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1500</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo参数</title>
      <link href="/hexo-can-shu/"/>
      <url>/hexo-can-shu/</url>
      
        <content type="html"><![CDATA[<ul><li>site.data<br>在source/_data文件夹下的 YAML or JSON files<br>比如在此文件夹下有一个 munu.yaml 文件，则可以在模板字符串中，link是 property</li></ul><p>&lt;% for (var link in site.data.menu) { %&gt;<br>  <a href="<%= site.data.menu[link] %>"> &lt;%= link %&gt; </a><br>&lt;% } %&gt;</p><p>hexo new [layout] <title><br>post is the default layout<br>There are three default layouts in Hexo: post, page and draft.<br>layout 存在于根目录下的 Scaffolds 文件夹中，里面默认有page.md/post.md/draft.md 三个</p><p>type=”image/x-icon” 是什么</p><p>theme 文件夹<br>.<br>├── _config.yml<br>├── languages<br>├── layout   //模板字符串文件夹<br>├── scripts //hexo 初始化时候会自动加载这个文件夹的js文件<br>└── source  //js/css 等直接copy到根目录下的public文件夹 ，会忽略隐藏文件和以_开头的文件</p><p>网站部署的时候根目录是生成的public文件夹<br>page ：Page specific information and custom variables set in front-matter.<br>page.content：The full processed content of the article</p><p><code>Hexo</code> has special <code>page</code> called <code>post</code>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jquery</title>
      <link href="/jquery/"/>
      <url>/jquery/</url>
      
        <content type="html"><![CDATA[<ul><li>jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。</li><li>jQuery的选择器不会返回undefined或者null</li><li>jQuery对象和DOM对象之间可以互相转化<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// jQuery对象</span><span class="token keyword">var</span> divDom <span class="token operator">=</span> div<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设存在div，获取第1个DOM元素</span><span class="token keyword">var</span> another <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>divDom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新把DOM包装为jQuery对象</span></code></pre></li><li>可以查找同时包含red和green的节点<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.red.green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意没有空格！</span><span class="token keyword">var</span> email <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[name=email]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找出&lt;??? name="email"></span><span class="token keyword">var</span> emailInput <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'input[name=email]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>根据tag和<span class="token keyword">class</span>来组合查找也很常见：<span class="token keyword">var</span> tr <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'tr.red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre></li><li>$(‘ancestor descendant’)</li><li>子选择器$(‘parent&gt;child’)</li><li>过滤器（Filter）过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。last-child/first-child/even/odd/nth-child</li><li>针对表单元素，jQuery还有一组特殊的选择器<br>:enabled/:disabled/:file/:radio/:focus</li></ul><h2 id="查找和过滤"><a href="#查找和过滤" class="headerlink" title="查找和过滤"></a>查找和过滤</h2><p>通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个jQuery对象后，还可以以这个对象为基准，进行查找和过滤。</p><p>最常见的查找是在某个节点的所有子节点中查找，使用find()方法，它本身又接收一个任意的选择器。如果要从当前节点开始向上查找，使用parent()方法parent() 对于位于同一层级的节点，可以通过next()和prev()方法</p><p>过滤方法：filter()方法可以过滤掉不符合选择器条件的节点；map()方法把一个jQuery对象包含的若干DOM节点转化为其他对象；此外，一个jQuery对象如果包含了不止一个DOM节点，first()、last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉<br>过滤方法中传入一个函数，要特别注意函数内部的this被绑定为DOM对象，不是jQuery对象</p><h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><p>jQuery对象的text()和html()方法分别获取节点的文本和原始HTML文本，jQuery的API设计非常巧妙：无参数调用text()是获取文本，传入参数就变成设置文本，HTML也是类似操作</p><p>一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上</p><h2 id="修改CSS"><a href="#修改CSS" class="headerlink" title="修改CSS"></a>修改CSS</h2><p>jQuery对象有“批量操作”的特点，这用于修改CSS实在是太方便了<br>$(‘#test-css li.dy&gt;span’).css(‘background-color’, ‘#ffd351’).css(‘color’, ‘red’);<br>为了和JavaScript保持一致，CSS属性可以用’background-color’和’backgroundColor’两种格式。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false， class是否包含highlight</span>div<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加highlight这个class</span>div<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'highlight'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除highlight这个class</span></code></pre><h2 id="显示和隐藏DOM"><a href="#显示和隐藏DOM" class="headerlink" title="显示和隐藏DOM"></a>显示和隐藏DOM</h2><p>要隐藏一个DOM，我们可以设置CSS的display属性为none，利用css()方法就可以实现。不过，要显示这个DOM就需要恢复原有的display属性，这就得先记下来原有的display属性到底是block还是inline还是别的值。</p><p>考虑到显示和隐藏DOM元素使用非常普遍，jQuery直接提供show()和hide()方法</p><h2 id="获取DOM信息"><a href="#获取DOM信息" class="headerlink" title="获取DOM信息"></a>获取DOM信息</h2><p>利用jQuery对象的若干方法，我们直接可以获取DOM的高宽等信息，而无需针对不同浏览器编写特定代码：</p><p>// 浏览器可视窗口大小:<br>$(window).width(); // 800<br>$(window).height(); // 600</p><p>// HTML文档大小:<br>$(document).width(); // 800<br>$(document).height(); // 3500</p><p>attr()和removeAttr()方法用于操作DOM节点的属性<br>prop()方法和attr()类似<br>attr()和prop()对于属性checked处理有所不同：</p><p>var radio = $(‘#test-radio’);<br>radio.attr(‘checked’); // ‘checked’<br>radio.prop(‘checked’); // true<br>prop()返回值更合理一些。不过，用is()方法判断更好：</p><p>var radio = $(‘#test-radio’);<br>radio.is(‘:checked’); // true<br>类似的属性还有selected，处理时最好用is(‘:selected’)。</p><h2 id="操作表单"><a href="#操作表单" class="headerlink" title="操作表单"></a>操作表单</h2><p>对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性,一个val()就统一了各种输入框的取值和赋值的问题</p><h2 id="修改DOM结构"><a href="#修改DOM结构" class="headerlink" title="修改DOM结构"></a>修改DOM结构</h2><p>直接使用浏览器提供的API对DOM结构进行修改，不但代码复杂，而且要针对浏览器写不同的代码。</p><ul><li>除了通过jQuery的html()这种暴力方法外，还可以用append()方法<br>ul.append(‘<li><span>Haskell</span></li>‘);<br>除了接受字符串，append()还可以传入原始的DOM对象，jQuery对象和函数对象<br>传入函数时，要求返回一个字符串、DOM对象或者jQuery对象。因为jQuery的append()可能作用于一组DOM节点，只有传入函数才能针对每个DOM生成不同的子节点。</li></ul><p>append()把DOM添加到最后，prepend()则把DOM添加到最前。<br>另外注意，如果要添加的DOM节点已经存在于HTML文档中，它会首先从文档移除，然后再添加，也就是说，用append()，你可以移动一个DOM节点。</p><p>如果要把新节点插入到指定位置after(),也就是说，同级节点可以用after()或者before()方法</p><p>删除节点<br>要删除DOM节点，拿到jQuery对象后直接调用remove()方法就可以了。如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节点</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>下面两种写法等价，后者更常用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>鼠标事件：mousemove：鼠标在DOM内部移动时触发； hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。<br>ready事件仅作用于document对象。由于ready事件在DOM完成初始化后触发，且只触发一次，所以非常适合用来写其他的初始化代码。</p><p>$(function () {<br>    // init…<br>});<br>这种写法最为常见。如果你遇到$(function () {…})的形式，牢记这是document对象的ready事件处理函数。可以反复绑定事件处理函数，它们会依次执行<br>取消绑定<br>一个已被绑定的事件可以解除绑定，通过off(‘click’, function)实现<br>可以使用off(‘click’)一次性移除已绑定的click事件的所有处理函数。<br>同理，无参数调用off()一次性移除已绑定的所有类型的事件处理函数<br>浏览器安全限制<br>在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，window.open()函数</p><p>编写jQuery插件<br>给jQuery对象绑定一个新方法是通过扩展$.fn对象实现的<br>$.fn.highlight1 = function () {<br>    // this已绑定为当前jQuery对象:<br>    this.css(‘backgroundColor’, ‘#fffceb’).css(‘color’, ‘#d85030’);<br>    return this;<br>}<br>注意到函数内部的this在调用时被绑定为jQuery对象，所以函数内部代码可以正常调用所有jQuery对象的方法。</p><p>最终，我们得出编写一个jQuery插件的原则：</p><p>给$.fn绑定函数，实现插件的代码逻辑；<br>插件函数最后要return this;以支持链式调用；<br>插件函数要有默认值，绑定在$.fn.<pluginName>.defaults上；<br>用户在调用时可传入设定值以便覆盖默认值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端常用工具简介</title>
      <link href="/qian-duan-gong-ju-he-ji/"/>
      <url>/qian-duan-gong-ju-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="前端常用工具简介"><a href="#前端常用工具简介" class="headerlink" title="前端常用工具简介"></a>前端常用工具简介</h1><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><ul><li><a href="https://caniuse.com/" target="_blank" rel="noopener">can i use</a><br>“Can I use” provides up-to-date browser support tables for support of front-end web technologies on desktop and mobile web browsers.</li><li><a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a><br>Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env<h2 id="CSS工具"><a href="#CSS工具" class="headerlink" title="CSS工具"></a>CSS工具</h2></li><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">autoprefixer</a><br>Parse CSS and add vendor prefixes to rules by Can I Use</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js</title>
      <link href="/js/"/>
      <url>/js/</url>
      
        <content type="html"><![CDATA[<h2 id="function-作用"><a href="#function-作用" class="headerlink" title="!function(){}() 作用"></a><code>!function(){}()</code> 作用</h2><p>跟(function(){})();这个函数是一个意思，都是告诉浏览器自动运行这个匿名函数的，因为!+()这些符号的运算符是最高的，所以会先运行它们后面的函数</p><h2 id="noscript-标签"><a href="#noscript-标签" class="headerlink" title="noscript 标签"></a>noscript 标签</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node-sql-install</title>
      <link href="/node-sql-install/"/>
      <url>/node-sql-install/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS8-install-node"><a href="#CentOS8-install-node" class="headerlink" title="CentOS8 install node"></a>CentOS8 install node</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><pre class=" language-shell"><code class="language-shell">cd /homewget https://nodejs.org/dist/v12.14.1/node-v12.14.1-linux-x64.tar.xztar -Jxvf node-v12.14.1-linux-x64.tar.xzln -s /home/node-v12.14.1-linux-x64/bin/node /usr/local/binln -s /home/node-v12.14.1-linux-x64/bin/npm  /usr/local/binln -s /home/node-v12.14.1-linux-x64/bin/npx  /usr/local/binnode -v</code></pre><h2 id="开放80端口"><a href="#开放80端口" class="headerlink" title="开放80端口"></a>开放80端口</h2><p><code>firewall-cmd --zone=public --permanent --add-port=80/tcp &amp;&amp; firewall-cmd --reload</code></p><h2 id="node-后台运行"><a href="#node-后台运行" class="headerlink" title="node 后台运行"></a>node 后台运行</h2><p>vim /etc/systemd/system/http1.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=http1 daemon<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>ExecStart=/usr/local/bin/node  /home/my-server/app.jsRestart=always<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=graphical.target</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z-index</title>
      <link href="/z-index/"/>
      <url>/z-index/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-Z-index"><a href="#CSS-Z-index" class="headerlink" title="CSS Z-index"></a>CSS Z-index</h1><h2 id="当没有定义z-index属性时"><a href="#当没有定义z-index属性时" class="headerlink" title="当没有定义z-index属性时"></a>当没有定义z-index属性时</h2><p>When no z-index property is specified, elements are rendered on the default rendering layer 0 (zero).<br>从下倒上依次是：</p><ul><li>The background and borders of the root element</li><li>Descendant non-positioned blocks, in order of appearance in the HTML</li><li>Descendant positioned elements, in order of appearance in the HTML</li></ul><p>当flex-items的order属性改变了HTML的显示顺序之后，它同样会影响stacking context的顺序</p><h2 id="The-stacking-context（层叠上下文）"><a href="#The-stacking-context（层叠上下文）" class="headerlink" title="The stacking context（层叠上下文）"></a>The stacking context（层叠上下文）</h2><p>它是一个假象的三维空间，垂直于视口，HTML 元素基于其元素属性按照优先级顺序占据这个空间</p><h3 id="如何产生一个层叠上下文"><a href="#如何产生一个层叠上下文" class="headerlink" title="如何产生一个层叠上下文"></a>如何产生一个层叠上下文</h3><ul><li>html元素本身</li><li>position为absolute/relative，并且z-index不为auto</li><li>position为fixed/sticky</li><li>flex items,并且z-index不为auto</li><li>grid items, 并且z-index不为auto</li><li>Element with a opacity value less than 1 </li><li>Element with a mix-blend-mode value other than normal.</li><li>Element with any of the following properties with value other than none:<pre><code>  - transform  - filter  - perspective  - clip-path  - mask / mask-image / mask-border</code></pre><h3 id="层叠上下文如何工作"><a href="#层叠上下文如何工作" class="headerlink" title="层叠上下文如何工作"></a>层叠上下文如何工作</h3>在同一个层叠上下文，子元素按照没有z-index时的顺序叠加，如果子元素有z-index属性，它是相对于在本层叠上下文中的其他子元素而言的，它整体的z-index是由父元素决定的。父元素和子元素属于不同的层叠上下文，其z-index没有比较性可言。</li></ul><p>HTML的层次结构和层叠上下文的层次结构是不同的。在层叠上下文的层次结构中，没有创建层叠上下文的元素同其父级处于一个层叠上下文。创建了层叠上下文的会跳离父元素的HTML结构限制，自成一个层叠上下文。</p><h2 id="Stacking-with-floated-blocks"><a href="#Stacking-with-floated-blocks" class="headerlink" title="Stacking with floated blocks"></a>Stacking with floated blocks</h2><p>For floated blocks, the stacking order is a bit different. Floating blocks are placed between non-positioned blocks and positioned blocks</p><ul><li>The background and borders of the root element</li><li>Descendant non-positioned blocks, in order of appearance in the HTML</li><li>Floating blocks</li><li>Descendant positioned elements, in order of appearance in the HTML</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tar-unzip</title>
      <link href="/tar-unzip/"/>
      <url>/tar-unzip/</url>
      
        <content type="html"><![CDATA[<p>Linux下常见的压缩包格式有5种:zip tar.gz tar.bz2 tar.xz tar.Z<br>其中tar是种打包格式,gz和bz2等后缀才是指代压缩方式:gzip和bzip2<br>unzip filename.zip<br>事实上, 从1.15版本开始tar就可以自动识别压缩的格式,故不需人为区分压缩格式就能正确解压<br>tar -xvf filename.tar.gz<br>tar -xvf filename.tar.bz2<br>tar -xvf filename.tar.xz<br>tar -xvf filename.tar.Z</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/nginx/"/>
      <url>/nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="windows-nginx指南"><a href="#windows-nginx指南" class="headerlink" title="windows nginx指南"></a>windows nginx指南</h3><p><a href="http://nginx.org/en/docs/windows.html" target="_blank" rel="noopener">http://nginx.org/en/docs/windows.html</a><br>新手指引<br><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">http://nginx.org/en/docs/beginners_guide.html</a><br><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a><br>nginx配置常见误区<br><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/" target="_blank" rel="noopener">https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/</a><br>配置指南<br><a href="https://www.linode.com/docs/web-servers/nginx/how-to-configure-nginx/" target="_blank" rel="noopener">https://www.linode.com/docs/web-servers/nginx/how-to-configure-nginx/</a></p><p>一定要结合日志查看nginx 服务运行状况<br>access.log error.log 这两个文件很重要<br>windows下载nginx目录中开启cmd窗口<br>start nginx.exe<br>nginx.exe -s stop  //暴力退出<br>nginx.exe -s quit  //优雅退出<br>nginx.exe -s reload  //重新加载配置文件<br>nginx.exe -V   //查看各个目录<br>nginx.exe -t   //检查配置文件是否正确 </p><h3 id="Linux下安装nginx"><a href="#Linux下安装nginx" class="headerlink" title="Linux下安装nginx"></a>Linux下安装nginx</h3><p>yum install nginx -y</p><p>RPM (Red Hat Package Manager) is an default open source and most popular package management utility for Red Hat based systems like (RHEL, CentOS and Fedora).The tool allows system administrators and users to install, update, uninstall, query, verify and manage system software packages in Unix/Linux operating systems. The RPM formerly known as .rpm file, that includes compiled software programs and libraries needed by the packages. This utility only works with packages that built on .rpm format.</p><p>rpm -ql nginx #查看配置文件和目录</p><p>nginx http 中server模块的配置<br>root是服务器的根目录，可以在server字段中配置，location中可以覆盖<br>index 字段在server中配置，location中也可以覆盖<br>The index variable tells NGINX which file to serve if none is specified.</p><h3 id="location-修饰符"><a href="#location-修饰符" class="headerlink" title="location 修饰符"></a>location 修饰符</h3><ul><li><p>The = modifier<br>The requested document URI must match the specified pattern exactly(只能严格匹配一个字符串路径)，不能使用正则</p></li><li><p>No modifier<br>The requested document URI must begin with the specified pattern.不能使用正则</p></li><li><p>The ^~ modifier (类似于没有修饰符情况，它比正则匹配享有优先权)<br>Similar to the no-symbol behavior, the location URI must begin with the specified pattern.<br>The difference is that if the pattern is matched, Nginx stops searching for other patterns</p></li><li><p>The ~ modifier (uri大小写敏感)<br>The requested URI must be a case-sensitive match to the specified regular expression</p></li><li><p>The ~* modifier (uri大小写不敏感)<br>The requested URI must be a case-insensitive match to the specified regular expression</p><h3 id="location的匹配顺序-Search-order-and-priority"><a href="#location的匹配顺序-Search-order-and-priority" class="headerlink" title="location的匹配顺序(Search order and priority)"></a>location的匹配顺序(Search order and priority)</h3><p>location 的匹配和先后顺序无关。<br>Nginx will search for matching patterns in a specific order:</p></li><li><p>location blocks with the = modifier: If the specified string exactly matches the<br>requested URI, Nginx retains the location block.</p></li><li><p>location blocks with no modifier: If the specified string exactly matches the<br>requested URI, Nginx retains the location block.</p></li><li><p>location blocks with the ^~ modifier: If the specified string matches the beginning<br>of the requested URI, Nginx retains the location block.</p></li><li><p>location blocks with ~ or ~* modifier: If the regular expression matches the<br>requested URI, Nginx retains the location block.</p></li><li><p>location blocks with no modifier: If the specified string matches the beginning of<br>the requested URI, Nginx retains the location block.</p></li></ul><h3 id="会导致内部重定向的几个命令"><a href="#会导致内部重定向的几个命令" class="headerlink" title="会导致内部重定向的几个命令"></a><a href="https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms" target="_blank" rel="noopener">会导致内部重定向的几个命令</a></h3><p>Some directives that can lead to this type of internal redirect are:</p><ul><li>index</li><li>try_files</li><li>rewrite</li><li>error_page</li></ul><pre class=" language-shell"><code class="language-shell">        root         /usr/share/nginx/html/data;        index index.html;        location  /a {            root /home;            #这里如果要留在这个block中可以使用 try_files $uri $uri.html $uri/            #它会依次匹配/a文件  /a.html文件  /a/目录           }        error_page 404 /404.html;        location = /40x.html {        }</code></pre><p>情况1：假设根目录下只有/home<br>如果有一个请求 /a 过来，nginx会先匹配第一个location block，此时进入block之后，会重新定义根目录，即 /home ,然后就没有然后了，在access.log中会报404状态码，表示未找到页面，在error.log中它会记录 open() “/home/a” failed (2: No such file or directory)，接着它会走error_page ，导航到/404.html , nginx会匹配 /404.html 这个URI，此时相当于重新寻找要走的block，此时相当于以 / 开头，即根目录，它会去/usr/share/nginx/html/data下寻找404.html<br>情况2： 根目录下只有/home/a ，a文件夹里面什么都没有<br>此时nginx会进入a目录，access.log中报”GET /a/ HTTP/1.1” 403 ，error.log中报 directory index of “/home/a/“ is forbidden<br>情况3： a中新建一个index.html文件<br>access.log 中状态码 200，返回的是a文件夹中的index.html. 它会默认index index.html.</p><h3 id="index-字段"><a href="#index-字段" class="headerlink" title="index 字段"></a>index 字段</h3><p>Context: http, server, location. Variables are accepted.(即这几个http server,location 中都存在index字段。默认 index.html)<br>This defines the default page that Nginx will serve if no filename is specified in the<br>request (in other words, the index page). You may specify multiple filenames, and the first<br>file to be found will be served. If none of the specified files are found, and if the<br>autoindex directive is enabled (check the HTTP Autoindex module), Nginx will attempt to<br>generate an automatic index of the files. Otherwise, it will return a 403 Forbidden error<br>page. Optionally, you may insert an absolute filename (such as /page.html, based from<br>the document root directory) but only as the last argument of the directive.<br>Syntax: index file1 [file2…] [absolute_file];<br>Default value: index.html</p><p>HTTP 304 未改变说明无需再次传输请求的内容，也就是说可以使用缓存的内容</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>所有以jpg/png/gif结尾的图片文件缓存24h<br>location ~ .*.(jpg|png|gif)$ {<br>        expires 24h;<br>}</p><h3 id="浏览器缓存-1"><a href="#浏览器缓存-1" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>add_header name value<br>location ~ .*.json$ {<br>        add_header Access-Control-Allow-Origin <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>;<br>        add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;<br>        root /data/json;<br>    }</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>The HTTP referer (a misspelling of referrer),By checking the referrer, the new webpage can see where the request originated.<br>In the most common situation this means that when a user clicks a hyperlink in a web browser, the browser sends a request to the server holding the destination webpage. The request may include the referer field, which indicates the last page the user was on (the one where they clicked the link).</p><p>location ~ .*.(jpg|png|gif)$ {<br>        expires 1h;<br>        valid_referers none blocked 47.104.184.134;<br>        if ($invalid_referer) {<br>           return 403;<br>        }<br>        root /data/images;<br>    }</p><ul><li>none “Referer” 为空</li><li>blocked “Referer”不为空，但是里面的值被代理或者防火墙删除了，这些值都不以http://或者https://开头，而是“Referer: XXXXXXX”这种形式</li><li>server_names “Referer”来源头部包含当前的server_names（当前域名）</li><li>arbitrary string 任意字符串,定义服务器名或者可选的URI前缀.主机名可以使用*开头或者结尾，在检测来源头部这个过程中，来源域名中的主机端口将会被忽略掉</li><li>regular expression 正则表达式,~表示排除https://或http://开头的字符串.<br>注意:通过Referer实现防盗链比较基础，仅可以简单实现方式资源被盗用。构造Referer的请求很容易实现<h3 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h3>正向代理，代理的是客户端，比如浏览器，翻墙上外网。<br>反向代理代理的是服务器，浏览器访问代理服务器，比如nginx代理服务器，nginx转发请求给后面的服务器集群处理，平衡负载，同时也保证了业务服务器的安全性，客户端感知不到业务处理服务器，互联网向外暴露的是nginx代理服务器。</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><a href="http://www.zhufengpeixun.com/plan/html/43.nginx.html#t518.7.1%20upstream" target="_blank" rel="noopener">反向代理</a></h3><p>在http模块中配置upstream模块，放置服务器集群<br>在server模块location中配置 proxy_pass </p><pre class=" language-shell"><code class="language-shell">http{    upstream test {    # 定义一个服务器组名 ，默认用轮询的方式分配        server localhost:3000;        server localhost:4000;        server localhost:5000;    }    server {          location / {            proxy_pass http://test; #以/开头的路由转交给服务器组test处理        }    }}</code></pre><h3 id="阿里云端口问题"><a href="#阿里云端口问题" class="headerlink" title="阿里云端口问题"></a><a href="https://cnodejs.org/topic/599d58e1f36051a45246c2b5" target="_blank" rel="noopener">阿里云端口问题</a></h3><p>ifconfig看不到外网ip，只显示环回地址和内网ip</p><p>答案：阿里云现在不能使用经典网络了，现在连接应该是通过转发一次到内部机房的，所以ECS里面只能看到一个局域网的IP.在ECS实例的安全组配置里面配置外网可访问的端口，这样就能在外面使用公网IP访问了。开启3000、4000、5000端口</p><p>Accelerated support with caching of FastCGI, uwsgi, Simple Common Gateway<br>Interface (SCGI)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>build-hexo-theme</title>
      <link href="/build-hexo-theme/"/>
      <url>/build-hexo-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="iconfont应用"><a href="#iconfont应用" class="headerlink" title="iconfont应用"></a>iconfont应用</h2><p>下载的iconfont在style中引入<br><code>@import &quot;iconfont/iconfont.css&quot;</code><br><code>&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;</code></p><h2 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h2><h3 id="SELECTORS"><a href="#SELECTORS" class="headerlink" title="SELECTORS"></a>SELECTORS</h3><p>Parent Reference <code>&amp;:hover{}</code></p><p>参考链接：<br><a href="https://favicon.io/" target="_blank" rel="noopener">网站favicon</a><br><a href="https://cssgenerator.org/" target="_blank" rel="noopener">css生成器</a><br><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>responsive web design</title>
      <link href="/responsive-web-design/"/>
      <url>/responsive-web-design/</url>
      
        <content type="html"><![CDATA[<ul><li>容器块级元素自适应<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>  <span class="token selector">width<span class="token pseudo-class">:70</span>%;//    宽度自适应屏幕，70%  max-width<span class="token pseudo-class">:980px</span>; // 限定最大宽度  min-width<span class="token pseudo-class">:320px</span>; //  margin: 0 auto; //居中  img</span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>       //自适应父元素container,图片高度会自己调节，但是当宽度大于图片自身尺寸之后，会拉伸图片，所以推荐写成<span class="token property">max-width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>这样当宽度超过图片自身宽度时图片不再变宽，就不会降低图片显示质量，它也能很好的自适应屏幕尺寸变小的情况。      <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>      //图片默认inline  <span class="token punctuation">}</span></code></pre></li></ul><p>}</p><pre><code>- rem 单位：继承自html元素的font-size，一般默认16px```csshtml{    font-size:62.5%;     //默认字体如果16px,则html元素的font-size现在为10px;    //不推荐}</code></pre><ul><li><p>em 单位：如果父元素没有规定font-size，它会一直往上搜素直到body元素,继承body元素的font-size，一般默认16px.</p></li><li><p>如何选择字体单位<br>  general rule of thumb:</p><ul><li>font-size: rem;</li><li>padding and margin: em; //这里有一个坑，就是em一般是参考父元素的font-size，但当涉及到padding和margin的时候，它是以自身元素的font-size为基准的。</li><li>width：em or percentage</li></ul></li><li><p>media query</p><pre class=" language-css"><code class="language-css"><span class="token property">syntax</span><span class="token punctuation">:</span><span class="token atrule"><span class="token rule">@media</span> media-type and <span class="token punctuation">(</span>media-features<span class="token punctuation">)</span></span><span class="token punctuation">{</span> <span class="token number">...</span> <span class="token punctuation">}</span>// 媒体查询顺序很重要，以下写法会导致 第一个媒体查询不起作用，会被后一个覆盖掉。当resize了之后，css会重新进行渲染，从头至尾走一步css,只要规则匹配，后面的就会覆盖掉前面的，所以媒体查询一般都写在最后面。<span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>600px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">//当屏幕宽度大于等于600px时候  body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>400px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>  <span class="token selector">body</span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>UI设计先从移动端开始，小屏幕到大屏幕考虑。小屏幕都是竖着从上往下排列，等到屏幕宽度变大之后来一个 media query(min-width) 即可，这样可以少些好多代码</p></li><li><p>如果页面最先展现 图片 ，小标题来展现一些 info 信息，html 结构也应该先写标题，段落(用于展现info)，保证在没有css加载的时候逻辑顺序正确，通过css flex-box 中的order调整视觉上的布局。</p></li><li><p>图片处理技巧<br>如果想调整图片大小<br>img{<br>  width:100%<br>  min-height:200px;<br>  object-fit: cover;<br>  //这个会按比例放大图片，并进行裁切以适应容器<br>  object-position:left/right //调整图片显示位置<br>}</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitbookinstall</title>
      <link href="/gitbookinstall/"/>
      <url>/gitbookinstall/</url>
      
        <content type="html"><![CDATA[<h1 id="Gitbook安装"><a href="#Gitbook安装" class="headerlink" title="Gitbook安装"></a>Gitbook安装</h1><h2 id="gitbook-简介"><a href="#gitbook-简介" class="headerlink" title="gitbook 简介"></a><a href="https://baike.baidu.com/item/GitBook" target="_blank" rel="noopener">gitbook 简介</a></h2><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。<br>GitBook支持输出多种文档格式：</p><ul><li>静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上</li><li>PDF：需要安装gitbook-pdf依赖</li></ul><p>使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md </p><h2 id="gitbook-cli"><a href="#gitbook-cli" class="headerlink" title="gitbook-cli"></a>gitbook-cli</h2><p>gitbook 命令行工具，用来操控gitbook</p><pre class=" language-shell"><code class="language-shell">npm install gitbook-cli -g</code></pre><p>执行 <code>git init</code> 时会自动安装gitbook,耗时较长，请耐心等待<br>常用命令</p><pre class=" language-shell"><code class="language-shell">#Create the directories and files for a book from its SUMMARY.md file (if existing) usinggitbook init#You can serve a repository as a book using:gitbook serve#Or simply build the static website using:gitbook build</code></pre><h2 id="须知"><a href="#须知" class="headerlink" title="须知"></a>须知</h2><ul><li>不再使用git作为版本管理工具</li><li>可以在gitbook space 中导入GitHub的仓库</li><li>不再支持 gitbook-cli 工具了</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html" target="_blank" rel="noopener">https://yuzeshan.gitbooks.io/gitbook-studying/content/index.html</a><br><a href="https://docs.gitbook.com/getting-started/quick-start" target="_blank" rel="noopener">https://docs.gitbook.com/getting-started/quick-start</a><br><a href="https://docs.gitbook.com/resources/gitbook-legacy/v2-differences" target="_blank" rel="noopener">https://docs.gitbook.com/resources/gitbook-legacy/v2-differences</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to install ss</title>
      <link href="/ssinstall/"/>
      <url>/ssinstall/</url>
      
        <content type="html"><![CDATA[<p>Xshell6 远程登录 vps (OS:CentOS8)</p><a id="more"></a><h2 id="检测pip"><a href="#检测pip" class="headerlink" title="检测pip"></a>检测pip</h2><p>whereis pip <br><br>pip: /usr/bin/pip3.6<br><br>这个版本支持 chacha20-ietf-poly1305加密方式</p><p><code>pip3.6 install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</code></p><h2 id="安装-libsodium-包"><a href="#安装-libsodium-包" class="headerlink" title="安装 libsodium 包"></a><a href="https://www.24kplus.com/linux/287.html" target="_blank" rel="noopener">安装 libsodium 包</a></h2><p>现在ss服务端还启动不了，需要安装libsodium</p><pre class=" language-shell"><code class="language-shell">cd /homewget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gztar -zxf libsodium-1.0.18-stable.tar.gzcd libsodium-stable#编译安装./configure --prefix=/usrmake && make checksudo make installsudo ldconfig</code></pre><p>解决错误一： configure: error: no acceptable C compiler found in $PATH </p><p>yum install gcc</p><p>解决错误二： config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. </p><p>yum install make -y</p><h2 id="配置ss服务端"><a href="#配置ss服务端" class="headerlink" title="配置ss服务端"></a>配置ss服务端</h2><p>whereis ssserver<br><br>ssserver: /usr/local/bin/ssserver<br></p><h3 id="创建shadowsocks启动配置文件"><a href="#创建shadowsocks启动配置文件" class="headerlink" title="创建shadowsocks启动配置文件"></a>创建shadowsocks启动配置文件</h3><p>vim /etc/shadowsocks.conf</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>     <span class="token property">"server_port"</span><span class="token operator">:</span><span class="token number">10443</span><span class="token punctuation">,</span>    <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"chacha20-ietf-poly1305"</span><span class="token punctuation">}</span></code></pre><p>server_port:服务器监听端口</p><p>password:要和客户端ss密码一致</p><p>method:加密方式和客户端一致</p><h3 id="开启端口号"><a href="#开启端口号" class="headerlink" title="开启端口号"></a>开启端口号</h3><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --permanent --add-port=10443/tcp &&firewall-cmd --reload#查看开启的端口号firewall-cmd --zone=public --permanent --list-ports</code></pre><h3 id="将ss添加到Systemd-服务管理中"><a href="#将ss添加到Systemd-服务管理中" class="headerlink" title="将ss添加到Systemd 服务管理中"></a>将ss添加到Systemd 服务管理中</h3><p>vim /etc/systemd/system/shadowsocks.service</p><pre class=" language-service"><code class="language-service">[Unit]Description=shadowsocks daemon[Service]ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks.conf Restart=always[Install]WantedBy=graphical.target</code></pre><p>开启服务<br><br>systemctl enable shadowsocks</p><p>启动服务<br><br>systemctl start shadowsocks</p><p>检查 shadowsocks 服务是否已成功启动<br><br>systemctl status shadowsocks -l</p><h2 id="CentOS8-开启-BBR"><a href="#CentOS8-开启-BBR" class="headerlink" title="CentOS8 开启 BBR"></a><a href="https://nodeedge.com/centos8-bbr.html" target="_blank" rel="noopener">CentOS8 开启 BBR</a></h2><p>开启bbr</p><pre class=" language-shell"><code class="language-shell">echo "net.core.default_qdisc=fq" >> /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.confsysctl -p验证bbrsysctl -n net.ipv4.tcp_congestion_controllsmod | grep bbr</code></pre><h2 id="安装net-speeder"><a href="#安装net-speeder" class="headerlink" title="安装net-speeder"></a><a href="https://github.com/snooda/net-speeder" target="_blank" rel="noopener">安装net-speeder</a></h2><p>wget <a href="https://github.com/snooda/net-speeder/archive/master.zip" target="_blank" rel="noopener">https://github.com/snooda/net-speeder/archive/master.zip</a><br><br>unzip master.zip</p><p>安装epel 包<br><br>wget <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm" target="_blank" rel="noopener">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a><br><br>rpm -ivh epel-release-6-8.noarch.rpm</p><p>yum install libnet libpcap libnet-devel libpcap-devel</p><p>libpcap-devel现有的yum源匹配不到，到 <a href="https://centos.pkgs.org/8/centos-powertools-x86_64/libpcap-devel-1.9.0-3.el8.i686.rpm.html" target="_blank" rel="noopener">centos.pkgs.org</a> 可以找到安装<br>直接执行 <code>dnf --enablerepo=PowerTools install libpcap-devel</code> 即可安装</p><p>编译前还要安装一个包</p><pre class=" language-shell"><code class="language-shell">yum install libnet-devel编译cd net-speeder-master/sh build.sh查看网卡信息(ens3)ip address关闭tsoethtool -K ens3 tso off</code></pre><p>开启单边加速(前台运行)<br><br>./net_speeder ens3 “ip”</p><p>开启单边加速(后台运行)<br>vim /etc/systemd/system/netspeeder.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=netspeeder<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec=<span class="token number">0</span>ExecStart=/home/net-speeder-master/net_speeder ens3  <span class="token string">"ip"</span> <span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target</code></pre><p>systemctl enable netspeeder<br><br>启动服务<br><br>systemctl start netspeeder<br><br>systemctl status netspeeder</p><h2 id="vps上安装kcptun"><a href="#vps上安装kcptun" class="headerlink" title="vps上安装kcptun"></a><a href="https://blog.kuoruan.com/102.html" target="_blank" rel="noopener">vps上安装kcptun</a></h2><p>服务端和客户端用同一个版本<br>在GitHub releas上找到kcptun包，使用wget命令下载到vps上</p><pre class=" language-shell"><code class="language-shell">cd /homemkdir kcptuncd kcptun wget https://github.com/xtaci/kcptun/releases/download/v20200103/kcptun-linux-amd64-20200103.tar.gz# 解压tar -zxf kcptun-linux-amd64-20200103.tar.gz</code></pre><p>创建启动配置文件<br>vim kcptun.conf</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"crypt"</span><span class="token operator">:</span> <span class="token string">"salsa20"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"fast2"</span><span class="token punctuation">,</span>    <span class="token property">"listen"</span><span class="token operator">:</span>"<span class="token operator">:</span><span class="token number">29900</span>"<span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span><span class="token string">"127.0.0.1:10443"</span><span class="token punctuation">,</span>    <span class="token property">"nocomp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"datashard"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token property">"parityshard"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span></code></pre><p>上面的配置一定要和客户端的一致，key是密码，listen是客户端访问服务端时候监听的端口<br>target是要加速的vps上的服务，它通信的是vps上的ss，所以ip为127.0.0.1，端口号就是ss服务监听的的端口号<br>服务端kcptun 和 ss 各自提供自己的服务，各自监听自己的端口 ，kcptun 提供 ss端口的加速服务</p><h3 id="开启端口号-这个用udp协议"><a href="#开启端口号-这个用udp协议" class="headerlink" title="开启端口号(这个用udp协议)"></a>开启端口号(这个用udp协议)</h3><p> firewall-cmd –zone=public –permanent –add-port=29900/udp <br><br> firewall-cmd –reload</p><p>创建服务脚本<br>vim /etc/systemd/system/kcptun.service</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description=kcptun<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>TimeoutStartSec=<span class="token number">0</span>ExecStart=/home/kcptun/server_linux_amd64 -c  /home/kcptun/kcptun.conf<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy=multi-user.target</code></pre><p>systemctl enable kcptun<br><br>启动服务<br><br>systemctl start kcptun<br><br>systemctl status kcptun</p><h2 id="客户端-windows7-安装kcptun"><a href="#客户端-windows7-安装kcptun" class="headerlink" title="客户端(windows7)安装kcptun"></a>客户端(windows7)安装kcptun</h2><p>由于没有提供GUI图形界面，解压出来的只有.exe文件，直接执行没有办法传入配置<br>客户端 ss 访问 kcptun客户端，然后kcptun 访问vps上的kcptun server端</p><h3 id="创建客户端exe文件的控制VBScript脚本"><a href="#创建客户端exe文件的控制VBScript脚本" class="headerlink" title="创建客户端exe文件的控制VBScript脚本"></a>创建客户端exe文件的控制VBScript脚本</h3><p>vim run.vbs</p><pre class=" language-vbs"><code class="language-vbs">Dim RunKcptunSet fso = CreateObject("Scripting.FileSystemObject")Set WshShell = WScript.CreateObject("WScript.Shell")'获取文件路径currentPath = fso.GetFile(Wscript.ScriptFullName).ParentFolder.Path & "\"'配置文件路径configFile = currentPath & "client-config.json"'日志文件logFile = currentPath & "kcptun.log"'软件运行参数exeConfig = currentPath & "client_windows_amd64.exe -c " & configFile'拼接命令行cmdLine = "cmd /c " & exeConfig & " > " & logFile & " 2>&1"'启动软件WshShell.Run cmdLine, 0, False'等待1秒'WScript.Sleep 1000'打印运行命令'Wscript.echo cmdLineSet WshShell = NothingSet fso = Nothing'退出脚本WScript.quit</code></pre><p>创建启动配置脚本</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"localaddr"</span><span class="token operator">:</span> "<span class="token operator">:</span><span class="token number">12948</span>"<span class="token punctuation">,</span>    <span class="token property">"remoteaddr"</span><span class="token operator">:</span> <span class="token string">"10.10.10.10:29900"</span><span class="token punctuation">,</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"password"</span><span class="token punctuation">,</span>    <span class="token property">"crypt"</span><span class="token operator">:</span> <span class="token string">"salsa20"</span><span class="token punctuation">,</span>    <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"fast2"</span><span class="token punctuation">,</span>    <span class="token property">"conn"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"autoexpire"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>    <span class="token property">"mtu"</span><span class="token operator">:</span> <span class="token number">1350</span><span class="token punctuation">,</span>    <span class="token property">"sndwnd"</span><span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span>    <span class="token property">"rcvwnd"</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token property">"datashard"</span><span class="token operator">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    <span class="token property">"parityshard"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token property">"dscp"</span><span class="token operator">:</span> <span class="token number">46</span><span class="token punctuation">,</span>    <span class="token property">"nocomp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"acknodelay"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"nodelay"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"interval"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    <span class="token property">"resend"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"nc"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"sockbuf"</span><span class="token operator">:</span> <span class="token number">4194304</span><span class="token punctuation">,</span>    <span class="token property">"keepalive"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><p>localaddr为 :12948,本地监听端口，供ss访问<br><br>key为password,需和服务端保持一致<br><br>remoteaddr为vps的ip地址以及vps上kcptun监听的端口<br></p><h3 id="客户端ss配置"><a href="#客户端ss配置" class="headerlink" title="客户端ss配置"></a>客户端ss配置</h3><p>服务器 IP 填写本机：127.0.0.1<br><br>服务器端口填写：12948</p><p>双击run.vbs启动测试。</p>]]></content>
      
      
      <categories>
          
          <category> CentOS8 </category>
          
          <category> Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
